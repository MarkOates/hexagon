<!DOCTYPE html>
<head>
<style>
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: blue;
}
.private_property
{
  color: lightblue;
}

.method
{
  color: red;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: green;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #dfdfdf;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#quintessence/ApplicationController.q.yml">quintessence/ApplicationController.q.yml</a></li>
  <li><a href="#quintessence/Blast/String/Trimmer.q.yml">quintessence/Blast/String/Trimmer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ASTTraverser.q.yml">quintessence/Hexagon/ASTTraverser.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.q.yml">quintessence/Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/Cursor.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Cursor.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/EventController.q.yml">quintessence/Hexagon/AdvancedCodeEditor/EventController.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/Renderer.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter.q.yml">quintessence/Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/Selection.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Selection.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/Stage.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/SymbolUnderCursorMatcher.q.yml">quintessence/Hexagon/AdvancedCodeEditor/SymbolUnderCursorMatcher.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedCodeEditor/WindowRenderer.q.yml">quintessence/Hexagon/AdvancedCodeEditor/WindowRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedComponentNavigator/ComponentSearcher.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/ComponentSearcher.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedComponentNavigator/EventController.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/EventController.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedComponentNavigator/Renderer.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedComponentNavigator/SearchBar.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/SearchBar.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/AdvancedComponentNavigator/Stage.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BlastComponentLayoutGenerator.q.yml">quintessence/Hexagon/BlastComponentLayoutGenerator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BlastProjectLayoutsGenerator.q.yml">quintessence/Hexagon/BlastProjectLayoutsGenerator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSequenceMeter/Renderer.q.yml">quintessence/Hexagon/BuildSequenceMeter/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/BuildFactory.q.yml">quintessence/Hexagon/BuildSystem/BuildFactory.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/BuildStageFactory.q.yml">quintessence/Hexagon/BuildSystem/BuildStageFactory.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/BuildStageRenderer.q.yml">quintessence/Hexagon/BuildSystem/BuildStageRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/BuildStageRenderers/Base.q.yml">quintessence/Hexagon/BuildSystem/BuildStageRenderers/Base.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/BuildStageRenderers/ShellCommand.q.yml">quintessence/Hexagon/BuildSystem/BuildStageRenderers/ShellCommand.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/BuildStages/Base.q.yml">quintessence/Hexagon/BuildSystem/BuildStages/Base.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/BuildStages/ShellCommand.q.yml">quintessence/Hexagon/BuildSystem/BuildStages/ShellCommand.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/Builds/Base.q.yml">quintessence/Hexagon/BuildSystem/Builds/Base.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/ReportRenderer.q.yml">quintessence/Hexagon/BuildSystem/ReportRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/BuildSystem/ReportRenderers/Base.q.yml">quintessence/Hexagon/BuildSystem/ReportRenderers/Base.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Camera.q.yml">quintessence/Hexagon/Camera.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatCPTIntegration/Conversation.q.yml">quintessence/Hexagon/ChatCPTIntegration/Conversation.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatCPTIntegration/Messages/Base.q.yml">quintessence/Hexagon/ChatCPTIntegration/Messages/Base.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatCPTIntegration/Messages/Text.q.yml">quintessence/Hexagon/ChatCPTIntegration/Messages/Text.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/Author.q.yml">quintessence/Hexagon/ChatGPTIntegration/Author.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/Chat/Chat.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/Chat.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/Chat/ConversationView.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/ConversationView.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/Chat/InputBox.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/InputBox.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/Chat/LogView.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/LogView.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/Chat/Stage.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/Message.q.yml">quintessence/Hexagon/ChatGPTIntegration/Message.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat.q.yml">quintessence/Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/CachedLineRenderer.q.yml">quintessence/Hexagon/CodeEditor/CachedLineRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/Cursor.q.yml">quintessence/Hexagon/CodeEditor/Cursor.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/CursorRenderer.q.yml">quintessence/Hexagon/CodeEditor/CursorRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/FileCategoryDecorator.q.yml">quintessence/Hexagon/CodeEditor/FileCategoryDecorator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/LineRenderBin.q.yml">quintessence/Hexagon/CodeEditor/LineRenderBin.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/Renderer/AdvancedLineRenderer.q.yml">quintessence/Hexagon/CodeEditor/Renderer/AdvancedLineRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/Renderer/BasicLineRenderer.q.yml">quintessence/Hexagon/CodeEditor/Renderer/BasicLineRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeEditor/Stage.q.yml">quintessence/Hexagon/CodeEditor/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeMessagePointManager.q.yml">quintessence/Hexagon/CodeMessagePointManager.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeRangeExtractor.q.yml">quintessence/Hexagon/CodeRangeExtractor.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeRenderer.q.yml">quintessence/Hexagon/CodeRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/CodeSelectionBoxRenderer.q.yml">quintessence/Hexagon/CodeSelectionBoxRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ComponentBitmapRenderCreator.q.yml">quintessence/Hexagon/ComponentBitmapRenderCreator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ComponentDependencies.q.yml">quintessence/Hexagon/ComponentDependencies.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ComponentDependencyFileParser.q.yml">quintessence/Hexagon/ComponentDependencyFileParser.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ComponentRelationsNavigator/ComponentRelations.q.yml">quintessence/Hexagon/ComponentRelationsNavigator/ComponentRelations.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader.q.yml">quintessence/Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ComponentRelationsNavigator/Stage.q.yml">quintessence/Hexagon/ComponentRelationsNavigator/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Daemus/ProgramRunner.q.yml">quintessence/Hexagon/Daemus/ProgramRunner.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/DarkModeDetector.q.yml">quintessence/Hexagon/DarkModeDetector.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/DependencyManager.q.yml">quintessence/Hexagon/DependencyManager.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/DirtyGrid.q.yml">quintessence/Hexagon/DirtyGrid.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ElementFX/WindowSpawnMotionFX.q.yml">quintessence/Hexagon/ElementFX/WindowSpawnMotionFX.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/BitmapGridMesh.q.yml">quintessence/Hexagon/Elements/BitmapGridMesh.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/BitmapGridRenderSurface.q.yml">quintessence/Hexagon/Elements/BitmapGridRenderSurface.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/CheckTextureGenerator.q.yml">quintessence/Hexagon/Elements/CheckTextureGenerator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/ColorKit.q.yml">quintessence/Hexagon/Elements/ColorKit.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/ComponentTitleSlate.q.yml">quintessence/Hexagon/Elements/ComponentTitleSlate.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/CoolGrid.q.yml">quintessence/Hexagon/Elements/CoolGrid.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/DataTable.q.yml">quintessence/Hexagon/Elements/DataTable.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/DynamicGridMesh.q.yml">quintessence/Hexagon/Elements/DynamicGridMesh.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/FilePixelPreviewCreator.q.yml">quintessence/Hexagon/Elements/FilePixelPreviewCreator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/FlashingGrid.q.yml">quintessence/Hexagon/Elements/FlashingGrid.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/FontCharacterMapGrid.q.yml">quintessence/Hexagon/Elements/FontCharacterMapGrid.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/FontedTextGrid.q.yml">quintessence/Hexagon/Elements/FontedTextGrid.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/Frame.q.yml">quintessence/Hexagon/Elements/Frame.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/ListMenu.q.yml">quintessence/Hexagon/Elements/ListMenu.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/Pill.q.yml">quintessence/Hexagon/Elements/Pill.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/QuoteRenderer.q.yml">quintessence/Hexagon/Elements/QuoteRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/SingleBlockBarGraph.q.yml">quintessence/Hexagon/Elements/SingleBlockBarGraph.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/StageInfoOverlay.q.yml">quintessence/Hexagon/Elements/StageInfoOverlay.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/SubBitmapCharacterMap.q.yml">quintessence/Hexagon/Elements/SubBitmapCharacterMap.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/TextGrid.q.yml">quintessence/Hexagon/Elements/TextGrid.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/TextMesh.q.yml">quintessence/Hexagon/Elements/TextMesh.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/TextPixelPreviewCreator.q.yml">quintessence/Hexagon/Elements/TextPixelPreviewCreator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/TexturedRectangle.q.yml">quintessence/Hexagon/Elements/TexturedRectangle.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Elements/Window.q.yml">quintessence/Hexagon/Elements/Window.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Errors.q.yml">quintessence/Hexagon/Errors.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Fancy/Stage.q.yml">quintessence/Hexagon/Fancy/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/FileNavigator/Stage.q.yml">quintessence/Hexagon/FileNavigator/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/FilesOpenedHistory.q.yml">quintessence/Hexagon/FilesOpenedHistory.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/FocusTimerBar/FocusTimerBar.q.yml">quintessence/Hexagon/FocusTimerBar/FocusTimerBar.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/FocusTimerBar/Renderer.q.yml">quintessence/Hexagon/FocusTimerBar/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Font.q.yml">quintessence/Hexagon/Font.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/FontSet.q.yml">quintessence/Hexagon/FontSet.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Forms/Fun.q.yml">quintessence/Hexagon/Forms/Fun.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/FullScreenOverlay/Stage.q.yml">quintessence/Hexagon/FullScreenOverlay/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Git/CommitStagedWithMessage.q.yml">quintessence/Hexagon/Git/CommitStagedWithMessage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Git/Modified.q.yml">quintessence/Hexagon/Git/Modified.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Git/Pusher.q.yml">quintessence/Hexagon/Git/Pusher.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Git/RemoteSyncChecker.q.yml">quintessence/Hexagon/Git/RemoteSyncChecker.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Git/StageEverything.q.yml">quintessence/Hexagon/Git/StageEverything.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Git/Staged.q.yml">quintessence/Hexagon/Git/Staged.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Git/Untracked.q.yml">quintessence/Hexagon/Git/Untracked.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/GitCommitMessageInputBox/Stage.q.yml">quintessence/Hexagon/GitCommitMessageInputBox/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Hud.q.yml">quintessence/Hexagon/Hud.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Joystick.q.yml">quintessence/Hexagon/Joystick.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/KeyboardCommandKey.q.yml">quintessence/Hexagon/KeyboardCommandKey.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Layout.q.yml">quintessence/Hexagon/Layout.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/LayoutFromYAML.q.yml">quintessence/Hexagon/LayoutFromYAML.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/LayoutPlacements.q.yml">quintessence/Hexagon/LayoutPlacements.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/LayoutToStagesCreator.q.yml">quintessence/Hexagon/LayoutToStagesCreator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Logo.q.yml">quintessence/Hexagon/Logo.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Marker.q.yml">quintessence/Hexagon/Marker.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MarkerNavigator.q.yml">quintessence/Hexagon/MarkerNavigator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MissingFile/Stage.q.yml">quintessence/Hexagon/MissingFile/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MultiplexMenu/CommandExecutor.q.yml">quintessence/Hexagon/MultiplexMenu/CommandExecutor.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MultiplexMenu/MenuItem.q.yml">quintessence/Hexagon/MultiplexMenu/MenuItem.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MultiplexMenu/MultiplexMenu.q.yml">quintessence/Hexagon/MultiplexMenu/MultiplexMenu.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MultiplexMenu/MultiplexMenuPage.q.yml">quintessence/Hexagon/MultiplexMenu/MultiplexMenuPage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MultiplexMenu/PageRenderer.q.yml">quintessence/Hexagon/MultiplexMenu/PageRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MultiplexMenu/Renderer.q.yml">quintessence/Hexagon/MultiplexMenu/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/MultiplexMenu/Stage.q.yml">quintessence/Hexagon/MultiplexMenu/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/NewComponentMaker/NewComponentMaker.q.yml">quintessence/Hexagon/NewComponentMaker/NewComponentMaker.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/NewComponentMaker/Stage.q.yml">quintessence/Hexagon/NewComponentMaker/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Notifications/Notification.q.yml">quintessence/Hexagon/Notifications/Notification.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Notifications/NotificationFactory.q.yml">quintessence/Hexagon/Notifications/NotificationFactory.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Notifications/Stage.q.yml">quintessence/Hexagon/Notifications/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ObjectivesLog/Objective.q.yml">quintessence/Hexagon/ObjectivesLog/Objective.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ObjectivesLog/ObjectiveRenderer.q.yml">quintessence/Hexagon/ObjectivesLog/ObjectiveRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ObjectivesLog/ObjectivesLog.q.yml">quintessence/Hexagon/ObjectivesLog/ObjectivesLog.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ObjectivesLog/Stage.q.yml">quintessence/Hexagon/ObjectivesLog/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/OneLineInputBox/Renderer.q.yml">quintessence/Hexagon/OneLineInputBox/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/OneLineInputBox/Stage.q.yml">quintessence/Hexagon/OneLineInputBox/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Packet.q.yml">quintessence/Hexagon/Packet.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/PacketLogger.q.yml">quintessence/Hexagon/PacketLogger.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/PacketRenderer.q.yml">quintessence/Hexagon/PacketRenderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/PasteboardData.q.yml">quintessence/Hexagon/PasteboardData.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Powerbar/Powerbar.q.yml">quintessence/Hexagon/Powerbar/Powerbar.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Powerbar/Renderer.q.yml">quintessence/Hexagon/Powerbar/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Project.q.yml">quintessence/Hexagon/Project.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectComponentNavigator/ComponentSearcher.q.yml">quintessence/Hexagon/ProjectComponentNavigator/ComponentSearcher.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectComponentNavigator/EventController.q.yml">quintessence/Hexagon/ProjectComponentNavigator/EventController.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.q.yml">quintessence/Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectComponentNavigator/Renderer.q.yml">quintessence/Hexagon/ProjectComponentNavigator/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectComponentNavigator/SearchBar.q.yml">quintessence/Hexagon/ProjectComponentNavigator/SearchBar.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectComponentNavigator/Stage.q.yml">quintessence/Hexagon/ProjectComponentNavigator/Stage.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectFactory.q.yml">quintessence/Hexagon/ProjectFactory.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectFromYAML.q.yml">quintessence/Hexagon/ProjectFromYAML.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/ProjectNavigator.q.yml">quintessence/Hexagon/ProjectNavigator.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Rails/ComponentLister.q.yml">quintessence/Hexagon/Rails/ComponentLister.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/RailsMinitestTestResultToCodeMessagePointConverter.q.yml">quintessence/Hexagon/RailsMinitestTestResultToCodeMessagePointConverter.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/RailsTestOutputParser.q.yml">quintessence/Hexagon/RailsTestOutputParser.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/RegexStore.q.yml">quintessence/Hexagon/RegexStore.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/RendererInterface.q.yml">quintessence/Hexagon/RendererInterface.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/RulersAndMeasurements/CodeEditorDimentions.q.yml">quintessence/Hexagon/RulersAndMeasurements/CodeEditorDimentions.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Search/ComponentElasticsearchIndex.q.yml">quintessence/Hexagon/Search/ComponentElasticsearchIndex.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Search/ComponentElasticsearchIndexer.q.yml">quintessence/Hexagon/Search/ComponentElasticsearchIndexer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Search/Elasticsearch/HealthChecker.q.yml">quintessence/Hexagon/Search/Elasticsearch/HealthChecker.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/Base.q.yml">quintessence/Hexagon/Shaders/Base.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/FlatColor.q.yml">quintessence/Hexagon/Shaders/FlatColor.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/Fun.q.yml">quintessence/Hexagon/Shaders/Fun.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/Smiley.q.yml">quintessence/Hexagon/Shaders/Smiley.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/TexturedTruchet.q.yml">quintessence/Hexagon/Shaders/TexturedTruchet.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/TiledHexagonMotionEffect.q.yml">quintessence/Hexagon/Shaders/TiledHexagonMotionEffect.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/TruchetMaze.q.yml">quintessence/Hexagon/Shaders/TruchetMaze.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/TruchetVine.q.yml">quintessence/Hexagon/Shaders/TruchetVine.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shaders/TruchetVineSquiggle.q.yml">quintessence/Hexagon/Shaders/TruchetVineSquiggle.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shapes/Hexagon/Fill.q.yml">quintessence/Hexagon/Shapes/Hexagon/Fill.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shapes/Hexagon/Renderer.q.yml">quintessence/Hexagon/Shapes/Hexagon/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Shapes/Hexagon/Stroke.q.yml">quintessence/Hexagon/Shapes/Hexagon/Stroke.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/StageCollectionHelper.q.yml">quintessence/Hexagon/StageCollectionHelper.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/StageFactory.q.yml">quintessence/Hexagon/StageFactory.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/SymlinkToucher.q.yml">quintessence/Hexagon/SymlinkToucher.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar.q.yml">quintessence/Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar.q.yml">quintessence/Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/CreateCodeEditorStageFromFilename.q.yml">quintessence/Hexagon/System/Action/CreateCodeEditorStageFromFilename.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/CreateThreeSplitFromComponent.q.yml">quintessence/Hexagon/System/Action/CreateThreeSplitFromComponent.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/CreateTwoSplitFromComponent.q.yml">quintessence/Hexagon/System/Action/CreateTwoSplitFromComponent.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/DestroyAllCodeEditorStages.q.yml">quintessence/Hexagon/System/Action/DestroyAllCodeEditorStages.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/OpenDocumentationInBrowser.q.yml">quintessence/Hexagon/System/Action/OpenDocumentationInBrowser.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Action/SendMessageToDaemusToBuild.q.yml">quintessence/Hexagon/System/Action/SendMessageToDaemusToBuild.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Config.q.yml">quintessence/Hexagon/System/Config.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/EventController.q.yml">quintessence/Hexagon/System/EventController.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/System/Renderer.q.yml">quintessence/Hexagon/System/Renderer.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Testing/ClangBuildOutputParser.q.yml">quintessence/Hexagon/Testing/ClangBuildOutputParser.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Testing/ClangBuildOutputResult.q.yml">quintessence/Hexagon/Testing/ClangBuildOutputResult.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Testing/ComponentTestRunner.q.yml">quintessence/Hexagon/Testing/ComponentTestRunner.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Testing/GoogleTestRunOutputParser.q.yml">quintessence/Hexagon/Testing/GoogleTestRunOutputParser.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/Testing/GoogleTestRunTestResult.q.yml">quintessence/Hexagon/Testing/GoogleTestRunTestResult.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/TitleScreen.q.yml">quintessence/Hexagon/TitleScreen.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/UI/DrawingBox.q.yml">quintessence/Hexagon/UI/DrawingBox.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/UI/LittleMenu.q.yml">quintessence/Hexagon/UI/LittleMenu.q.yml</a></li>
  <li><a href="#quintessence/Hexagon/WordRangesFinder.q.yml">quintessence/Hexagon/WordRangesFinder.q.yml</a></li>
  <li><a href="#quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml">quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml</a></li>
  <li><a href="#quintessence/NcursesArt/ProjectComponentBasenameExtractor.q.yml">quintessence/NcursesArt/ProjectComponentBasenameExtractor.q.yml</a></li>
  <li><a href="#quintessence/NcursesArt/ProjectFilenameGenerator.q.yml">quintessence/NcursesArt/ProjectFilenameGenerator.q.yml</a></li>
  <li><a href="#quintessence/Testing/WithAllegroRenderingFixture.q.yml">quintessence/Testing/WithAllegroRenderingFixture.q.yml</a></li>
  <li><a href="#quintessence/Testing/WithStageFactoryFixture.q.yml">quintessence/Testing/WithStageFactoryFixture.q.yml</a></li>
  <li><a href="#quintessence/TimestampGenerator.q.yml">quintessence/TimestampGenerator.q.yml</a></li>
  <li><a href="#quintessence/TreeBuilder.q.yml">quintessence/TreeBuilder.q.yml</a></li>
  <li><a href="#tests/fixtures/FixtureProject/quintessence/FixtureObjectThing.q.yml">tests/fixtures/FixtureProject/quintessence/FixtureObjectThing.q.yml</a></li>
</ul>
<h1>Components</h1>
<ul>
  <div class="component">
    <h3 id="quintessence/ApplicationController.q.yml">quintessence/ApplicationController.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">hexagon_config</td>
  <td class="property">Hexagon::System::Config</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">event_queue</td>
  <td class="property">ALLEGRO_EVENT_QUEUE*</td>
</tr>
<tr>
  <td class="property">primary_timer</td>
  <td class="property">ALLEGRO_TIMER*</td>
</tr>
<tr>
  <td class="property">regular_refresh_timer</td>
  <td class="property">ALLEGRO_TIMER*</td>
</tr>
<tr>
  <td class="property">system</td>
  <td class="property">Hexagon::System::System*</td>
</tr>
<tr>
  <td class="property">user_event_source</td>
  <td class="property">ALLEGRO_EVENT_SOURCE</td>
</tr>
<tr>
  <td class="property">shutdown_program</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">shutdown()</td>
</tr>
<tr>
  <td class="method">create_event_queue_and_register_event_sources()</td>
</tr>
<tr>
  <td class="method">create_display()</td>
</tr>
<tr>
  <td class="method">setup_orthographic_projection()</td>
</tr>
<tr>
  <td class="method">emit_user_event(ALLEGRO_EVENT user_event={})</td>
</tr>
<tr>
  <td class="method">run_program()</td>
</tr>
<tr>
  <td class="method">run_event_loop()</td>
</tr>
<tr>
  <td class="method">verify_presence_of_temp_files_and_assign_to_global_constants()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::TitleScreen&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/TitleScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_allegro_version&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Motion&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/motion.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::TiledHexagonMotionEffect&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/TiledHexagonMotionEffect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_SOURCE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_font_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_image_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;global&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/shared_globals.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT_QUEUE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_TIMER&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Blast/String/Trimmer.q.yml">quintessence/Blast/String/Trimmer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">trim()</td>
</tr>
<tr>
  <td class="private_method">ltrim(std::string s=&quot;&quot;)</td>
</tr>
<tr>
  <td class="private_method">rtrim(std::string s=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find_if&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ASTTraverser.q.yml">quintessence/Hexagon/ASTTraverser.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">json_ast_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">json</td>
  <td class="property">nlohmann::json</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_json_ast_filename()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ifstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.q.yml">quintessence/Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">cursor</td>
  <td class="property">Hexagon::AdvancedCodeEditor::Cursor</td>
</tr>
<tr>
  <td class="property">dirty_grid</td>
  <td class="property">Hexagon::DirtyGrid</td>
</tr>
<tr>
  <td class="property">SPLIT_LINE_DELIMITER_CHAR</td>
  <td class="property">char</td>
</tr>
<tr>
  <td class="property">content_is_modified</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_select_lines(std::vector&lt;int&gt; line_indices={})</td>
</tr>
<tr>
  <td class="private_method">mark_content_is_modified()</td>
</tr>
<tr>
  <td class="method">unmark_content_is_modified()</td>
</tr>
<tr>
  <td class="method">get_num_lines()</td>
</tr>
<tr>
  <td class="method">set_content(std::string content=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">insert_string(std::string string=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">delete_character()</td>
</tr>
<tr>
  <td class="method">delete_to_end_of_line()</td>
</tr>
<tr>
  <td class="method">join_lines()</td>
</tr>
<tr>
  <td class="method">split_lines()</td>
</tr>
<tr>
  <td class="method">delete_line()</td>
</tr>
<tr>
  <td class="method">insert_lines(std::vector&lt;std::string&gt; lines_to_insert={})</td>
</tr>
<tr>
  <td class="method">cursor_set_width(float width=0.0f)</td>
</tr>
<tr>
  <td class="method">cursor_set_height(float height=0.0f)</td>
</tr>
<tr>
  <td class="method">cursor_move_up()</td>
</tr>
<tr>
  <td class="method">cursor_move_down()</td>
</tr>
<tr>
  <td class="method">cursor_move_left()</td>
</tr>
<tr>
  <td class="method">cursor_move_right()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_start_of_line()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_start_of_file()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_end_of_line()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_first_non_whitespace_character()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_next_word()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_next_word_or_last_char()</td>
</tr>
<tr>
  <td class="method">delete_to_next_word()</td>
</tr>
<tr>
  <td class="method">delete_to_next_word_or_end_of_line()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_previous_word()</td>
</tr>
<tr>
  <td class="method">cursor_move_to(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">cursor_set_x(int x=0)</td>
</tr>
<tr>
  <td class="method">cursor_set_y(int y=0)</td>
</tr>
<tr>
  <td class="method">cursor_get_x()</td>
</tr>
<tr>
  <td class="method">cursor_get_y()</td>
</tr>
<tr>
  <td class="method">is_cursor_in_bounds()</td>
</tr>
<tr>
  <td class="private_method">is_cursor_in_vertical_bounds()</td>
</tr>
<tr>
  <td class="private_method">is_cursor_at_or_past_left_edge()</td>
</tr>
<tr>
  <td class="private_method">is_cursor_at_or_past_top_edge()</td>
</tr>
<tr>
  <td class="private_method">is_cursor_at_or_past_bottom_edge()</td>
</tr>
<tr>
  <td class="private_method">is_cursor_on_last_line()</td>
</tr>
<tr>
  <td class="method">dirty_grid_clear()</td>
</tr>
<tr>
  <td class="method">get_dirty_cells()</td>
</tr>
<tr>
  <td class="method">any_dirty_cells()</td>
</tr>
<tr>
  <td class="private_method">dirty_cell_count()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::DirtyGrid&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/DirtyGrid.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::reverse&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::begin&quot;, &quot;headers&quot;=&gt;[&quot;array&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::end&quot;, &quot;headers&quot;=&gt;[&quot;array&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/Cursor.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Cursor.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">move_up()</td>
</tr>
<tr>
  <td class="method">move_down()</td>
</tr>
<tr>
  <td class="method">move_left()</td>
</tr>
<tr>
  <td class="method">move_right()</td>
</tr>
<tr>
  <td class="method">move_to(int x=0, int y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/EventController.q.yml">quintessence/Hexagon/AdvancedCodeEditor/EventController.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stage</td>
  <td class="property">Hexagon::AdvancedCodeEditor::Stage*</td>
</tr>
<tr>
  <td class="property">events_dictionary</td>
  <td class="property">std::map&lt;std::string, std::function&lt;void(Hexagon::AdvancedCodeEditor::Stage&amp;)&gt;&gt;</td>
</tr>
<tr>
  <td class="property">keyboard_command_mapping</td>
  <td class="property">AllegroFlare::KeyboardCommandMapper</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::KeyboardCommandMapper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/KeyboardCommandMapper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;void(Hexagon::AdvancedCodeEditor::Stage&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;, &quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/Renderer.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text_mesh</td>
  <td class="property">Hexagon::Elements::TextMesh*</td>
</tr>
<tr>
  <td class="property">surface_render</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">cursor</td>
  <td class="property">Hexagon::AdvancedCodeEditor::Cursor*</td>
</tr>
<tr>
  <td class="property">selections</td>
  <td class="property">std::vector&lt;Hexagon::AdvancedCodeEditor::Selection&gt;*</td>
</tr>
<tr>
  <td class="property">search_regex_selections</td>
  <td class="property">Hexagon::AdvancedCodeEditor::Selection*</td>
</tr>
<tr>
  <td class="property">visual_selections</td>
  <td class="property">std::vector&lt;CodeRange&gt;*</td>
</tr>
<tr>
  <td class="property">full_line_visual_selections</td>
  <td class="property">std::vector&lt;CodeRange&gt;*</td>
</tr>
<tr>
  <td class="property">code_message_points</td>
  <td class="property">std::vector&lt;CodeMessagePoint&gt;*</td>
</tr>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_is_bar</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">text_mesh_y_offset</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">first_row_offset</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">show_line_numbers</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">content_is_modified</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">represents_symlink</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">cursor_is_in_valid_range</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">line_numbers_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">show_backfill</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">null_space_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_backfill()</td>
</tr>
<tr>
  <td class="method">draw_represents_symlink_frames()</td>
</tr>
<tr>
  <td class="method">draw_null_space_above_and_below()</td>
</tr>
<tr>
  <td class="method">render_line_numbers()</td>
</tr>
<tr>
  <td class="method">render_extended_symbol_highlight_under_cursor()</td>
</tr>
<tr>
  <td class="method">render_word_highlight_under_cursor()</td>
</tr>
<tr>
  <td class="method">render_cursor()</td>
</tr>
<tr>
  <td class="method">draw_selections()</td>
</tr>
<tr>
  <td class="method">draw_visual_selections()</td>
</tr>
<tr>
  <td class="method">draw_full_line_visual_selections()</td>
</tr>
<tr>
  <td class="method">draw_search_regex_selections()</td>
</tr>
<tr>
  <td class="method">draw_code_message_points()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::WordRangesFinder&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/WordRangesFinder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;CodeRange&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::TextMesh*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/TextMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::AdvancedCodeEditor::Selection&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/AdvancedCodeEditor/Selection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Selection*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Selection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::FontedTextGrid*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/FontedTextGrid.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::WindowRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/WindowRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Cursor*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeSelectionBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeSelectionBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeMessagePointsOverlay&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeMessagePointsOverlay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;CodeMessagePoint&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeMessagePoint&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Selection&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Selection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::TextMesh&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/TextMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::SymbolUnderCursorMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/SymbolUnderCursorMatcher.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter.q.yml">quintessence/Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">search_regex_string</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">convert()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;CodeRange&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Blast/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/Selection.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Selection.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">code_ranges</td>
  <td class="property">std::vector&lt;CodeRange&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_empty()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">add(CodeRange code_range={})</td>
</tr>
<tr>
  <td class="method">clear_select_lines(std::vector&lt;int&gt; line_indices={})</td>
</tr>
<tr>
  <td class="method">push_down_from(int starting_on_line=0, int num_lines_to_push_down=0)</td>
</tr>
<tr>
  <td class="method">pull_up_from(int starting_on_line=0, int num_lines_to_pull_up=0)</td>
</tr>
<tr>
  <td class="method">find_next_from(int position_x=0, int position_y=0)</td>
</tr>
<tr>
  <td class="method">find_previous_from(int position_x=0, int position_y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;CodeRange&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodePoint&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodePoint.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::unique&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/Stage.q.yml">quintessence/Hexagon/AdvancedCodeEditor/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_mesh</td>
  <td class="property">Hexagon::Elements::TextMesh</td>
</tr>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">represents_symlink</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">advanced_code_editor</td>
  <td class="property">Hexagon::AdvancedCodeEditor::AdvancedCodeEditor</td>
</tr>
<tr>
  <td class="property">input_buffer</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">mode</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">offset_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">offset_y_updated_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">first_row_offset</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_render</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">current_search_regex</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">code_message_point_manager</td>
  <td class="property">Hexagon::CodeMessagePointManager</td>
</tr>
<tr>
  <td class="property">visual_selections</td>
  <td class="property">std::vector&lt;CodeRange&gt;</td>
</tr>
<tr>
  <td class="property">currently_grabbing_visual_selection</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">full_line_visual_selections</td>
  <td class="property">std::vector&lt;CodeRange&gt;</td>
</tr>
<tr>
  <td class="property">currently_grabbing_full_line_visual_selection</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">selections</td>
  <td class="property">std::vector&lt;Hexagon::AdvancedCodeEditor::Selection&gt;</td>
</tr>
<tr>
  <td class="property">search_regex_selections</td>
  <td class="property">Hexagon::AdvancedCodeEditor::Selection</td>
</tr>
<tr>
  <td class="property">action_queue_recording</td>
  <td class="property">ActionQueueRecording</td>
</tr>
<tr>
  <td class="property">currently_playing_action_queue_recording</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">syntax_highlight_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">on_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">comment_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">clear_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">show_line_too_long</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">max_line_length</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">null_space_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">MODE_EDIT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">MODE_INSERT</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">ACTION_SET_TO_EDIT_MODE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">ACTION_SET_TO_INSERT_MODE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="private_method">initialize_surface_render()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
<tr>
  <td class="method">refresh_search_regex_selections()</td>
</tr>
<tr>
  <td class="method">refresh_search_regex_selections_on_select_lines(std::vector&lt;int&gt; line_nums={})</td>
</tr>
<tr>
  <td class="method">set_code_message_points(std::vector&lt;CodeMessagePoint&gt; code_message_points={})</td>
</tr>
<tr>
  <td class="method">save_file()</td>
</tr>
<tr>
  <td class="method">save_file_and_touch_if_symlink()</td>
</tr>
<tr>
  <td class="method">set_to_edit_mode()</td>
</tr>
<tr>
  <td class="method">set_to_insert_mode()</td>
</tr>
<tr>
  <td class="method">cursor_move_up()</td>
</tr>
<tr>
  <td class="method">cursor_move_down()</td>
</tr>
<tr>
  <td class="method">cursor_move_left()</td>
</tr>
<tr>
  <td class="method">cursor_move_right()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_start_of_line()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_start_of_file()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_first_non_whitespace_character()</td>
</tr>
<tr>
  <td class="method">cursor_move_to_end_of_line()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_next_word()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_next_word_or_last_char()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_previous_word()</td>
</tr>
<tr>
  <td class="method">cursor_jump_up_half_page()</td>
</tr>
<tr>
  <td class="method">append_action_to_action_queue_recording(std::string action_name=&quot;[unset-action_name]&quot;, ActionData action_data1={})</td>
</tr>
<tr>
  <td class="method">clear_action_queue_recording()</td>
</tr>
<tr>
  <td class="method">cursor_jump_down_half_page()</td>
</tr>
<tr>
  <td class="method">first_row_offset_move_up()</td>
</tr>
<tr>
  <td class="method">first_row_offset_move_down()</td>
</tr>
<tr>
  <td class="method">first_row_offset_jump_to(int new_offset=0)</td>
</tr>
<tr>
  <td class="method">first_row_offset_jump_up_half_page()</td>
</tr>
<tr>
  <td class="method">first_row_offset_jump_down_half_page()</td>
</tr>
<tr>
  <td class="method">first_row_offset_adjust_so_cursor_is_vertically_centered()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_next_code_message_point()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_previous_code_message_point()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_next_search_regex_selection()</td>
</tr>
<tr>
  <td class="method">cursor_jump_to_previous_search_regex_selection()</td>
</tr>
<tr>
  <td class="method">delete_character()</td>
</tr>
<tr>
  <td class="private_method">refresh_search_regex_selections_on_current_line()</td>
</tr>
<tr>
  <td class="method">grab_word_under_cursor()</td>
</tr>
<tr>
  <td class="method">delete_word_under_cursor()</td>
</tr>
<tr>
  <td class="method">delete_to_end_of_line()</td>
</tr>
<tr>
  <td class="method">delete_to_next_word()</td>
</tr>
<tr>
  <td class="method">delete_to_next_word_or_end_of_line()</td>
</tr>
<tr>
  <td class="method">join_lines()</td>
</tr>
<tr>
  <td class="method">split_lines()</td>
</tr>
<tr>
  <td class="method">delete_line()</td>
</tr>
<tr>
  <td class="method">insert_string_from_input_buffer()</td>
</tr>
<tr>
  <td class="method">insert_lines(std::vector&lt;std::string&gt; lines_to_insert={})</td>
</tr>
<tr>
  <td class="method">set_content(std::string content=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">toggle_commenting_out_current_line()</td>
</tr>
<tr>
  <td class="method">insert_three_spaces_at_start_of_line()</td>
</tr>
<tr>
  <td class="method">insert_blank_line()</td>
</tr>
<tr>
  <td class="method">create_visual_selection_at_current_cursor_location()</td>
</tr>
<tr>
  <td class="method">destroy_current_visual_selection()</td>
</tr>
<tr>
  <td class="method">toggle_currently_grabbing_visual_selection()</td>
</tr>
<tr>
  <td class="method">create_full_line_visual_selection_at_current_cursor_location()</td>
</tr>
<tr>
  <td class="method">destroy_current_full_line_visual_selection()</td>
</tr>
<tr>
  <td class="method">toggle_currently_grabbing_full_line_visual_selection()</td>
</tr>
<tr>
  <td class="method">set_current_visual_selection_end_x(int x_pos=0)</td>
</tr>
<tr>
  <td class="method">set_current_visual_selection_end_y(int y_pos=0)</td>
</tr>
<tr>
  <td class="method">refresh_current_visual_selection_end_to_current_cursor_position()</td>
</tr>
<tr>
  <td class="method">replay_action_queue_recording()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_to_clipboard()</td>
</tr>
<tr>
  <td class="method">paste_selected_text_from_clipboard()</td>
</tr>
<tr>
  <td class="method">replace_content_with_contents_of_clipboard()</td>
</tr>
<tr>
  <td class="method">build_local_events_dictionary()</td>
</tr>
<tr>
  <td class="method">build_keyboard_command_mapping_for_edit_mode()</td>
</tr>
<tr>
  <td class="method">build_keyboard_command_mapping_for_insert_mode()</td>
</tr>
<tr>
  <td class="method">cursor_move_to(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="private_method">obtain_text_font()</td>
</tr>
<tr>
  <td class="method">get_lines()</td>
</tr>
<tr>
  <td class="method">get_cursor()</td>
</tr>
<tr>
  <td class="private_method">cursor_get_x()</td>
</tr>
<tr>
  <td class="private_method">cursor_get_y()</td>
</tr>
<tr>
  <td class="method">is_in_edit_mode()</td>
</tr>
<tr>
  <td class="method">is_in_insert_mode()</td>
</tr>
<tr>
  <td class="method">calculate_natural_width()</td>
</tr>
<tr>
  <td class="method">calculate_half_num_rows()</td>
</tr>
<tr>
  <td class="method">calculate_one_third_num_rows()</td>
</tr>
<tr>
  <td class="method">calculate_natural_height()</td>
</tr>
<tr>
  <td class="method">refresh_render_surfaces()</td>
</tr>
<tr>
  <td class="private_method">refresh_dirty_cells_on_surface_render_respecting_first_row_offset()</td>
</tr>
<tr>
  <td class="private_method">refresh_dirty_cells_on_text_mesh()</td>
</tr>
<tr>
  <td class="private_method">refresh_text_mesh_respecting_first_row_offset()</td>
</tr>
<tr>
  <td class="private_method">filter_text_mesh_for_syntax_highlights()</td>
</tr>
<tr>
  <td class="private_method">filter_text_mesh_for_comments()</td>
</tr>
<tr>
  <td class="private_method">filter_text_mesh_for_test_case()</td>
</tr>
<tr>
  <td class="private_method">filter_text_mesh_for_line_too_long()</td>
</tr>
<tr>
  <td class="private_method">refresh_text_mesh()</td>
</tr>
<tr>
  <td class="method">build_dirty_grid_from_lines_respecting_offset()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::WordRangesFinder&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/WordRangesFinder.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeRangeExtractor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRangeExtractor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ClipboardData::store&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ClipboardData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ClipboardData::retrieve&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ClipboardData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;CodeRange&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::SymlinkToucher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/SymlinkToucher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::AdvancedCodeEditor::Selection&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/AdvancedCodeEditor/Selection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::SearchRegexToSelectionsConverter&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Selection&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Selection.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;void(Hexagon::AdvancedCodeEditor::Stage&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;, &quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Timer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Timer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::DirtyGrid&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/DirtyGrid.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::AdvancedCodeEditor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::KeyboardCommandMapper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/KeyboardCommandMapper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::TextMesh&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/TextMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:save_file&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/util.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeMessagePointManager&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeMessagePointManager.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;CodeMessagePoint&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeMessagePoint&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionQueueRecording&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionQueueRecording.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/SymbolUnderCursorMatcher.q.yml">quintessence/Hexagon/AdvancedCodeEditor/SymbolUnderCursorMatcher.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">NO_MATCH_FOUND</td>
  <td class="property">std::pair&lt;int, int&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_valid_symbol_char(char c=0)</td>
</tr>
<tr>
  <td class="method">is_valid_match(std::pair&lt;int, int&gt; match_result=NO_MATCH_FOUND)</td>
</tr>
<tr>
  <td class="method">find_symbol_range(std::string line_of_code=&quot;[unset-line_of_code]&quot;, int cursor_position=-1)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedCodeEditor/WindowRenderer.q.yml">quintessence/Hexagon/AdvancedCodeEditor/WindowRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Window&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Window.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ElementFX::WindowSpawnMotionFX&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ElementFX/WindowSpawnMotionFX.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_position_static</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">nodes</td>
  <td class="property">std::vector&lt;Blast::Project::Component&gt;</td>
</tr>
<tr>
  <td class="property">mode</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">search_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_mode_navigating_list()</td>
</tr>
<tr>
  <td class="method">is_mode_typing_in_search_bar()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_to_top()</td>
</tr>
<tr>
  <td class="method">current_selection_is_valid()</td>
</tr>
<tr>
  <td class="method">set_mode_to_navigating_list()</td>
</tr>
<tr>
  <td class="method">set_mode_to_typing_in_search_bar()</td>
</tr>
<tr>
  <td class="method">get_current_selection_label_or_empty_string()</td>
</tr>
<tr>
  <td class="method">refresh_list()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_label()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_as_component_name()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_as_include_directive()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_as_quintessence_dependency_lines()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_as_public_parent_class_lines()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_as_injected_dependency_property()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_as_error_message_template()</td>
</tr>
<tr>
  <td class="method">yank_selected_text_as_static_casted_as()</td>
</tr>
<tr>
  <td class="method">convert_to_snake_case(std::string source_str=&quot;[unset-str]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::str_replace&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::ComponentSearcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/ComponentSearcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Project::Component&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ClipboardData::store&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ClipboardData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;isupper&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;islower&quot;, &quot;headers&quot;=&gt;[&quot;cctype&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedComponentNavigator/ComponentSearcher.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/ComponentSearcher.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_root_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">search_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">convert_to_names(std::vector&lt;Blast::Project::Component&gt; components={})</td>
</tr>
<tr>
  <td class="method">convert_to_components(std::vector&lt;std::string&gt; names={})</td>
</tr>
<tr>
  <td class="method">component_names()</td>
</tr>
<tr>
  <td class="method">components_sorted_by_most_recent()</td>
</tr>
<tr>
  <td class="method">filter_names_through_search_text(std::vector&lt;std::string&gt; elements={})</td>
</tr>
<tr>
  <td class="method">components()</td>
</tr>
<tr>
  <td class="method">tokenize_search_texts()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::SimpleTextSearcher&quot;, &quot;headers&quot;=&gt;[&quot;Blast/SimpleTextSearcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Project::Component&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedComponentNavigator/EventController.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/EventController.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator*</td>
</tr>
<tr>
  <td class="property">event_dictionary</td>
  <td class="property">std::map&lt;std::string, std::function&lt;void(Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator&amp;)&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;void(AdvancedComponentNavigator&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;, &quot;Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedComponentNavigator/Renderer.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stage</td>
  <td class="property">Hexagon::AdvancedComponentNavigator::Stage*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">input_hints_tokens</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">frame_color_bluegreen</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">note()</td>
</tr>
<tr>
  <td class="private_method">build_backfill_color()</td>
</tr>
<tr>
  <td class="private_method">draw_search_text_box()</td>
</tr>
<tr>
  <td class="method">draw_input_hints()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_raw()</td>
</tr>
<tr>
  <td class="method">obtain_title_text_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::mix&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_circle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;FileSystemNode&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileSystemNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Stroke&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Stroke.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedComponentNavigator/SearchBar.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/SearchBar.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/AdvancedComponentNavigator/Stage.q.yml">quintessence/Hexagon/AdvancedComponentNavigator/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component</td>
  <td class="property">Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">base_backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">represents_symlink</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">MOVE_CURSOR_UP</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">MOVE_CURSOR_DOWN</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_LABEL</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_AS_COMPONENT_NAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_AS_INCLUDE_DIRECTIVE</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_AS_ERROR_MESSAGE_TEMPLATE</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_AS_QUINTESSENCE_DEPENDENCY_LINES</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_AS_PUBLIC_PARENT_CLASS_LINES</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_AS_INJECTED_DEPENDENCY_PROPERTY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">YANK_SELECTED_TEXT_AS_STATIC_CASTED_AS</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_keyboard_command_mapping()</td>
</tr>
<tr>
  <td class="method">build_local_events_dictionary()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_char_event(int keycode=0, int unichar=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">save_file()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;void(AdvancedComponentNavigator&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;, &quot;Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::mix&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cerr&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_circle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Project::Component&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;FileSystemNode&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileSystemNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::KeyboardCommandMapper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/KeyboardCommandMapper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::ComponentSearcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/ComponentSearcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Stroke&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Stroke.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BlastComponentLayoutGenerator.q.yml">quintessence/Hexagon/BlastComponentLayoutGenerator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">code_editor_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">code_editor_height</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate()</td>
</tr>
<tr>
  <td class="method">component_generate_header_filename()</td>
</tr>
<tr>
  <td class="method">component_generate_source_filename()</td>
</tr>
<tr>
  <td class="method">component_generate_test_filename()</td>
</tr>
<tr>
  <td class="method">component_generate_quintessence_filename()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::Layout&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Layout&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFilenameGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFilenameGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BlastProjectLayoutsGenerator.q.yml">quintessence/Hexagon/BlastProjectLayoutsGenerator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">code_editor_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">code_editor_height</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate()</td>
</tr>
<tr>
  <td class="private_method">build_appropriate_layout_for_component(std::string component_name=&quot;UnnamedComponent&quot;)</td>
</tr>
<tr>
  <td class="method">component_generate_header_filename(std::string component_name=&quot;UnnamedComponent&quot;)</td>
</tr>
<tr>
  <td class="method">component_generate_source_filename(std::string component_name=&quot;UnnamedComponent&quot;)</td>
</tr>
<tr>
  <td class="method">component_generate_test_filename(std::string component_name=&quot;UnnamedComponent&quot;)</td>
</tr>
<tr>
  <td class="method">component_generate_quintessence_filename(std::string component_name=&quot;UnnamedComponent&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::Layout&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Layout&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFilenameGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFilenameGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFileTypes&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFileTypes.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSequenceMeter/Renderer.q.yml">quintessence/Hexagon/BuildSequenceMeter/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">status</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string, std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">meter_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">meter_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">draw_frame</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">draw_build_dump_report_legacy(float width=0, std::string stage_text_dump=&quot;[unset-stage_text_dump]&quot;)</td>
</tr>
<tr>
  <td class="method">draw_build_dump_report_for_google_test_run(float width=0, std::string stage_text_dump=&quot;[unset-stage_text_dump]&quot;)</td>
</tr>
<tr>
  <td class="method">draw_build_dump_report(float width=0, std::string stage_text_dump=&quot;[unset-stage_text_dump]&quot;, std::string stage_name=&quot;[unset-stage_name]&quot;)</td>
</tr>
<tr>
  <td class="method">draw_status_box(float x=0, float y=0, float w=1, float h=1, std::string status=&quot;incomplete&quot;, std::string label=&quot;-  -&quot;)</td>
</tr>
<tr>
  <td class="method">is_status_to_draw_label(std::string status=&quot;status_unset&quot;)</td>
</tr>
<tr>
  <td class="method">build_color_from_status(std::string status=&quot;status_unset&quot;)</td>
</tr>
<tr>
  <td class="method">obtain_dump_font()</td>
</tr>
<tr>
  <td class="method">obtain_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_ttf_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, ALLEGRO_COLOR&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::find&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ColorKit&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ColorKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Testing::ClangBuildOutputParser&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Testing/ClangBuildOutputParser.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::count&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Testing::GoogleTestRunOutputParser&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Testing/GoogleTestRunOutputParser.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/BuildFactory.q.yml">quintessence/Hexagon/BuildSystem/BuildFactory.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">build_stage_factory</td>
  <td class="property">Hexagon::BuildSystem::BuildStageFactory</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create_placeholder_build()</td>
</tr>
<tr>
  <td class="method">create_shell_command_build(std::string shell_command=&quot;echo \&quot;Having a good day?\&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::Builds::Base*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStageFactory&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::Builds::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/BuildStageFactory.q.yml">quintessence/Hexagon/BuildSystem/BuildStageFactory.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create_shell_command_build_stage(std::string shell_command=&quot;echo \&quot;Hi friend\&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::ShellCommand*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/ShellCommand.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::ShellCommand&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/ShellCommand.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/BuildStageRenderer.q.yml">quintessence/Hexagon/BuildSystem/BuildStageRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">build_stage</td>
  <td class="property">Hexagon::BuildSystem::BuildStages::Base*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_text_report()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStageRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStageRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStageRenderers::ShellCommand&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStageRenderers/ShellCommand.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Errors&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Errors.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/BuildStageRenderers/Base.q.yml">quintessence/Hexagon/BuildSystem/BuildStageRenderers/Base.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">render_text()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/BuildStageRenderers/ShellCommand.q.yml">quintessence/Hexagon/BuildSystem/BuildStageRenderers/ShellCommand.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">shell_command_build_stage</td>
  <td class="property">Hexagon::BuildSystem::BuildStages::ShellCommand*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render_text()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStageRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStageRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::ShellCommand*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/ShellCommand.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::ShellCommand&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/ShellCommand.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/BuildStages/Base.q.yml">quintessence/Hexagon/BuildSystem/BuildStages/Base.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">std::chrono::system_clock::time_point</td>
</tr>
<tr>
  <td class="property">mutex_for_started_at</td>
  <td class="property">std::mutex</td>
</tr>
<tr>
  <td class="property">ended_at</td>
  <td class="property">std::chrono::system_clock::time_point</td>
</tr>
<tr>
  <td class="property">mutex_for_ended_at</td>
  <td class="property">std::mutex</td>
</tr>
<tr>
  <td class="property">status</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">mutex_for_status</td>
  <td class="property">std::mutex</td>
</tr>
<tr>
  <td class="property">STATUS_WAITING_TO_START</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_RUNNING</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_SUCCEEDED</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_ERROR</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_FAILED</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_status()</td>
</tr>
<tr>
  <td class="method">set_status(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
<tr>
  <td class="method">get_started_at()</td>
</tr>
<tr>
  <td class="method">set_started_at(std::chrono::system_clock::time_point started_at=)</td>
</tr>
<tr>
  <td class="method">get_ended_at()</td>
</tr>
<tr>
  <td class="method">set_ended_at(std::chrono::system_clock::time_point ended_at=)</td>
</tr>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">execute()</td>
</tr>
<tr>
  <td class="method">calc_duration_seconds()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::system_clock::time_point&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::mutex&quot;, &quot;headers&quot;=&gt;[&quot;mutex&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/BuildStages/ShellCommand.q.yml">quintessence/Hexagon/BuildSystem/BuildStages/ShellCommand.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">shell_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">shell_command_result</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">executed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/Builds/Base.q.yml">quintessence/Hexagon/BuildSystem/Builds/Base.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">build_stages</td>
  <td class="property">std::vector&lt;Hexagon::BuildSystem::BuildStages::Base*&gt;</td>
</tr>
<tr>
  <td class="property">started_at</td>
  <td class="property">std::chrono::system_clock::time_point</td>
</tr>
<tr>
  <td class="property">ended_at</td>
  <td class="property">std::chrono::system_clock::time_point</td>
</tr>
<tr>
  <td class="property">status</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">STATUS_WAITING_TO_START</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_RUNNING</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_FINISHED</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">STATUS_ERROR</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">build_stage_executor(Hexagon::BuildSystem::BuildStages::Base* build_stage=nullptr)</td>
</tr>
<tr>
  <td class="method">run_all_in_parallel()</td>
</tr>
<tr>
  <td class="method">infer_duration_seconds()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::thread&quot;, &quot;headers&quot;=&gt;[&quot;thread&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono::system_clock::time_point&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/ReportRenderer.q.yml">quintessence/Hexagon/BuildSystem/ReportRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">build</td>
  <td class="property">Hexagon::BuildSystem::Builds::Base*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_text_report()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::Builds::Base*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::ReportRenderers::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/ReportRenderers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::Builds::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/BuildSystem/ReportRenderers/Base.q.yml">quintessence/Hexagon/BuildSystem/ReportRenderers/Base.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">build</td>
  <td class="property">Hexagon::BuildSystem::Builds::Base*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">render_text()</td>
</tr>
<tr>
  <td class="method">colorize_status(std::string status=&quot;[unset-status]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStageRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStageRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::BuildStages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/BuildStages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSystem::Builds::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSystem/Builds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Errors&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Errors.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Camera.q.yml">quintessence/Hexagon/Camera.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">position</td>
  <td class="property">vec3d</td>
</tr>
<tr>
  <td class="property">stepback</td>
  <td class="property">vec3d</td>
</tr>
<tr>
  <td class="property">rotation</td>
  <td class="property">vec3d</td>
</tr>
<tr>
  <td class="property">tilt</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">zoom_min</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">zoom_max</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">zoom_pos</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">setup_camera_perspective(ALLEGRO_BITMAP* bmp=nullptr, float znear=5.0f, float stepback_baseline_z=600.0f, float viewport_scale=200.0f, float final_scale_multiplier=0.1f)</td>
</tr>
<tr>
  <td class="method">setup_dimentional_projection(ALLEGRO_BITMAP* bitmap=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;vec3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/vec3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;tan&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatCPTIntegration/Conversation.q.yml">quintessence/Hexagon/ChatCPTIntegration/Conversation.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">conversation_id</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">last_parent_id</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">messages</td>
  <td class="property">std::vector&lt;Hexagon::ChatCPTIntegration::Messages::Base*&gt;</td>
</tr>
<tr>
  <td class="property">authors</td>
  <td class="property">std::map&lt;std::string, Hexagon::ChatGPTIntegration::Author&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">append_text_message(uint32_t author_id=0, std::string body=&quot;[unset-append_text_message]&quot;)</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">get_last_n_messages(uint32_t count=3)</td>
</tr>
<tr>
  <td class="method">build_known_authors()</td>
</tr>
<tr>
  <td class="method">find_author_by_identifier(std::string author_identifier=&quot;[unset-author_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">find_author_by_id(uint32_t author_id=0)</td>
</tr>
<tr>
  <td class="method">author_exists(std::string author_identifier=&quot;[unset-author_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">author_exists_by_id(uint32_t author_id=0)</td>
</tr>
<tr>
  <td class="method">load_from_log_text_file(std::string log_text_filename=&quot;[unset-log_text_filename]&quot;)</td>
</tr>
<tr>
  <td class="method">get_most_recent_message()</td>
</tr>
<tr>
  <td class="method">conversation_id_and_parent_id_data_are_empty(std::pair&lt;std::string, std::string&gt; conversation_id_and_parent_id={})</td>
</tr>
<tr>
  <td class="method">parse_conversation_id_and_parent_id_from_json_str(std::string json_str=&quot;[unset-json_str]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Messages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Messages::Text&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Messages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatGPTIntegration::Author&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatGPTIntegration/Author.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatCPTIntegration/Messages/Base.q.yml">quintessence/Hexagon/ChatCPTIntegration/Messages/Base.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">author_id</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">conversation_id</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">parent_id</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_type(std::string possible_type=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatCPTIntegration/Messages/Text.q.yml">quintessence/Hexagon/ChatCPTIntegration/Messages/Text.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">body</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Messages/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/Author.q.yml">quintessence/Hexagon/ChatGPTIntegration/Author.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">id</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">display_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">avatar_bitmap_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">display_background_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/Chat/Chat.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/Chat.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/Chat/ConversationView.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/ConversationView.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">conversation</td>
  <td class="property">Hexagon::ChatCPTIntegration::Conversation*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">last_render_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_messages_to_show</td>
  <td class="property">int32_t</td>
</tr>
<tr>
  <td class="property">skip_empty_messages</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">multiline_text_line_number</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">multiline_text_draw_callback(int line_num=0, const char* line=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">count_num_lines_will_render(ALLEGRO_FONT* font=nullptr, float max_width=0.0f, std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">obtain_log_dump_font()</td>
</tr>
<tr>
  <td class="method">obtain_input_box_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Conversation&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Conversation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Messages::Text&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Messages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_line&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/Chat/InputBox.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/InputBox.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text_editor</td>
  <td class="property">Hexagon::AdvancedCodeEditor::AdvancedCodeEditor</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="method">insert_string(std::string text=&quot;[unset-text]&quot;)</td>
</tr>
<tr>
  <td class="method">delete_character()</td>
</tr>
<tr>
  <td class="method">get_cursor()</td>
</tr>
<tr>
  <td class="method">get_text()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::AdvancedCodeEditor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Cursor.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/Chat/LogView.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/LogView.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">source_filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_log_text()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/Chat/Stage.q.yml">quintessence/Hexagon/ChatGPTIntegration/Chat/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">log_view</td>
  <td class="property">Hexagon::ChatGPTIntegration::Chat::LogView</td>
</tr>
<tr>
  <td class="property">input_box</td>
  <td class="property">Hexagon::ChatGPTIntegration::Chat::InputBox</td>
</tr>
<tr>
  <td class="property">chat_log_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">input_box_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">log_source_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">conversation</td>
  <td class="property">Hexagon::ChatCPTIntegration::Conversation</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">input_buffer</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">view_mode</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">VIEW_MODE_UNDEFINED</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">VIEW_MODE_LOG</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">VIEW_MODE_CONVERSATION</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">clear_input_text_box()</td>
</tr>
<tr>
  <td class="method">toggle_view_mode()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">submit_input_box_and_clear()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">get_nth_from_last_message(uint32_t nth_from_last_position=0)</td>
</tr>
<tr>
  <td class="method">copy_message_text_from_message_n_from_the_last_to_clipboard(uint32_t nth_from_last_position=0)</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
<tr>
  <td class="method">obtain_log_dump_font()</td>
</tr>
<tr>
  <td class="method">obtain_input_box_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatGPTIntegration::Chat::LogView&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatGPTIntegration/Chat/LogView.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Cursor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Cursor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatGPTIntegration::Chat::InputBox&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatGPTIntegration/Chat/InputBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Window&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Window.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatGPTIntegration::SubmitTTYMessageToChat&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Conversation&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Conversation.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatGPTIntegration::Chat::ConversationView&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatGPTIntegration/Chat/ConversationView.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ClipboardData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ClipboardData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Messages::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Messages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatCPTIntegration::Messages::Text&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatCPTIntegration/Messages/Text.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/Message.q.yml">quintessence/Hexagon/ChatGPTIntegration/Message.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">author_id</td>
  <td class="property">uint32_t</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat.q.yml">quintessence/Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">tty_location</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">message</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">conversation_id</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">last_parent_id</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">shell_command_output</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">output_command_to_cout</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">submit()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/CachedLineRenderer.q.yml">quintessence/Hexagon/CodeEditor/CachedLineRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">bitmap_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_caches_to_build</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">cache</td>
  <td class="property">std::vector&lt;ALLEGRO_BITMAP*&gt;</td>
</tr>
<tr>
  <td class="property">source</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">destruct()</td>
</tr>
<tr>
  <td class="method">size()</td>
</tr>
<tr>
  <td class="method">exists(int index=0)</td>
</tr>
<tr>
  <td class="method">pull(int index=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;all&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;, &quot;map&quot;, &quot;vector&quot;, &quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;ALLEGRO_BITMAP*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/Cursor.q.yml">quintessence/Hexagon/CodeEditor/Cursor.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/CursorRenderer.q.yml">quintessence/Hexagon/CodeEditor/CursorRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">mode</td>
  <td class="property">:CodeEditor::CodeEditor::mode_t</td>
</tr>
<tr>
  <td class="property">focus</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::CodeEditor::mode_t&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/CodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::CodeEditor::EDIT&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/CodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::CodeEditor::INSERT&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/CodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::color&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/FileCategoryDecorator.q.yml">quintessence/Hexagon/CodeEditor/FileCategoryDecorator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">file_category</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">label()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/LineRenderBin.q.yml">quintessence/Hexagon/CodeEditor/LineRenderBin.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">load_data(std::string identifier=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">validate()</td>
</tr>
<tr>
  <td class="method">destroy_data(ALLEGRO_BITMAP* resource=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bin&lt;std::string, ALLEGRO_BITMAP *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bin.hpp&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::CachedLineRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/CachedLineRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Renderer::AdvancedLineRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Renderer/AdvancedLineRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::RendererInterface*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RendererInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Bin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Bin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/Renderer/AdvancedLineRenderer.q.yml">quintessence/Hexagon/CodeEditor/Renderer/AdvancedLineRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">font_color</td>
  <td class="property">ALLEGRO_COLOR*</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">full_line_text</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">max_num_columns</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">build_test_declaration_element_tokens()</td>
</tr>
<tr>
  <td class="private_method">build_quintessence_yaml_name_element_tokens()</td>
</tr>
<tr>
  <td class="private_method">build_quoted_string_tokens()</td>
</tr>
<tr>
  <td class="private_method">build_comment_tokens()</td>
</tr>
<tr>
  <td class="private_method">render_tokens(std::vector&lt;std::tuple&lt;std::string, int, ALLEGRO_COLOR&gt;&gt; tokens={}, float cell_width=1.0f)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::RegexStore&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RegexStore.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_text_width&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::get&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, int, ALLEGRO_COLOR&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_ALIGN_LEFT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/Renderer/BasicLineRenderer.q.yml">quintessence/Hexagon/CodeEditor/Renderer/BasicLineRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">font_color</td>
  <td class="property">ALLEGRO_COLOR*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">truncated_line</td>
  <td class="property"></td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_ALIGN_LEFT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::RendererInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RendererInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeEditor/Stage.q.yml">quintessence/Hexagon/CodeEditor/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">code_editor</td>
  <td class="property">:CodeEditor::CodeEditor</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_font_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">represents_a_symlink</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">change_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">is_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">code_editor_char_count()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::CodeEditor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/CodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::OneLineInputBox::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/OneLineInputBox/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::StageInfoOverlay&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/StageInfoOverlay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeEditor::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::FileCategoryDecorator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/FileCategoryDecorator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeMessagePointManager.q.yml">quintessence/Hexagon/CodeMessagePointManager.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">code_message_points</td>
  <td class="property">std::vector&lt;CodeMessagePoint&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">append(CodeMessagePoint code_message_point={})</td>
</tr>
<tr>
  <td class="method">set_code_message_points(std::vector&lt;CodeMessagePoint&gt; code_message_points={})</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">delete_row(int row=0)</td>
</tr>
<tr>
  <td class="method">shift_rows_down_at_and_after(int row=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeMessagePoint&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;CodeMessagePoint&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeRangeExtractor.q.yml">quintessence/Hexagon/CodeRangeExtractor.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;*</td>
</tr>
<tr>
  <td class="property">code_range</td>
  <td class="property">CodeRange*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">extract()</td>
</tr>
<tr>
  <td class="method">extract_full_lines()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::max&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeRenderer.q.yml">quintessence/Hexagon/CodeRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/CodeSelectionBoxRenderer.q.yml">quintessence/Hexagon/CodeSelectionBoxRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;*</td>
</tr>
<tr>
  <td class="property">code_range</td>
  <td class="property">CodeRange*</td>
</tr>
<tr>
  <td class="property">first_line_number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">selection_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render_full_line_selection()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">verify_line_in_range(int line_num=0)</td>
</tr>
<tr>
  <td class="private_method">get_line_length(int line_num=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ComponentBitmapRenderCreator.q.yml">quintessence/Hexagon/ComponentBitmapRenderCreator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Blast::Project::Component*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create_bitmap_render()</td>
</tr>
<tr>
  <td class="private_method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component*&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ComponentDependencies.q.yml">quintessence/Hexagon/ComponentDependencies.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">component_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">dependencies</td>
  <td class="property">std::set&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate_dependency_filename()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ComponentDependencyFileParser.q.yml">quintessence/Hexagon/ComponentDependencyFileParser.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dependency_filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate_dependencies()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::remove&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ComponentRelationsNavigator/ComponentRelations.q.yml">quintessence/Hexagon/ComponentRelationsNavigator/ComponentRelations.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Blast::Project::Component</td>
</tr>
<tr>
  <td class="property">simplify_relatives_list</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_dependents_list()</td>
</tr>
<tr>
  <td class="method">build_relatives_list()</td>
</tr>
<tr>
  <td class="method">build_dependencies_list()</td>
</tr>
<tr>
  <td class="private_method">build_implicit_json_dependents_filename_for_project(std::string project_root=&quot;[unset-project_root]&quot;)</td>
</tr>
<tr>
  <td class="private_method">valid_project_root(std::string* project_root=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentDependencyLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentDependencyLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentRelativeLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentRelativeLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Project::Component&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ComponentRelationsNavigator::DocumentationDependentsJSONLoader&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::DependencyManager&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/DependencyManager.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader.q.yml">quintessence/Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dependents_json_filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_dependent_names_for_component_name(std::string component_name=&quot;&quot;)</td>
</tr>
<tr>
  <td class="private_method">dependents_json_file_contents()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ComponentRelationsNavigator/Stage.q.yml">quintessence/Hexagon/ComponentRelationsNavigator/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">dependents_menu_items</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">relatives_menu_items</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">dependencies_menu_items</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">dependents_menu</td>
  <td class="property">Hexagon::Elements::ListMenu</td>
</tr>
<tr>
  <td class="property">relatives_menu</td>
  <td class="property">Hexagon::Elements::ListMenu</td>
</tr>
<tr>
  <td class="property">dependencies_menu</td>
  <td class="property">Hexagon::Elements::ListMenu</td>
</tr>
<tr>
  <td class="property">dependents_menu_place</td>
  <td class="property">placement3d</td>
</tr>
<tr>
  <td class="property">relatives_menu_place</td>
  <td class="property">placement3d</td>
</tr>
<tr>
  <td class="property">dependencies_menu_place</td>
  <td class="property">placement3d</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="private_property">currently_active_menu</td>
  <td class="private_property">Hexagon::Elements::ListMenu*</td>
</tr>
<tr>
  <td class="property">default_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">set_currently_active_menu(Hexagon::Elements::ListMenu* menu=nullptr)</td>
</tr>
<tr>
  <td class="method">is_currently_active_menu(Hexagon::Elements::ListMenu* currently_active_menu=nullptr)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_left()</td>
</tr>
<tr>
  <td class="method">move_cursor_right()</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">get_current_selection_label_or_empty_string()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="private_method">emit_submission()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ListMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ListMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ListMenu*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ListMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Daemus/ProgramRunner.q.yml">quintessence/Hexagon/Daemus/ProgramRunner.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">quintessence_build_executable</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">daemus_buildfile_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">daemus_buildfile_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">watch_mode</td>
  <td class="property">Hexagon::Daemus::ProgramRunner::WatchMode</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">run_full_rebuild()</td>
</tr>
<tr>
  <td class="method">run_simple_echo_command()</td>
</tr>
<tr>
  <td class="method">run_simple_sleep_command()</td>
</tr>
<tr>
  <td class="method">run_once(std::string project_directory=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">run_make_focus_with_instruction(std::string project_directory=&quot;[unset-project_directory]&quot;)</td>
</tr>
<tr>
  <td class="method">cd_to_project_directory_and_run_with_rerun(std::string project_directory=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">watch_for_buildfile(std::string project_directory=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">run_with_rerun(std::string project_directory=&quot;&quot;)</td>
</tr>
<tr>
  <td class="private_method">execute_command(std::string command=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">run_component_test(Blast::Project::Component component={})</td>
</tr>
<tr>
  <td class="method">run_build_quintessence_file(std::string project_directory=&quot;&quot;, std::string quintessence_filename=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">output_pid()</td>
</tr>
<tr>
  <td class="private_method">__execute_command(std::string command=&quot;&quot;, bool output_to_stdout=true)</td>
</tr>
<tr>
  <td class="method">find_oldest_filename(std::string path=&quot;/Users/markoates/Repos/hexagon/bin/programs/data/builds/pending&quot;, bool ignore_dotfiles=true)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::chrono&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::last_write_time&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem::is_empty&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;getpid&quot;, &quot;headers&quot;=&gt;[&quot;unistd.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::DirectoryExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/DirectoryExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Testing::GoogleTestRunOutputParser&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Testing/GoogleTestRunOutputParser.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::Testing::GoogleTestRunTestResult&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Testing/GoogleTestRunTestResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Daemus::ProgramRunner::WatchMode&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Testing::GoogleTestRunTestResult&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Testing/GoogleTestRunTestResult.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/DarkModeDetector.q.yml">quintessence/Hexagon/DarkModeDetector.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">DARK_MODE_RESPONSE_STRING</td>
  <td class="property">const char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_dark()</td>
</tr>
<tr>
  <td class="method">is_light()</td>
</tr>
<tr>
  <td class="private_method">get_trimmed_command_result()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/DependencyManager.q.yml">quintessence/Hexagon/DependencyManager.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_folder</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">dependencies</td>
  <td class="property">std::map&lt;std::string, std::set&lt;std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">dependents</td>
  <td class="property">std::map&lt;std::string, std::set&lt;std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">dependencies_loaded</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEPS_FOLDER</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_project_folder(std::string project_folder=&quot;/Users/markoates/Hexagon/&quot;)</td>
</tr>
<tr>
  <td class="method">load_from_source_tree()</td>
</tr>
<tr>
  <td class="method">reload_dependency_file(std::string dependency_name=&quot;[unset-dependency_name]&quot;, std::string filename=&quot;[unset-filename]&quot;)</td>
</tr>
<tr>
  <td class="private_method">load_dependencies()</td>
</tr>
<tr>
  <td class="private_method">build_dependents_from_dependencies()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::filesystem&quot;, &quot;headers&quot;=&gt;[&quot;filesystem&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ComponentDependencyFileParser&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ComponentDependencyFileParser.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/DirtyGrid.q.yml">quintessence/Hexagon/DirtyGrid.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dirty_cells</td>
  <td class="property">std::set&lt;std::pair&lt;int, int&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">dirty_cells_count()</td>
</tr>
<tr>
  <td class="method">dirty_cells_empty()</td>
</tr>
<tr>
  <td class="method">mark_as_dirty(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">mark_all_as_dirty(std::vector&lt;std::string&gt;* lines={})</td>
</tr>
<tr>
  <td class="method">mark_row_as_dirty(int row=0, int start=0, int length=0)</td>
</tr>
<tr>
  <td class="method">incorporate(Hexagon::DirtyGrid* other_dirty_grid=nullptr)</td>
</tr>
<tr>
  <td class="method">build_vector()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::DirtyGrid&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/DirtyGrid.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::set&lt;std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;set&quot;, &quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ElementFX/WindowSpawnMotionFX.q.yml">quintessence/Hexagon/ElementFX/WindowSpawnMotionFX.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">window</td>
  <td class="property">Hexagon::Elements::Window</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">construct_modified_window()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Window&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Window.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/BitmapGridMesh.q.yml">quintessence/Hexagon/Elements/BitmapGridMesh.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">grid</td>
  <td class="property">std::vector&lt;std::vector&lt;std::tuple&lt;char, ALLEGRO_COLOR, ALLEGRO_COLOR&gt;&gt;&gt;&amp;</td>
</tr>
<tr>
  <td class="property">dummy_grid</td>
  <td class="property">std::vector&lt;std::vector&lt;std::tuple&lt;char, ALLEGRO_COLOR, ALLEGRO_COLOR&gt;&gt;&gt;</td>
</tr>
<tr>
  <td class="property">vertexes</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">clip_start_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">clip_length_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_cell_uv(int x=0, int y=0, std::tuple&lt;float, float, float, float&gt; uv_coords={0.0f, 0.0f, 1.0f, 1.0f})</td>
</tr>
<tr>
  <td class="method">set_cell_color(int x=0, int y=0, ALLEGRO_COLOR color={0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">resize(int num_columns=0, int num_rows=0, float cell_width=0.0f, float cell_height=0.0f)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_only_select_cells(std::vector&lt;std::pair&lt;int, int&gt;&gt; cell_coordinates={})</td>
</tr>
<tr>
  <td class="method">calculate_width()</td>
</tr>
<tr>
  <td class="method">calculate_height()</td>
</tr>
<tr>
  <td class="private_method">find_cell(int x=0, int y=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/BitmapGridRenderSurface.q.yml">quintessence/Hexagon/Elements/BitmapGridRenderSurface.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">cell_sub_bitmaps</td>
  <td class="property">std::vector&lt;ALLEGRO_BITMAP*&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">previous_render_state</td>
  <td class="property">ALLEGRO_STATE</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_cell_width(int cell_width=1)</td>
</tr>
<tr>
  <td class="method">set_cell_height(int cell_height=1)</td>
</tr>
<tr>
  <td class="method">lock_for_render()</td>
</tr>
<tr>
  <td class="method">unlock_for_render()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">draw_to_cell(ALLEGRO_BITMAP* bitmap_to_draw=nullptr, ALLEGRO_COLOR tint=ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}, int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">find_sub_bitmap(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_STATE&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;ALLEGRO_BITMAP*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/CheckTextureGenerator.q.yml">quintessence/Hexagon/Elements/CheckTextureGenerator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate_grid_check()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/ColorKit.q.yml">quintessence/Hexagon/Elements/ColorKit.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_backfill_color(float opacity=1.0f)</td>
</tr>
<tr>
  <td class="method">get_base_text_color(float opacity=1.0f)</td>
</tr>
<tr>
  <td class="method">pure_white_blue()</td>
</tr>
<tr>
  <td class="method">black()</td>
</tr>
<tr>
  <td class="method">white()</td>
</tr>
<tr>
  <td class="method">terminal_warm_orange()</td>
</tr>
<tr>
  <td class="method">turn_on_all_the_house_lights_white()</td>
</tr>
<tr>
  <td class="method">backwall_gray()</td>
</tr>
<tr>
  <td class="method">inv_base_text_color()</td>
</tr>
<tr>
  <td class="method">inv_backfill_color()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::mix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/ComponentTitleSlate.q.yml">quintessence/Hexagon/Elements/ComponentTitleSlate.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">quote</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/CoolGrid.q.yml">quintessence/Hexagon/Elements/CoolGrid.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/DataTable.q.yml">quintessence/Hexagon/Elements/DataTable.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">column_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">row_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">data2d</td>
  <td class="property">std::vector&lt;std::vector&lt;std::string&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Window&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Window.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_textf&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_font_line_height&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/DynamicGridMesh.q.yml">quintessence/Hexagon/Elements/DynamicGridMesh.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">vertexes</td>
  <td class="property">std::vector&lt;ALLEGRO_VERTEX&gt;</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">cells</td>
  <td class="property">std::map&lt;std::tuple&lt;int, int&gt;, int&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create_or_set_cell(int x=0, int y=0, int u1=0, int v1=0, int u2=0, int v2=0, ALLEGRO_COLOR color={0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">delete_cell(int x=0, int y=0)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_VERTEX&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/FilePixelPreviewCreator.q.yml">quintessence/Hexagon/Elements/FilePixelPreviewCreator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create()</td>
</tr>
<tr>
  <td class="private_method">get_file_contents()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::TextPixelPreviewCreator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/TextPixelPreviewCreator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/FlashingGrid.q.yml">quintessence/Hexagon/Elements/FlashingGrid.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">box_size</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">counter</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/FontCharacterMapGrid.q.yml">quintessence/Hexagon/Elements/FontCharacterMapGrid.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">grid_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">grid_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">character_uv_mapping</td>
  <td class="property">std::map&lt;char, std::tuple&lt;float, float, float, float&gt;&gt;</td>
</tr>
<tr>
  <td class="property">created_character_map_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_created_character_map_bitmap()</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;char, std::tuple&lt;float, float, float, float&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;tuple&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/FontedTextGrid.q.yml">quintessence/Hexagon/Elements/FontedTextGrid.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">sub_bitmap_character_map</td>
  <td class="property">Hexagon::Elements::SubBitmapCharacterMap</td>
</tr>
<tr>
  <td class="property">bitmap_grid_render_surface</td>
  <td class="property">Hexagon::Elements::BitmapGridRenderSurface</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
<tr>
  <td class="method">set_cell_to_character_and_color(char character=&#39; &#39;, int x=0, int y=0, ALLEGRO_COLOR tint=ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f})</td>
</tr>
<tr>
  <td class="method">lock_for_update()</td>
</tr>
<tr>
  <td class="method">unlock_for_update()</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">__cheat_really_badly_and_get_the_bitmap_grid_render_surface()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::BitmapGridRenderSurface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/BitmapGridRenderSurface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::SubBitmapCharacterMap&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/SubBitmapCharacterMap.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/Frame.q.yml">quintessence/Hexagon/Elements/Frame.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dummy_font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">fonts</td>
  <td class="property">AllegroFlare::FontBin&amp;</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">line_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_default_frame_color()</td>
</tr>
<tr>
  <td class="method">get_dummy_font_bin()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::mix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/ListMenu.q.yml">quintessence/Hexagon/Elements/ListMenu.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">list_items</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">frame_offset_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">wrap_cursor_when_moving_cursor_outside_bounds</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">title_upcase</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">menu_items_upcase</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">padding</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_list_items(std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt; list_items={})</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">get_current_list_item_identifier()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_list_item_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="method">build_inactive_color()</td>
</tr>
<tr>
  <td class="method">build_opacified_backfill_color()</td>
</tr>
<tr>
  <td class="private_method">draw_cursor_pointer_arrow(float cpx=1000, float cpy=900)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/Pill.q.yml">quintessence/Hexagon/Elements/Pill.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">label</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">font_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/QuoteRenderer.q.yml">quintessence/Hexagon/Elements/QuoteRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">Hexagon::Font</td>
</tr>
<tr>
  <td class="property">quote</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">speaker</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">incrementer(int line_num=0, char* line__WAS_CONST_CHAR=nullptr, int size=0, void* extra=nullptr)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;const char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;void*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Font&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Font.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/SingleBlockBarGraph.q.yml">quintessence/Hexagon/Elements/SingleBlockBarGraph.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">number_of_active_bars</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">number_of_bg_bars</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bar_spacing</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">stroke_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">main_bar_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bg_bar_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">stroke_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">draw()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_target_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/StageInfoOverlay.q.yml">quintessence/Hexagon/Elements/StageInfoOverlay.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR*</td>
</tr>
<tr>
  <td class="property">backfill_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">placement3d*</td>
</tr>
<tr>
  <td class="property">text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">upcase</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">obtain_title_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::mix&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Frame&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Frame.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d*&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::transform&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/SubBitmapCharacterMap.q.yml">quintessence/Hexagon/Elements/SubBitmapCharacterMap.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">grid_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">grid_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">NUM_ROWS</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">NUM_COLUMNS</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">cell_sub_bitmaps</td>
  <td class="property">std::map&lt;char, ALLEGRO_BITMAP*&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">find_sub_bitmap(char character=0)</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;char, ALLEGRO_BITMAP*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;char, std::tuple&lt;float, float, float, float&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;tuple&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/TextGrid.q.yml">quintessence/Hexagon/Elements/TextGrid.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cell_spacing_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cell_spacing_y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">grid</td>
  <td class="property">std::vector&lt;std::vector&lt;std::tuple&lt;char, ALLEGRO_COLOR, ALLEGRO_COLOR&gt;&gt;&gt;&amp;</td>
</tr>
<tr>
  <td class="property">dummy_grid</td>
  <td class="property">std::vector&lt;std::vector&lt;std::tuple&lt;char, ALLEGRO_COLOR, ALLEGRO_COLOR&gt;&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::tuple&lt;char, ALLEGRO_COLOR, ALLEGRO_COLOR&gt;&gt;&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::vector&lt;std::tuple&lt;char, ALLEGRO_COLOR, ALLEGRO_COLOR&gt;&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/TextMesh.q.yml">quintessence/Hexagon/Elements/TextMesh.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_character_map_grid</td>
  <td class="property">Hexagon::Elements::FontCharacterMapGrid</td>
</tr>
<tr>
  <td class="property">bitmap_grid_mesh</td>
  <td class="property">Hexagon::Elements::BitmapGridMesh</td>
</tr>
<tr>
  <td class="property">font_character_map_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">font_character_uv_mapping</td>
  <td class="property">std::map&lt;char, std::tuple&lt;float, float, float, float&gt;&gt;</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_font(ALLEGRO_FONT* font=nullptr)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">destruct()</td>
</tr>
<tr>
  <td class="method">set_cell_color(int x=0, int y=0, ALLEGRO_COLOR color={0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">set_cell_character(int x=0, int y=0, char character=&#39;\0&#39;)</td>
</tr>
<tr>
  <td class="method">calculate_width()</td>
</tr>
<tr>
  <td class="method">calculate_height()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">render_only_select_cells(std::vector&lt;std::pair&lt;int, int&gt;&gt; cell_coordinates={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;char, std::tuple&lt;float, float, float, float&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;tuple&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;int, int&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::BitmapGridMesh&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/BitmapGridMesh.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::FontCharacterMapGrid&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/FontCharacterMapGrid.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/TextPixelPreviewCreator.q.yml">quintessence/Hexagon/Elements/TextPixelPreviewCreator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">text_lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/TexturedRectangle.q.yml">quintessence/Hexagon/Elements/TexturedRectangle.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y1</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">x2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y2</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">texture</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">draw()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;draw_textured_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Elements/Window.q.yml">quintessence/Hexagon/Elements/Window.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">box_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cell_padding</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">box_fill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">header_bar_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">bottom_line_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">outer_line_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">header_baseline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">top_left_little_bar_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">corner_squares_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">header_bar_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">header_baseline_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">header_bar_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">header_baseline_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">top_left_little_bar_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">outer_line_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">outer_line_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bottom_line_thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">bottom_line_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">corner_squares_resize_from_center</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">corner_squares_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">corner_squares_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">corner_squares_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">corner_squares_are_circles</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">number_of_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">number_of_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">distance_of_rows</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">distance_of_columns</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="private_method">draw_top_left_little_bar()</td>
</tr>
<tr>
  <td class="private_method">draw_header_baseline()</td>
</tr>
<tr>
  <td class="private_method">draw_bottom_line()</td>
</tr>
<tr>
  <td class="private_method">draw_header_bar()</td>
</tr>
<tr>
  <td class="private_method">draw_corner_circles()</td>
</tr>
<tr>
  <td class="private_method">draw_corner_squares()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::color&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Errors.q.yml">quintessence/Hexagon/Errors.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_error_message(std::string from=&quot;[unset-from]&quot;, std::string message=&quot;[unset-message]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Fancy/Stage.q.yml">quintessence/Hexagon/Fancy/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">obtain_title_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/FileNavigator/Stage.q.yml">quintessence/Hexagon/FileNavigator/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">cursor_position_static</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">selector_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">nodes</td>
  <td class="property">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">node_root</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">current_selection_is_valid()</td>
</tr>
<tr>
  <td class="method">get_current_selection_or_spaced_empty_string()</td>
</tr>
<tr>
  <td class="method">get_current_selection()</td>
</tr>
<tr>
  <td class="method">current_selection_is_folder()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_to_top()</td>
</tr>
<tr>
  <td class="method">set_node_root_to_system_root_directory()</td>
</tr>
<tr>
  <td class="method">set_node_root_to_repos_directory()</td>
</tr>
<tr>
  <td class="method">set_node_root_to_user_directory()</td>
</tr>
<tr>
  <td class="method">set_node_root_to_shopify_repos_directory()</td>
</tr>
<tr>
  <td class="method">set_node_root_to_parent_directory()</td>
</tr>
<tr>
  <td class="method">set_node_root_to_current_selection_if_folder()</td>
</tr>
<tr>
  <td class="method">refresh_list()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">save_file()</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cerr&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_circle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;FileSystemNode&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileSystemNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::KeyboardCommandMapper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/KeyboardCommandMapper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/FilesOpenedHistory.q.yml">quintessence/Hexagon/FilesOpenedHistory.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">files</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/FocusTimerBar/FocusTimerBar.q.yml">quintessence/Hexagon/FocusTimerBar/FocusTimerBar.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">focus_timer_started_at</td>
  <td class="property">std::time_t</td>
</tr>
<tr>
  <td class="property">focus_timer_duration_sec</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">warning_position_sec</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">calc_warning_position_normalized()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/FocusTimerBar/Renderer.q.yml">quintessence/Hexagon/FocusTimerBar/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">focus_timer_bar</td>
  <td class="property">Hexagon::FocusTimerBar::FocusTimerBar*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_ticks()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::fmod&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::FocusTimerBar::FocusTimerBar&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FocusTimerBar/FocusTimerBar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Font.q.yml">quintessence/Hexagon/Font.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">font_size</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">increase_font_size()</td>
</tr>
<tr>
  <td class="method">decrease_font_size()</td>
</tr>
<tr>
  <td class="method">al_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/FontSet.q.yml">quintessence/Hexagon/FontSet.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">dummy_font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">fonts</td>
  <td class="property">AllegroFlare::FontBin&amp;</td>
</tr>
<tr>
  <td class="property">font_dictionary</td>
  <td class="property">std::map&lt;std::string, std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_dummy_font_bin()</td>
</tr>
<tr>
  <td class="method">obtain_font(std::string identifier=&quot;dummy_font&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&amp;&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Forms/Fun.q.yml">quintessence/Hexagon/Forms/Fun.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">buffer</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">draw(placement3d place={}, ALLEGRO_COLOR backfill_color=ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f})</td>
</tr>
<tr>
  <td class="method">process_char_input(char input_ch=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_system_installed&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_target_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/FullScreenOverlay/Stage.q.yml">quintessence/Hexagon/FullScreenOverlay/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">text_font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">screen_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_font_ascent&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Git/CommitStagedWithMessage.q.yml">quintessence/Hexagon/Git/CommitStagedWithMessage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">message</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_sanitized_commit_message()</td>
</tr>
<tr>
  <td class="method">build_shell_command()</td>
</tr>
<tr>
  <td class="method">commit()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Git/Modified.q.yml">quintessence/Hexagon/Git/Modified.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_shell_response()</td>
</tr>
<tr>
  <td class="method">build_tracked_files_shell_command()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Git/Pusher.q.yml">quintessence/Hexagon/Git/Pusher.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">get_push_shell_command()</td>
</tr>
<tr>
  <td class="method">validate_result_or_throw_error_on_failure(std::string response=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">push()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Git/RemoteSyncChecker.q.yml">quintessence/Hexagon/Git/RemoteSyncChecker.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">repo_name</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">repos_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_in_sync_with_remote()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;NcursesArt::GithubRepoStatusFetcher&quot;, &quot;headers&quot;=&gt;[&quot;NcursesArt/GithubRepoStatusFetcher.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Git/StageEverything.q.yml">quintessence/Hexagon/Git/StageEverything.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">stage_everything()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Git/Staged.q.yml">quintessence/Hexagon/Git/Staged.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_shell_response()</td>
</tr>
<tr>
  <td class="method">build_staged_files_shell_command()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Git/Untracked.q.yml">quintessence/Hexagon/Git/Untracked.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_shell_response()</td>
</tr>
<tr>
  <td class="method">build_tracked_files_shell_command()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/GitCommitMessageInputBox/Stage.q.yml">quintessence/Hexagon/GitCommitMessageInputBox/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">code_editor</td>
  <td class="property">:CodeEditor::CodeEditor</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_font_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">change_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">is_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">code_editor_char_count()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::CodeEditor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/CodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::OneLineInputBox::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/OneLineInputBox/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:GitCommitMessageInputBox::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/GitCommitMessageInputBox/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::StageInfoOverlay&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/StageInfoOverlay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeEditor::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Hud.q.yml">quintessence/Hexagon/Hud.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">dummy_font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">screen_sub_bitmap</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">notifications</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">notifications2</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">powerbar</td>
  <td class="property">Hexagon::Powerbar::Powerbar</td>
</tr>
<tr>
  <td class="property">focus_timer_bar</td>
  <td class="property">Hexagon::FocusTimerBar::FocusTimerBar</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin&amp;</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">show_disabled_screen</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_powerbar</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">files_are_committed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">commits_are_in_sync_with_remote</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_profiler</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_save_count</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">save_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">show_packets</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">packets</td>
  <td class="property">std::vector&lt;Hexagon::Packet&gt;</td>
</tr>
<tr>
  <td class="property">show_search_count</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">search_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">show_focus_timer_bar</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_build_sequence_meter</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_notifications</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">left_column_x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_projection_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">surface_projection_height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;*</td>
</tr>
<tr>
  <td class="property">global_font_str</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_component_is_symlinked_thus_has_different_title_color</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">show_caps_lock_notification_light</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">base_text_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">objective_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">show_objective</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">domain_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">show_domain</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">reinitialize()</td>
</tr>
<tr>
  <td class="private_method">draw_current_title_text()</td>
</tr>
<tr>
  <td class="method">draw_profile_timer_graph()</td>
</tr>
<tr>
  <td class="method">draw_objective_text()</td>
</tr>
<tr>
  <td class="method">draw_domain_text_and_overlay()</td>
</tr>
<tr>
  <td class="method">draw_powerbar()</td>
</tr>
<tr>
  <td class="method">draw_focus_timer_bar()</td>
</tr>
<tr>
  <td class="method">draw_build_sequence_meter()</td>
</tr>
<tr>
  <td class="method">draw_packets()</td>
</tr>
<tr>
  <td class="method">draw_caps_lock_notification_light(bool active=false)</td>
</tr>
<tr>
  <td class="method">draw()</td>
</tr>
<tr>
  <td class="method">set_orthographic_projection(ALLEGRO_BITMAP* bitmap=nullptr, float left=0, float top=0, float right=1920, float bottom=1080)</td>
</tr>
<tr>
  <td class="method">get_dummy_font_bin()</td>
</tr>
<tr>
  <td class="method">obtain_text_font()</td>
</tr>
<tr>
  <td class="method">obtain_title_font()</td>
</tr>
<tr>
  <td class="method">obtain_objective_font()</td>
</tr>
<tr>
  <td class="method">obtain_domain_font()</td>
</tr>
<tr>
  <td class="method">obtain_powerbar_text_font()</td>
</tr>
<tr>
  <td class="method">obtain_score_text_font()</td>
</tr>
<tr>
  <td class="method">obtain_global_font()</td>
</tr>
<tr>
  <td class="method">obtain_packet_text_font()</td>
</tr>
<tr>
  <td class="method">obtain_component_navigator_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ColorKit&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ColorKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sin&quot;, &quot;headers&quot;=&gt;[&quot;math.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Camera&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Camera.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::min&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Powerbar&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Powerbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::FocusTimerBar::FocusTimerBar&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FocusTimerBar/FocusTimerBar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::FocusTimerBar::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FocusTimerBar/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_display_width&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_font_ascent&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::mix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&amp;&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;global::profiler&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/shared_globals.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::Packet&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Packet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::PacketRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/PacketRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::BuildSequenceMeter::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/BuildSequenceMeter/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Pill&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Pill.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Packet&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Packet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Joystick.q.yml">quintessence/Hexagon/Joystick.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/KeyboardCommandKey.q.yml">quintessence/Hexagon/KeyboardCommandKey.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">al_keycode</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">shift</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">ctrl</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">alt</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">command</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Layout.q.yml">quintessence/Hexagon/Layout.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">concept_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">files</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string, placement3d&gt;&gt;</td>
</tr>
<tr>
  <td class="property">daemus_command</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, placement3d&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;, &quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/LayoutFromYAML.q.yml">quintessence/Hexagon/LayoutFromYAML.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">root_node</td>
  <td class="property">YAML::Node</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Layout&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/LayoutPlacements.q.yml">quintessence/Hexagon/LayoutPlacements.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">placements</td>
  <td class="property">std::map&lt;std::string, placement3d&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">placement_for(std::string label=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::runtime_error&quot;, &quot;headers&quot;=&gt;[&quot;stdexcept&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, placement3d&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/LayoutToStagesCreator.q.yml">quintessence/Hexagon/LayoutToStagesCreator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;*</td>
</tr>
<tr>
  <td class="property">stage_factory</td>
  <td class="property">Hexagon::StageFactory*</td>
</tr>
<tr>
  <td class="property">layout</td>
  <td class="property">Hexagon::Layout*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">code_editor_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">code_editor_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create()</td>
</tr>
<tr>
  <td class="method">place_and_load_code_editor(std::string filename=&quot;&quot;, std::string file_category=&quot;undefined_file_category&quot;, placement3d place={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Layout*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string, placement3d&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;, &quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Layout&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Logo.q.yml">quintessence/Hexagon/Logo.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">radius</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">thickness</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">default_color()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;path2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/path2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sqrt&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Marker.q.yml">quintessence/Hexagon/Marker.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">line_num</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MarkerNavigator.q.yml">quintessence/Hexagon/MarkerNavigator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">markers_index</td>
  <td class="property">std::map&lt;std::string, Hexagon::Marker&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">load()</td>
</tr>
<tr>
  <td class="method">clear()</td>
</tr>
<tr>
  <td class="method">add_or_override(std::string label=&quot;[no-label-set]&quot;, Hexagon::Marker marker={})</td>
</tr>
<tr>
  <td class="method">marker_exists(std::string label=&quot;[no-label-set]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, Hexagon::Marker&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;Hexagon/Marker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Marker&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Marker.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MissingFile/Stage.q.yml">quintessence/Hexagon/MissingFile/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">expected_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">title_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_text_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_title_font()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="private_method">create_expected_file()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileCreator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileCreator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::TexturedRectangle&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/TexturedRectangle.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MultiplexMenu/CommandExecutor.q.yml">quintessence/Hexagon/MultiplexMenu/CommandExecutor.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stage_to_send_messages_to</td>
  <td class="property">StageInterface*</td>
</tr>
<tr>
  <td class="property">multiplex_menu</td>
  <td class="property">Hexagon::MultiplexMenu::MultiplexMenu*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">send_message_to_stage(std::string message=&quot;[message-identifier-set]&quot;)</td>
</tr>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenu*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MultiplexMenu/MenuItem.q.yml">quintessence/Hexagon/MultiplexMenu/MenuItem.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">keyboard_command_key</td>
  <td class="property">Hexagon::KeyboardCommandKey</td>
</tr>
<tr>
  <td class="property">label</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">value</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::KeyboardCommandKey&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/KeyboardCommandKey.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MultiplexMenu/MultiplexMenu.q.yml">quintessence/Hexagon/MultiplexMenu/MultiplexMenu.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">page_dictionary</td>
  <td class="property">std::map&lt;std::string, Hexagon::MultiplexMenu::MultiplexMenuPage&gt;</td>
</tr>
<tr>
  <td class="property">page_history</td>
  <td class="property">std::vector&lt;Hexagon::MultiplexMenu::MultiplexMenuPage*&gt;</td>
</tr>
<tr>
  <td class="property">final_command_set_to_execute</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_page_dictionary(std::map&lt;std::string, Hexagon::MultiplexMenu::MultiplexMenuPage&gt; page_dictionary={})</td>
</tr>
<tr>
  <td class="method">get_num_pages()</td>
</tr>
<tr>
  <td class="method">clear_history()</td>
</tr>
<tr>
  <td class="method">infer_current_page()</td>
</tr>
<tr>
  <td class="method">open_page(std::string page_name=&quot;[unset-page_name]&quot;)</td>
</tr>
<tr>
  <td class="method">find_page_by_name(std::string page_name=&quot;[unset-page_name]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, Hexagon::MultiplexMenu::MultiplexMenuPage&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::MultiplexMenu::MultiplexMenuPage*&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MultiplexMenu/MultiplexMenuPage.q.yml">quintessence/Hexagon/MultiplexMenu/MultiplexMenuPage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">items</td>
  <td class="property">std::vector&lt;Hexagon::MultiplexMenu::MenuItem&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">find_item_by_keyboard_command_key(Hexagon::KeyboardCommandKey keyboard_command_key={})</td>
</tr>
<tr>
  <td class="method">compare_keyboard_command_keys_equal(Hexagon::KeyboardCommandKey a={}, Hexagon::KeyboardCommandKey b={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MenuItem*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MenuItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::MultiplexMenu::MenuItem&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/MultiplexMenu/MenuItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::KeyboardCommandKey&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/KeyboardCommandKey.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MenuItem&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MenuItem.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MultiplexMenu/PageRenderer.q.yml">quintessence/Hexagon/MultiplexMenu/PageRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">page</td>
  <td class="property">Hexagon::MultiplexMenu::MultiplexMenuPage*</td>
</tr>
<tr>
  <td class="property">is_active</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">padding</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">render_menu_item(float x=0, float y=0, std::string input=&quot;[no-input-defined]&quot;, std::string label=&quot;Unlabeled&quot;, bool opens_menu=false, std::string state=&quot;no_state&quot;)</td>
</tr>
<tr>
  <td class="method">convert_key_input_to_string(int al_keycode=0, bool ctrl=false, bool alt=false, bool command=false, bool shift=false)</td>
</tr>
<tr>
  <td class="method">render_frame()</td>
</tr>
<tr>
  <td class="private_method">obtain_font()</td>
</tr>
<tr>
  <td class="private_method">obtain_keyboard_key_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_keycode_to_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ColorKit&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ColorKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MultiplexMenu/Renderer.q.yml">quintessence/Hexagon/MultiplexMenu/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">multiplex_menu</td>
  <td class="property">Hexagon::MultiplexMenu::MultiplexMenu*</td>
</tr>
<tr>
  <td class="property">page_width</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">get_width()</td>
</tr>
<tr>
  <td class="private_method">render_page(Hexagon::MultiplexMenu::MultiplexMenuPage* page=nullptr, bool is_active=false)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenu*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::PageRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/PageRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/MultiplexMenu/Stage.q.yml">quintessence/Hexagon/MultiplexMenu/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">stage_to_send_messages_to</td>
  <td class="property">StageInterface*</td>
</tr>
<tr>
  <td class="property">system_to_tell_when_its_time_to_close_and_by_the_way_this_is_bad_design</td>
  <td class="property">Hexagon::System::System*</td>
</tr>
<tr>
  <td class="property">multiplex_menu</td>
  <td class="property">Hexagon::MultiplexMenu::MultiplexMenu</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">send_message_to_stage(std::string message=&quot;[message-identifier-set]&quot;)</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="private_method">notify_system_that_its_time_to_close_this_multiplex_menu()</td>
</tr>
<tr>
  <td class="private_method">infer_menu_item_value_is_instruction_to_open_page(std::string menu_item_value=&quot;[unset-menu_item_value]&quot;)</td>
</tr>
<tr>
  <td class="private_method">extract_menu_item_value_page_name_to_open(std::string menu_item_value=&quot;[unset-menu_item_value]&quot;)</td>
</tr>
<tr>
  <td class="method">open_page(std::string page_name=&quot;[unset-page_name]&quot;)</td>
</tr>
<tr>
  <td class="private_method">find_menu_item_by_keyboard_command_key_on_current_page(Hexagon::KeyboardCommandKey keyboard_command_key={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::KeyboardCommandKey&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/KeyboardCommandKey.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MenuItem*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MenuItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;KeyboardCommandMapper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/KeyboardCommandMapper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MenuItem&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MenuItem.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/NewComponentMaker/NewComponentMaker.q.yml">quintessence/Hexagon/NewComponentMaker/NewComponentMaker.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">shell_command_has_executed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">last_executed_shell_response</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">path_to_executable</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_shell_response()</td>
</tr>
<tr>
  <td class="method">get_shell_response_lines()</td>
</tr>
<tr>
  <td class="private_method">build_shell_command()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/NewComponentMaker/Stage.q.yml">quintessence/Hexagon/NewComponentMaker/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Notifications/Notification.q.yml">quintessence/Hexagon/Notifications/Notification.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">body_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Notifications/NotificationFactory.q.yml">quintessence/Hexagon/Notifications/NotificationFactory.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">create_basic_notification(std::string body_text=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Notifications::Notification*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Notifications/Notification.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Notifications::Notification&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Notifications/Notification.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Notifications/Stage.q.yml">quintessence/Hexagon/Notifications/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">body_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component</td>
  <td class="property">Hexagon::Notifications::Notification</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Notifications::Notification&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Notifications/Notification.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ObjectivesLog/Objective.q.yml">quintessence/Hexagon/ObjectivesLog/Objective.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">completed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">mark_as_completed()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ObjectivesLog/ObjectiveRenderer.q.yml">quintessence/Hexagon/ObjectivesLog/ObjectiveRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">objective</td>
  <td class="property">Hexagon::ObjectivesLog::Objective*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">is_activated</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">obtain_primary_text_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ObjectivesLog::Objective*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ObjectivesLog/Objective.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ObjectivesLog::Objective&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ObjectivesLog/Objective.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ObjectivesLog/ObjectivesLog.q.yml">quintessence/Hexagon/ObjectivesLog/ObjectivesLog.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">objectives</td>
  <td class="property">std::vector&lt;Hexagon::ObjectivesLog::Objective&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">add_objective(Hexagon::ObjectivesLog::Objective objective={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::ObjectivesLog::Objective&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/ObjectivesLog/Objective.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ObjectivesLog::Objective&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ObjectivesLog/Objective.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ObjectivesLog/Stage.q.yml">quintessence/Hexagon/ObjectivesLog/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">objectives_log</td>
  <td class="property">Hexagon::ObjectivesLog::ObjectivesLog*</td>
</tr>
<tr>
  <td class="property">cursor_pos</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">infer_num_list_items()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ObjectivesLog::ObjectiveRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ObjectivesLog/ObjectiveRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ObjectivesLog::ObjectivesLog*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ObjectivesLog/ObjectivesLog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ObjectivesLog::ObjectivesLog&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ObjectivesLog/ObjectivesLog.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/OneLineInputBox/Renderer.q.yml">quintessence/Hexagon/OneLineInputBox/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">outline_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">user_input_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">lines</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">selections</td>
  <td class="property">std::vector&lt;CodeRange&gt;</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">place</td>
  <td class="property">placement3d</td>
</tr>
<tr>
  <td class="property">first_line_number</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">in_edit_mode</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">top_left_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">top_right_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bottom_left_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">bottom_right_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">change_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">is_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">draw_selections(int cell_width=1, int cell_height=1, int first_line_number=0)</td>
</tr>
<tr>
  <td class="method">get_primary_color()</td>
</tr>
<tr>
  <td class="method">get_user_input_text_color()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">get_lines_character_count()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeSelectionBoxRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeSelectionBoxRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::color&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeRange&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeRange.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/OneLineInputBox/Stage.q.yml">quintessence/Hexagon/OneLineInputBox/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">code_editor</td>
  <td class="property">:CodeEditor::CodeEditor</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_font_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">change_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">is_state_to_submitted_and_pending_destruction()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">code_editor_char_count()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::CodeEditor&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/CodeEditor.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:CodeEditor::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::OneLineInputBox::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/OneLineInputBox/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:OneLineInputBox::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/OneLineInputBox/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::StageInfoOverlay&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/StageInfoOverlay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeEditor::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::FileCategoryDecorator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/FileCategoryDecorator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Packet.q.yml">quintessence/Hexagon/Packet.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">searches_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">saves_count</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">calculate_score()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/PacketLogger.q.yml">quintessence/Hexagon/PacketLogger.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">PACKET_LOG_FOLDER_LOCATION</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">commit_message</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">searches_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">saves_count</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">score</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">currently_posted_objective</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">datetime</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">write_log_file()</td>
</tr>
<tr>
  <td class="method">generate_log_filename()</td>
</tr>
<tr>
  <td class="method">generate_log_file_contents()</td>
</tr>
<tr>
  <td class="method">generate_time_now_string()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;time&quot;, &quot;headers&quot;=&gt;[&quot;chrono&quot;, &quot;ctime&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::random_string&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Useful.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_put_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/PacketRenderer.q.yml">quintessence/Hexagon/PacketRenderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">packet</td>
  <td class="property">Hexagon::Packet*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">box_fill_color()</td>
</tr>
<tr>
  <td class="method">box_fill_opacity()</td>
</tr>
<tr>
  <td class="method">box_outline_color()</td>
</tr>
<tr>
  <td class="method">box_outline_opacity()</td>
</tr>
<tr>
  <td class="method">color_good()</td>
</tr>
<tr>
  <td class="method">color_failure()</td>
</tr>
<tr>
  <td class="method">color_approaching_failure()</td>
</tr>
<tr>
  <td class="method">color_warning()</td>
</tr>
<tr>
  <td class="method">color_neutral()</td>
</tr>
<tr>
  <td class="private_method">render_window()</td>
</tr>
<tr>
  <td class="private_method">render_text()</td>
</tr>
<tr>
  <td class="method">generate_top_left_little_bar_color()</td>
</tr>
<tr>
  <td class="method">generate_box_fill_color()</td>
</tr>
<tr>
  <td class="method">obtain_table_text_font()</td>
</tr>
<tr>
  <td class="method">obtain_primary_score_text_font()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Packet*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Packet.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Window&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Window.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_textf&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_font_line_height&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Packet&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Packet.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/PasteboardData.q.yml">quintessence/Hexagon/PasteboardData.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">store(std::string content=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">retrieve()</td>
</tr>
<tr>
  <td class="private_method">__replace(std::string str=&quot;&quot;, std::string from=&quot;&quot;, std::string to=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Powerbar/Powerbar.q.yml">quintessence/Hexagon/Powerbar/Powerbar.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">files_are_modified</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">files_are_staged</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">files_are_untracked</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">files_are_committed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">commits_are_in_sync_with_remote</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">focus_timer_started_at</td>
  <td class="property">std::time_t</td>
</tr>
<tr>
  <td class="property">focus_timer_duration_sec</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::time_t&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Powerbar/Renderer.q.yml">quintessence/Hexagon/Powerbar/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">powerbar</td>
  <td class="property">Hexagon::Powerbar::Powerbar*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">draw_state_boxes</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">draw_individual_rectangle(float x1=0.0f, float y1=0.0f, float x2=0.0f, float y2=0.0f, std::string text=&quot;[-]&quot;)</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::mix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_display_width&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_display_height&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Powerbar*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Powerbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Powerbar&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Powerbar.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Project.q.yml">quintessence/Hexagon/Project.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">layouts</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, Hexagon::Layout&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, Hexagon::Layout&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;, &quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Layout&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectComponentNavigator/ComponentSearcher.q.yml">quintessence/Hexagon/ProjectComponentNavigator/ComponentSearcher.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_root_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">search_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">convert_to_names(std::vector&lt;Blast::Project::Component&gt; components={})</td>
</tr>
<tr>
  <td class="method">convert_to_components(std::vector&lt;std::string&gt; names={})</td>
</tr>
<tr>
  <td class="method">component_names()</td>
</tr>
<tr>
  <td class="method">components_sorted_by_most_recent()</td>
</tr>
<tr>
  <td class="method">components()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::ComponentLister&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/ComponentLister.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::SimpleTextSearcher&quot;, &quot;headers&quot;=&gt;[&quot;Blast/SimpleTextSearcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Project::Component&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectComponentNavigator/EventController.q.yml">quintessence/Hexagon/ProjectComponentNavigator/EventController.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Hexagon::ProjectComponentNavigator::ProjectComponentNavigator*</td>
</tr>
<tr>
  <td class="property">event_dictionary</td>
  <td class="property">std::map&lt;std::string, std::function&lt;void(Hexagon::ProjectComponentNavigator::ProjectComponentNavigator&amp;)&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;void(ProjectComponentNavigator&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;, &quot;Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::ProjectComponentNavigator*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::ProjectComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ProjectComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.q.yml">quintessence/Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_position</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_position_static</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">nodes</td>
  <td class="property">std::vector&lt;Hexagon::Layout&gt;</td>
</tr>
<tr>
  <td class="property">mode</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">search_text</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">is_mode_navigating_list()</td>
</tr>
<tr>
  <td class="method">is_mode_typing_in_search_bar()</td>
</tr>
<tr>
  <td class="method">move_cursor_up()</td>
</tr>
<tr>
  <td class="method">move_cursor_down()</td>
</tr>
<tr>
  <td class="method">move_cursor_to_top()</td>
</tr>
<tr>
  <td class="method">current_selection_is_valid()</td>
</tr>
<tr>
  <td class="method">set_mode_to_navigating_list()</td>
</tr>
<tr>
  <td class="method">set_mode_to_typing_in_search_bar()</td>
</tr>
<tr>
  <td class="method">get_current_selection_label_or_empty_string()</td>
</tr>
<tr>
  <td class="method">refresh_list()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::Layout&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Layout&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Layout.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectComponentNavigator/Renderer.q.yml">quintessence/Hexagon/ProjectComponentNavigator/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stage</td>
  <td class="property">Hexagon::ProjectComponentNavigator::Stage*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_backfill_color</td>
  <td class="property">ALLEGRO_COLOR*</td>
</tr>
<tr>
  <td class="property">backfill_opacity</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR*</td>
</tr>
<tr>
  <td class="property">line_stroke_thickness</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">build_backfill_color()</td>
</tr>
<tr>
  <td class="private_method">build_text_color()</td>
</tr>
<tr>
  <td class="private_method">build_frame_color()</td>
</tr>
<tr>
  <td class="private_method">build_line_height()</td>
</tr>
<tr>
  <td class="private_method">draw_search_text_box()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">render_window_raw()</td>
</tr>
<tr>
  <td class="private_method">render_cursor_box_raw()</td>
</tr>
<tr>
  <td class="private_method">render_window_title_raw()</td>
</tr>
<tr>
  <td class="private_method">render_list_elements_raw()</td>
</tr>
<tr>
  <td class="private_method">render_list_clipping_arrows_raw(bool list_clipping_occurred_above=false, bool list_clipping_occurred_below=false)</td>
</tr>
<tr>
  <td class="method">render_raw()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;bool, bool&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sin&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::mix&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_circle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;FileSystemNode&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileSystemNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Stroke&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Stroke.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectComponentNavigator/SearchBar.q.yml">quintessence/Hexagon/ProjectComponentNavigator/SearchBar.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectComponentNavigator/Stage.q.yml">quintessence/Hexagon/ProjectComponentNavigator/Stage.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_root</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component</td>
  <td class="property">Hexagon::ProjectComponentNavigator::ProjectComponentNavigator</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">is_focused</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font</td>
  <td class="property">ALLEGRO_FONT*</td>
</tr>
<tr>
  <td class="property">cell_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cell_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">base_backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_keyboard_command_mapping()</td>
</tr>
<tr>
  <td class="method">build_local_events_dictionary()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_char_event(int keycode=0, int unichar=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">save_file()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::ProjectComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;void(ProjectComponentNavigator&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;, &quot;Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::EventController&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/EventController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;color::mix&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;, &quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cerr&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_circle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Blast::Project::Component&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;FileSystemNode&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileSystemNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::KeyboardCommandMapper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/KeyboardCommandMapper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::ComponentSearcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/ComponentSearcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Renderer&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Renderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shapes::Hexagon::Stroke&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Stroke.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ProjectComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectFactory.q.yml">quintessence/Hexagon/ProjectFactory.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">hexagon()</td>
</tr>
<tr>
  <td class="method">build_shopify_experts_conversations_system()</td>
</tr>
<tr>
  <td class="method">partner_performance_dashboard()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Project&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Project.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectFromYAML&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectFromYAML.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectFromYAML.q.yml">quintessence/Hexagon/ProjectFromYAML.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">source_yaml</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">load()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::LayoutFromYAML&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/LayoutFromYAML.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Project&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Project.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;YAML::Node&quot;, &quot;headers&quot;=&gt;[&quot;yaml-cpp/yaml.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/ProjectNavigator.q.yml">quintessence/Hexagon/ProjectNavigator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">config</td>
  <td class="property">Hexagon::System::Config*</td>
</tr>
<tr>
  <td class="property">menu_items</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">main_menu</td>
  <td class="property">Hexagon::Elements::ListMenu</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">set_menu_items(std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt; menu_items={})</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_frame()</td>
</tr>
<tr>
  <td class="method">main_menu_cursor_move_up()</td>
</tr>
<tr>
  <td class="method">main_menu_cursor_move_down()</td>
</tr>
<tr>
  <td class="method">main_menu_get_current_list_item_identifier()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">build_placeholder_menu_items()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Logo&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Logo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Profiler&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Profiler.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::DataTable&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/DataTable.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_allegro_version&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ListMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ListMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::TiledHexagonMotionEffect&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/TiledHexagonMotionEffect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Rails/ComponentLister.q.yml">quintessence/Hexagon/Rails/ComponentLister.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_root_directory</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">model_filenames()</td>
</tr>
<tr>
  <td class="method">controller_filenames()</td>
</tr>
<tr>
  <td class="method">test_filenames()</td>
</tr>
<tr>
  <td class="method">spec_factory_filenames()</td>
</tr>
<tr>
  <td class="method">spec_filenames()</td>
</tr>
<tr>
  <td class="private_method">get_recursive_list_of_files_in_folder(std::string fragment_folder_name=&quot;.&quot;, std::string fragment_extension=&quot;.*&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/RailsMinitestTestResultToCodeMessagePointConverter.q.yml">quintessence/Hexagon/RailsMinitestTestResultToCodeMessagePointConverter.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">rails_minitest_test_result</td>
  <td class="property">RailsMinitestTestResult</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">convert()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RailsMinitestTestResult&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RailsMinitestTestResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeMessagePoint&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeMessagePoint::type_t&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeMessagePoint.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/RailsTestOutputParser.q.yml">quintessence/Hexagon/RailsTestOutputParser.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">processed</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">source_test_output</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">test_result_lines</td>
  <td class="property">std::vector&lt;RailsMinitestTestResult&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">process()</td>
</tr>
<tr>
  <td class="method">get_test_result_lines()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cout&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;RailsMinitestTestResult&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/RailsMinitestTestResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;RailsMinitestTestResult&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/RailsMinitestTestResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RailsMinitestTestResult&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RailsMinitestTestResult.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/RegexStore.q.yml">quintessence/Hexagon/RegexStore.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">identifiers()</td>
</tr>
<tr>
  <td class="method">double_quoted_strings_with_escapes()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/RendererInterface.q.yml">quintessence/Hexagon/RendererInterface.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/RulersAndMeasurements/CodeEditorDimentions.q.yml">quintessence/Hexagon/RulersAndMeasurements/CodeEditorDimentions.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">calculate_max_half_surface_width(float surface_width=1.0f, float cell_width=1.0f, int num_columns=1)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Search/ComponentElasticsearchIndex.q.yml">quintessence/Hexagon/Search/ComponentElasticsearchIndex.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_index_name()</td>
</tr>
<tr>
  <td class="method">get_index_mapping()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Search/ComponentElasticsearchIndexer.q.yml">quintessence/Hexagon/Search/ComponentElasticsearchIndexer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">component</td>
  <td class="property">Blast::Project::Component*</td>
</tr>
<tr>
  <td class="property">index_name</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate_uid()</td>
</tr>
<tr>
  <td class="method">generate_index_shell_command()</td>
</tr>
<tr>
  <td class="method">import_or_update()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;nlohmann::json&quot;, &quot;headers&quot;=&gt;[&quot;lib/nlohmann/json.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component*&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Search/Elasticsearch/HealthChecker.q.yml">quintessence/Hexagon/Search/Elasticsearch/HealthChecker.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
<tr>
  <td class="method">get_health_check_shell_command()</td>
</tr>
<tr>
  <td class="method">is_up()</td>
</tr>
<tr>
  <td class="method">request_health()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RegexMatcher.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/Base.q.yml">quintessence/Hexagon/Shaders/Base.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">vertex_source_code</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">fragment_source_code</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/FlatColor.q.yml">quintessence/Hexagon/Shaders/FlatColor.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/Fun.q.yml">quintessence/Hexagon/Shaders/Fun.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="private_property">initialized</td>
  <td class="private_property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="method">set_texture_width(int width=1)</td>
</tr>
<tr>
  <td class="method">set_texture_height(int height=1)</td>
</tr>
<tr>
  <td class="method">set_nyan_cat_texture(ALLEGRO_BITMAP* nyan_cat_texture=nullptr)</td>
</tr>
<tr>
  <td class="method">set_time(float time=1)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/Smiley.q.yml">quintessence/Hexagon/Shaders/Smiley.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="method">set_texture_width(int width=1)</td>
</tr>
<tr>
  <td class="method">set_texture_height(int height=1)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/TexturedTruchet.q.yml">quintessence/Hexagon/Shaders/TexturedTruchet.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="method">set_texture_width(int width=1)</td>
</tr>
<tr>
  <td class="method">set_texture_height(int height=1)</td>
</tr>
<tr>
  <td class="method">set_nyan_cat_texture(ALLEGRO_BITMAP* nyan_cat_texture=nullptr)</td>
</tr>
<tr>
  <td class="method">set_time(float time=1)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/TiledHexagonMotionEffect.q.yml">quintessence/Hexagon/Shaders/TiledHexagonMotionEffect.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="method">set_texture_width(int width=1)</td>
</tr>
<tr>
  <td class="method">set_texture_height(int height=1)</td>
</tr>
<tr>
  <td class="method">set_nyan_cat_texture(ALLEGRO_BITMAP* nyan_cat_texture=nullptr)</td>
</tr>
<tr>
  <td class="method">set_time(float time=1)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/TruchetMaze.q.yml">quintessence/Hexagon/Shaders/TruchetMaze.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="method">set_texture_width(int width=1)</td>
</tr>
<tr>
  <td class="method">set_texture_height(int height=1)</td>
</tr>
<tr>
  <td class="method">set_time(float time=1)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/TruchetVine.q.yml">quintessence/Hexagon/Shaders/TruchetVine.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="method">set_texture_width(int width=1)</td>
</tr>
<tr>
  <td class="method">set_texture_height(int height=1)</td>
</tr>
<tr>
  <td class="method">set_time(float time=1)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shaders/TruchetVineSquiggle.q.yml">quintessence/Hexagon/Shaders/TruchetVineSquiggle.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">activate()</td>
</tr>
<tr>
  <td class="method">deactivate()</td>
</tr>
<tr>
  <td class="method">set_flat_color(ALLEGRO_COLOR flat_color={})</td>
</tr>
<tr>
  <td class="method">set_texture_width(int width=1)</td>
</tr>
<tr>
  <td class="method">set_texture_height(int height=1)</td>
</tr>
<tr>
  <td class="method">set_time(float time=1)</td>
</tr>
<tr>
  <td class="private_method">obtain_vertex_source()</td>
</tr>
<tr>
  <td class="private_method">obtain_fragment_source()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::Base&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shapes/Hexagon/Fill.q.yml">quintessence/Hexagon/Shapes/Hexagon/Fill.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shapes/Hexagon/Renderer.q.yml">quintessence/Hexagon/Shapes/Hexagon/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">x</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">y</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">radius</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">strokes</td>
  <td class="property">std::vector&lt;Shapes::Hexagon::Stroke&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Shapes::Hexagon::Stroke&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Shapes/Hexagon/Stroke.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;vec2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/vec2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::path2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/path2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sqrt&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Shapes::Hexagon::Stroke&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shapes/Hexagon/Stroke.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Shapes/Hexagon/Stroke.q.yml">quintessence/Hexagon/Shapes/Hexagon/Stroke.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">start</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">end</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">thickness</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">default_color()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;vec2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/vec2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;allegro_flare::path2d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/path2d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;sqrt&quot;, &quot;headers&quot;=&gt;[&quot;cmath&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/StageCollectionHelper.q.yml">quintessence/Hexagon/StageCollectionHelper.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">all()</td>
</tr>
<tr>
  <td class="method">get_all_stages_not_rendered_on_hud()</td>
</tr>
<tr>
  <td class="method">get_all_render_on_hud_stages()</td>
</tr>
<tr>
  <td class="method">count_code_editor_stages()</td>
</tr>
<tr>
  <td class="method">get_all_code_editor_stages()</td>
</tr>
<tr>
  <td class="method">get_all_advanced_code_editor_stages()</td>
</tr>
<tr>
  <td class="method">get_frontmost_advanced_code_editor_stage()</td>
</tr>
<tr>
  <td class="method">get_frontmost_code_editor_stage()</td>
</tr>
<tr>
  <td class="method">get_frontmost_git_commit_message_input_box()</td>
</tr>
<tr>
  <td class="method">is_frontmost_stage_a_regex_input_box()</td>
</tr>
<tr>
  <td class="method">get_frontmost_stage()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::GitCommitMessageInputBox::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/GitCommitMessageInputBox/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::CodeEditor::Stage *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::AdvancedCodeEditor::Stage *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::GitCommitMessageInputBox::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/GitCommitMessageInputBox/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/StageFactory.q.yml">quintessence/Hexagon/StageFactory.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">config</td>
  <td class="property">Hexagon::System::Config*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">hud_render_surface_projection_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">hud_render_surface_projection_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">obtain_base_text_color()</td>
</tr>
<tr>
  <td class="method">obtain_regex_temp_filename()</td>
</tr>
<tr>
  <td class="method">obtain_base_backfill_color()</td>
</tr>
<tr>
  <td class="method">obtain_component_navigator_font()</td>
</tr>
<tr>
  <td class="method">obtain_file_navigator_font()</td>
</tr>
<tr>
  <td class="method">obtain_global_font()</td>
</tr>
<tr>
  <td class="method">obtain_git_commit_message_box_font()</td>
</tr>
<tr>
  <td class="method">obtain_display_default_width()</td>
</tr>
<tr>
  <td class="method">obtain_display_default_height()</td>
</tr>
<tr>
  <td class="method">obtain_dark_mode()</td>
</tr>
<tr>
  <td class="method">create_notification(std::string body_text=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">create_file_navigator(std::string project_directory=&quot;/Users/markoates/Repos/hexagon/&quot;)</td>
</tr>
<tr>
  <td class="method">create_class_brief_menu(std::string title=&quot;Untitled Menu&quot;, std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt; items={{&quot;Foo&quot;, &quot;foo&quot;}, {&quot;Bar&quot;, &quot;bar&quot;}, {&quot;Baz&quot;, &quot;baz&quot;}})</td>
</tr>
<tr>
  <td class="method">create_chat_gpt_chat()</td>
</tr>
<tr>
  <td class="method">create_component_relations_navigator(std::string focused_component_name=&quot;&quot;, std::string current_project_directory=&quot;&quot;, bool simplify_relatives_names=true)</td>
</tr>
<tr>
  <td class="method">create_fancy()</td>
</tr>
<tr>
  <td class="method">create_drawing_box()</td>
</tr>
<tr>
  <td class="method">create_missing_file(std::string filename=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">create_advanced_code_editor(std::string filename=&quot;untitled.txt&quot;, int num_columns=123, int num_rows=70)</td>
</tr>
<tr>
  <td class="method">create_code_editor(std::string filename=&quot;&quot;, std::string file_category=&quot;undefined&quot;)</td>
</tr>
<tr>
  <td class="method">create_delete_multiplex_menu(Hexagon::AdvancedCodeEditor::Stage* advanced_code_editor_stage=nullptr, Hexagon::System::System* system=nullptr)</td>
</tr>
<tr>
  <td class="method">create_change_multiplex_menu(Hexagon::AdvancedCodeEditor::Stage* advanced_code_editor_stage=nullptr, Hexagon::System::System* system=nullptr)</td>
</tr>
<tr>
  <td class="method">create_goto_multiplex_menu(Hexagon::AdvancedCodeEditor::Stage* advanced_code_editor_stage=nullptr, Hexagon::System::System* system=nullptr)</td>
</tr>
<tr>
  <td class="method">create_regex_input_box_modal()</td>
</tr>
<tr>
  <td class="method">create_git_commit_message_box()</td>
</tr>
<tr>
  <td class="method">create_advanced_component_navigator(std::string project_directory=&quot;/Users/markoates/Repos/hexagon/&quot;, std::string initial_search_text=&quot;&quot;)</td>
</tr>
<tr>
  <td class="method">create_project_navigator(std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt; project_menu_items={})</td>
</tr>
<tr>
  <td class="method">get_current_display()</td>
</tr>
<tr>
  <td class="method">build_centered_on_hud_initial_place(float width=0, float height=0)</td>
</tr>
<tr>
  <td class="method">build_centered_in_world_initial_place(float width=0, float height=0)</td>
</tr>
<tr>
  <td class="private_method">build_file_navigator_initial_place()</td>
</tr>
<tr>
  <td class="private_method">build_multiplex_menu_initial_place()</td>
</tr>
<tr>
  <td class="private_method">build_git_commit_message_input_box_initial_place()</td>
</tr>
<tr>
  <td class="private_method">build_regex_input_box_initial_place()</td>
</tr>
<tr>
  <td class="method">build_full_multiplex_menu()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::mix&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ObjectivesLog::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ObjectivesLog/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MultiplexMenu::MultiplexMenuPage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MultiplexMenu/MultiplexMenuPage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Fancy::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Fancy/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::MissingFile::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/MissingFile/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::FileNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::OneLineInputBox::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/OneLineInputBox/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::GitCommitMessageInputBox::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/GitCommitMessageInputBox/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Notifications::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Notifications/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::UI::LittleMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/UI/LittleMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ComponentRelationsNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ComponentRelationsNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ComponentRelationsNavigator::ComponentRelations&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ComponentRelationsNavigator/ComponentRelations.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::UI::DrawingBox&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/UI/DrawingBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_current_display&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_text_width&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_font_line_height&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ChatGPTIntegration::Chat::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ChatGPTIntegration/Chat/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/SymlinkToucher.q.yml">quintessence/Hexagon/SymlinkToucher.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">touch_if_symlink()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::SymlinkChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/SymlinkChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar.q.yml">quintessence/Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">current_project_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">powerbar</td>
  <td class="property">Hexagon::Powerbar::Powerbar*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Powerbar*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Powerbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Git::Modified&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Git/Modified.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Git::Untracked&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Git/Untracked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Git::Staged&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Git/Staged.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Powerbar&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Powerbar.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar.q.yml">quintessence/Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">repo_name</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">repos_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">powerbar</td>
  <td class="property">Hexagon::Powerbar::Powerbar*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Powerbar*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Powerbar.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Git::RemoteSyncChecker&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Git/RemoteSyncChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Powerbar::Powerbar&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Powerbar/Powerbar.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/CreateCodeEditorStageFromFilename.q.yml">quintessence/Hexagon/System/Action/CreateCodeEditorStageFromFilename.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">display_default_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">display_default_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">stage_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">stage_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;*</td>
</tr>
<tr>
  <td class="property">stage_factory</td>
  <td class="property">Hexagon::StageFactory*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;*&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:read_file&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/util.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/CreateThreeSplitFromComponent.q.yml">quintessence/Hexagon/System/Action/CreateThreeSplitFromComponent.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component</td>
  <td class="property">Blast::Project::Component</td>
</tr>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;&amp;</td>
</tr>
<tr>
  <td class="property">stage_factory</td>
  <td class="property">Hexagon::StageFactory*</td>
</tr>
<tr>
  <td class="property">display_default_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">display_default_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">code_editor_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">code_editor_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">dummy_stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;</td>
</tr>
<tr>
  <td class="property">create_as_advanced_code_editor</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">place_stage(std::string filename=&quot;/foobar.txt&quot;, std::string file_category=&quot;undefined&quot;, float x=0.0, float align_x=0.0)</td>
</tr>
<tr>
  <td class="method">generate_header_filename()</td>
</tr>
<tr>
  <td class="method">generate_source_filename()</td>
</tr>
<tr>
  <td class="method">generate_test_filename()</td>
</tr>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedCodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedCodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;php::file_get_contents&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful_php.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ProjectComponentFilenameGenerator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ProjectComponentFilenameGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/CreateTwoSplitFromComponent.q.yml">quintessence/Hexagon/System/Action/CreateTwoSplitFromComponent.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">display_default_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">display_default_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;&amp;</td>
</tr>
<tr>
  <td class="property">stage_factory</td>
  <td class="property">Hexagon::StageFactory*</td>
</tr>
<tr>
  <td class="property">dummy_stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;</td>
</tr>
<tr>
  <td class="property">code_editor_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">code_editor_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">create_as_advanced_code_editor</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::string&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;NcursesArt::ProjectFilenameGenerator&quot;, &quot;headers&quot;=&gt;[&quot;NcursesArt/ProjectFilenameGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileExistenceChecker&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileExistenceChecker.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;read_file&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/util.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/DestroyAllCodeEditorStages.q.yml">quintessence/Hexagon/System/Action/DestroyAllCodeEditorStages.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;&amp;</td>
</tr>
<tr>
  <td class="property">dummy_stages</td>
  <td class="property">std::vector&lt;StageInterface *&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&amp;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;StageInterface *&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/OpenDocumentationInBrowser.q.yml">quintessence/Hexagon/System/Action/OpenDocumentationInBrowser.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">DOCUMENTATION_FILENAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">project_path</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
<tr>
  <td class="method">build_shell_command_to_open_browser()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Action/SendMessageToDaemusToBuild.q.yml">quintessence/Hexagon/System/Action/SendMessageToDaemusToBuild.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">execute()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:Action&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Action.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::FileCreator&quot;, &quot;headers&quot;=&gt;[&quot;Blast/FileCreator.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Config.q.yml">quintessence/Hexagon/System/Config.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">INITIAL_DISPLAY_WIDTH_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">INITIAL_DISPLAY_HEIGHT_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DEFAULT_NAVIGATOR_DIRECTORY_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DOMAIN_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">REGEX_TEMP_FILENAME_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">CLIPBOARD_TEMP_FILENAME_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">FILE_NAVIGATOR_SELECTION_FILENAME_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">MAKE_COMMAND_FILENAME_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">FOCUSED_COMPONENT_FILENAME_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">FONT_BIN_PATH_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">BITMAP_BIN_PATH_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">DARK_MODE_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">OBJECTIVE_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">HUD_SHOW_FOCUS_TIMER_BAR_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">FULLSCREEN_KEY</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">INITIAL_BASELINE_CAMERA_STEPBACK_KEY</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">config_filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">config</td>
  <td class="property">AllegroFlare::Config</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="private_method">validate_initialized(std::string function_name=&quot;[unnamed_function]&quot;)</td>
</tr>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">reload()</td>
</tr>
<tr>
  <td class="method">get_initial_display_width()</td>
</tr>
<tr>
  <td class="method">get_initial_display_height()</td>
</tr>
<tr>
  <td class="method">get_default_navigator_directory()</td>
</tr>
<tr>
  <td class="method">get_regex_temp_filename()</td>
</tr>
<tr>
  <td class="method">get_clipboard_temp_filename()</td>
</tr>
<tr>
  <td class="method">get_file_navigator_selection_filename()</td>
</tr>
<tr>
  <td class="method">get_make_command_filename()</td>
</tr>
<tr>
  <td class="method">get_focused_component_filename()</td>
</tr>
<tr>
  <td class="method">get_font_bin_path()</td>
</tr>
<tr>
  <td class="method">get_bitmap_bin_path()</td>
</tr>
<tr>
  <td class="method">get_initial_baseline_camera_stepback()</td>
</tr>
<tr>
  <td class="method">is_dark_mode()</td>
</tr>
<tr>
  <td class="method">get_objective()</td>
</tr>
<tr>
  <td class="method">get_current_project_domain()</td>
</tr>
<tr>
  <td class="method">is_fullscreen()</td>
</tr>
<tr>
  <td class="method">get_hud_show_focus_timer_bar()</td>
</tr>
<tr>
  <td class="method">get_backfill_color()</td>
</tr>
<tr>
  <td class="method">get_base_text_color()</td>
</tr>
<tr>
  <td class="method">get_backfill_opacity()</td>
</tr>
<tr>
  <td class="private_method">resource_path(std::vector&lt;std::string&gt; components={}, std::string filename={})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ColorKit&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ColorKit.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Config&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Config.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/EventController.q.yml">quintessence/Hexagon/System/EventController.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">system</td>
  <td class="property">Hexagon::System::System*</td>
</tr>
<tr>
  <td class="property">function_mapping</td>
  <td class="property">std::map&lt;std::string, std::function&lt;bool(Hexagon::System::System&amp;)&gt;&gt;</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_default_function_mapping()</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;[this-event-name-is-a-default-that-represents-undefined]&quot;)</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT* event_ptr=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::KeyboardCommandMapper&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/KeyboardCommandMapper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;bool(Hexagon::System::System&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;add_notification&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/shared_globals.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::ProjectComponentNavigator::ProjectComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ProjectComponentNavigator/ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ProjectComponentNavigator&quot;, &quot;headers&quot;=&gt;[&quot;ProjectComponentNavigator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/System/Renderer.q.yml">quintessence/Hexagon/System/Renderer.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">system</td>
  <td class="property">Hexagon::System::System*</td>
</tr>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">backfill_color</td>
  <td class="property">ALLEGRO_COLOR*</td>
</tr>
<tr>
  <td class="property">base_text_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="private_method">draw_focused_frame(StageInterface* stage=nullptr)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;global::profiler&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/shared_globals.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;NOTIFICATION_FILE_IS_UNSAVED&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/shared_globals.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_clear_to_color&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::FileNavigator::Stage*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Window&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Window.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageCollectionHelper&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageCollectionHelper.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::CodeEditor::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/CodeEditor/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::AdvancedComponentNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/AdvancedComponentNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::FileNavigator::Stage&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/FileNavigator/Stage.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::System&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/System.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Testing/ClangBuildOutputParser.q.yml">quintessence/Hexagon/Testing/ClangBuildOutputParser.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">clang_build_run_output</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">warnings_errors_and_notes</td>
  <td class="property">std::vector&lt;Hexagon::Testing::ClangBuildOutputResult&gt;</td>
</tr>
<tr>
  <td class="private_property">warnings_errors_and_notes_parsed</td>
  <td class="private_property">bool</td>
</tr>
<tr>
  <td class="property">error_messages_during_parsing</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="private_property">lines</td>
  <td class="private_property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="private_property">lines_parsed</td>
  <td class="private_property">bool</td>
</tr>
<tr>
  <td class="property">num_warnings_errors_generated_line</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="private_property">num_warnings_errors_generated_line_parsed</td>
  <td class="private_property">bool</td>
</tr>
<tr>
  <td class="property">NUM_WARNINGS_ERRORS_GENERATED_REGEX</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">WARNING_OR_ERROR_REGEX</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">parsed</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">parse()</td>
</tr>
<tr>
  <td class="method">discard_irrelevant_lines()</td>
</tr>
<tr>
  <td class="method">parse_split_lines()</td>
</tr>
<tr>
  <td class="method">parse_warnings_errors_and_notes()</td>
</tr>
<tr>
  <td class="method">parse_num_warnings_errors_generated_line()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::Testing::ClangBuildOutputResult&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Testing/ClangBuildOutputResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Testing::ClangBuildOutputResult&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Testing/ClangBuildOutputResult.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Testing/ClangBuildOutputResult.q.yml">quintessence/Hexagon/Testing/ClangBuildOutputResult.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">message_line</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">body</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">type</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">line_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">column_num</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">message</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">parsed_from_test_dump_line_num</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build_from_message_line(std::string line=&quot;[unset-line]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Testing::ClangBuildOutputResult&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Testing/ClangBuildOutputResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;atoi&quot;, &quot;headers&quot;=&gt;[&quot;cstdlib&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Testing/ComponentTestRunner.q.yml">quintessence/Hexagon/Testing/ComponentTestRunner.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">project_root</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">component_name</td>
  <td class="property"></td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate_make_run_test_command()</td>
</tr>
<tr>
  <td class="method">run()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::Project::Component&quot;, &quot;headers&quot;=&gt;[&quot;Blast/Project/Component.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Testing/GoogleTestRunOutputParser.q.yml">quintessence/Hexagon/Testing/GoogleTestRunOutputParser.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">google_test_run_output</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">parsed_test_results</td>
  <td class="property">std::vector&lt;Hexagon::Testing::GoogleTestRunTestResult&gt;</td>
</tr>
<tr>
  <td class="property">error_messages_during_parsing</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">RESULT_OK</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">RESULT_FAILED</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">parse()</td>
</tr>
<tr>
  <td class="private_method">extract_test_class_name_and_test_description(std::string line=&quot;&quot;)</td>
</tr>
<tr>
  <td class="private_method">extract_ms(std::string line=&quot;&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;debugging&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;Hexagon::Testing::GoogleTestRunTestResult&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;Hexagon/Testing/GoogleTestRunTestResult.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;RegexMatcher&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/RegexMatcher.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;char*&quot;, &quot;headers&quot;=&gt;[]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Testing::GoogleTestRunTestResult&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Testing/GoogleTestRunTestResult.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/Testing/GoogleTestRunTestResult.q.yml">quintessence/Hexagon/Testing/GoogleTestRunTestResult.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">test_class_name</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">test_description</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">result</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">duration_msec</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">output_body</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">failure_message</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">infer_failed()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/TitleScreen.q.yml">quintessence/Hexagon/TitleScreen.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">config</td>
  <td class="property">Hexagon::System::Config*</td>
</tr>
<tr>
  <td class="property">main_menu</td>
  <td class="property">Hexagon::Elements::ListMenu</td>
</tr>
<tr>
  <td class="property">surface_width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">surface_height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">main_menu_cursor_move_up()</td>
</tr>
<tr>
  <td class="method">main_menu_cursor_move_down()</td>
</tr>
<tr>
  <td class="method">main_menu_get_current_list_item_identifier()</td>
</tr>
<tr>
  <td class="method">draw_hexagon_logo_and_wait_for_keypress()</td>
</tr>
<tr>
  <td class="method">draw_menu()</td>
</tr>
<tr>
  <td class="method">render_profiler_graph(AllegroFlare::Profiler* profiler=nullptr, ALLEGRO_FONT* font=nullptr)</td>
</tr>
<tr>
  <td class="method">build_allegro_version_string()</td>
</tr>
<tr>
  <td class="method">append_project_path_to_config_file_and_reload_injected_config()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::ofstream&quot;, &quot;headers&quot;=&gt;[&quot;fstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Logo&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Logo.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Profiler&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Profiler.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Profiler*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Profiler.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::DataTable&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/DataTable.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_allegro_version&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ListMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ListMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Shaders::TiledHexagonMotionEffect&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Shaders/TiledHexagonMotionEffect.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/UI/DrawingBox.q.yml">quintessence/Hexagon/UI/DrawingBox.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">surface</td>
  <td class="property">ALLEGRO_BITMAP*</td>
</tr>
<tr>
  <td class="property">stroking</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">erasing</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">pointer_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">pointer_y</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="private_property">pen_opacity</td>
  <td class="private_property">float</td>
</tr>
<tr>
  <td class="private_property">pen_max_thickness</td>
  <td class="private_property">float</td>
</tr>
<tr>
  <td class="private_property">pen_color</td>
  <td class="private_property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">events_dictionary</td>
  <td class="property">std::map&lt;std::string, std::function&lt;bool(Hexagon::UI::DrawingBox&amp;)&gt;&gt;</td>
</tr>
<tr>
  <td class="property">SAVE_SURFACE_TO_DESKTOP_WITH_AUTOGENERATED_NAME</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">SET_DEFAULT_BRUSH</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">SET_RED_DRAFT_BRUSH</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="method">obtain_eurostile_title_font()</td>
</tr>
<tr>
  <td class="method">obtain_info_font()</td>
</tr>
<tr>
  <td class="private_method">draw_help_text()</td>
</tr>
<tr>
  <td class="private_method">draw_title_text()</td>
</tr>
<tr>
  <td class="private_method">draw_crosshair()</td>
</tr>
<tr>
  <td class="method">destroy()</td>
</tr>
<tr>
  <td class="private_method">build_default_function_mapping()</td>
</tr>
<tr>
  <td class="private_method">save_surface_to_desktop_with_autogenerated_name()</td>
</tr>
<tr>
  <td class="private_method">set_default_brush()</td>
</tr>
<tr>
  <td class="private_method">set_red_draft_brush()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ListMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ListMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringJoiner&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringJoiner.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::color::color&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Color.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::Window&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/Window.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_line&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::map&lt;std::string, std::function&lt;bool(Hexagon::UI::DrawingBox&amp;)&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;map&quot;, &quot;string&quot;, &quot;functional&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;random_string&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/useful.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_save_bitmap&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_image_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_image.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;TimestampGenerator&quot;, &quot;headers&quot;=&gt;[&quot;TimestampGenerator.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_BITMAP&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::UI::DrawingBox&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/UI/DrawingBox.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::function&quot;, &quot;headers&quot;=&gt;[&quot;functional&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/UI/LittleMenu.q.yml">quintessence/Hexagon/UI/LittleMenu.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">a_default_empty_event</td>
  <td class="property">ALLEGRO_EVENT</td>
</tr>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">items</td>
  <td class="property">std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;</td>
</tr>
<tr>
  <td class="property">menu</td>
  <td class="property">Hexagon::Elements::ListMenu</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">initialize()</td>
</tr>
<tr>
  <td class="method">render()</td>
</tr>
<tr>
  <td class="method">process_event(ALLEGRO_EVENT&amp; event=get_a_default_empty_event_ref())</td>
</tr>
<tr>
  <td class="method">process_local_event(std::string event_name=&quot;&quot;, ActionData action_data=ActionData())</td>
</tr>
<tr>
  <td class="private_method">emit_submission()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;StageInterface&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageInterface.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin*&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::Elements::ListMenu&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/Elements/ListMenu.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ActionData&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/ActionData.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::tuple&lt;std::string, std::string&gt;&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;tuple&quot;, &quot;string&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&amp;&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Hexagon/WordRangesFinder.q.yml">quintessence/Hexagon/WordRangesFinder.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">line_of_text</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">cursor_pos</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">find_ranges()</td>
</tr>
<tr>
  <td class="method">find_word_char_ranges()</td>
</tr>
<tr>
  <td class="method">find_non_word_char_ranges()</td>
</tr>
<tr>
  <td class="method">find_whitespace_char_ranges()</td>
</tr>
<tr>
  <td class="method">is_valid(std::pair&lt;int, int&gt; word_range={0, 0})</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;int, int&gt;&quot;, &quot;headers&quot;=&gt;[&quot;utility&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml">quintessence/NcursesArt/GithubRepoStatusFetcher.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">last_captured_output_from_status_request</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_status_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_pull_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_branch_count_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_current_branch_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_remote_branch_names_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">component_quintessence_filenames_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">git_current_staged_files_command</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">repo_name</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">repos_directory</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">only_poll_once</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">status_polled</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">local_repo_exists()</td>
</tr>
<tr>
  <td class="method">has_file_changes()</td>
</tr>
<tr>
  <td class="method">has_untracked_files()</td>
</tr>
<tr>
  <td class="method">is_the_repo_in_sync_with_remote()</td>
</tr>
<tr>
  <td class="method">is_the_local_repo_ahead()</td>
</tr>
<tr>
  <td class="method">is_the_local_repo_behind()</td>
</tr>
<tr>
  <td class="method">get_branch_count()</td>
</tr>
<tr>
  <td class="method">get_branch_names_at_remote()</td>
</tr>
<tr>
  <td class="method">is_current_branch_master()</td>
</tr>
<tr>
  <td class="method">get_current_branch_name_command()</td>
</tr>
<tr>
  <td class="method">get_pull_command()</td>
</tr>
<tr>
  <td class="method">get_status_command()</td>
</tr>
<tr>
  <td class="method">get_current_staged_files_command()</td>
</tr>
<tr>
  <td class="method">get_current_staged_files()</td>
</tr>
<tr>
  <td class="method">get_current_branch_name()</td>
</tr>
<tr>
  <td class="method">get_quintessence_filenames()</td>
</tr>
<tr>
  <td class="method">have_the_local_and_remote_repos_diverged()</td>
</tr>
<tr>
  <td class="method">last_captured_output_from_status_request_contains_string(std::string string_to_find=)</td>
</tr>
<tr>
  <td class="method">poll_status()</td>
</tr>
<tr>
  <td class="method">execute_command(std::string command=)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::StringSplitter&quot;, &quot;headers&quot;=&gt;[&quot;Blast/StringSplitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::String::Trimmer&quot;, &quot;headers&quot;=&gt;[&quot;Blast/String/Trimmer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::stringstream&quot;, &quot;headers&quot;=&gt;[&quot;sstream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::sort&quot;, &quot;headers&quot;=&gt;[&quot;algorithm&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::cerr&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::endl&quot;, &quot;headers&quot;=&gt;[&quot;iostream&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Blast::ShellCommandExecutorWithCallback&quot;, &quot;headers&quot;=&gt;[&quot;Blast/ShellCommandExecutorWithCallback.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::vector&lt;std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;vector&quot;, &quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/NcursesArt/ProjectComponentBasenameExtractor.q.yml">quintessence/NcursesArt/ProjectComponentBasenameExtractor.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">filename</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">identify_file_type()</td>
</tr>
<tr>
  <td class="method">is_identifiable_component()</td>
</tr>
<tr>
  <td class="method">identify_component_basename()</td>
</tr>
<tr>
  <td class="method">extract_component()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;std::pair&lt;std::string, std::string&gt;&quot;, &quot;headers&quot;=&gt;[&quot;string&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/NcursesArt/ProjectFilenameGenerator.q.yml">quintessence/NcursesArt/ProjectFilenameGenerator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">basename</td>
  <td class="property"></td>
</tr>
<tr>
  <td class="property">underscores</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate_quintessence_filename()</td>
</tr>
<tr>
  <td class="method">generate_source_filename()</td>
</tr>
<tr>
  <td class="method">generate_header_filename()</td>
</tr>
<tr>
  <td class="method">generate_test_src_filename()</td>
</tr>
<tr>
  <td class="method">generate_example_src_filename()</td>
</tr>
<tr>
  <td class="method">generate_obj_binary()</td>
</tr>
<tr>
  <td class="method">generate_test_binary()</td>
</tr>
<tr>
  <td class="method">generate_example_binary()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Testing/WithAllegroRenderingFixture.q.yml">quintessence/Testing/WithAllegroRenderingFixture.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">display</td>
  <td class="property">ALLEGRO_DISPLAY*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
<tr>
  <td class="method">get_any_font()</td>
</tr>
<tr>
  <td class="method">build_centered_placement(float width=0.0f, float height=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_primitives_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT*&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;placement3d&quot;, &quot;headers&quot;=&gt;[&quot;allegro_flare/placement3d.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_DISPLAY&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/Testing/WithStageFactoryFixture.q.yml">quintessence/Testing/WithStageFactoryFixture.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">config</td>
  <td class="property">Hexagon::System::Config</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin</td>
</tr>
<tr>
  <td class="property">stage_factory</td>
  <td class="property">Hexagon::StageFactory</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">SetUp()</td>
</tr>
<tr>
  <td class="method">TearDown()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_ttf_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_ttf.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_init_font_addon&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::System::Config&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/System/Config.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Hexagon::StageFactory*&quot;, &quot;headers&quot;=&gt;[&quot;Hexagon/StageFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;:&quot;:testing::Test&quot;, &quot;headers&quot;=&gt;[&quot;gtest/gtest.h&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/TimestampGenerator.q.yml">quintessence/TimestampGenerator.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">get_current_time()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;X&quot;, &quot;headers&quot;=&gt;[&quot;ctime&quot;, &quot;iostream&quot;, &quot;sstream&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="quintessence/TreeBuilder.q.yml">quintessence/TreeBuilder.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">build()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<ul>
  <div class="component">
    <h3 id="tests/fixtures/FixtureProject/quintessence/FixtureObjectThing.q.yml">tests/fixtures/FixtureProject/quintessence/FixtureObjectThing.q.yml</h3>
    <h4>Overview<h4>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">foobar</td>
  <td class="property">std::string</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">generate_two_foobars()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<p>This class contains no dependencies</p>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "Hexagon/System/Config": [
    "ApplicationController",
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/Hud",
    "Hexagon/ProjectNavigator",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/TitleScreen",
    "Hexagon/TitleScreen",
    "Testing/WithStageFactoryFixture"
  ],
  "Hexagon/TitleScreen": [
    "ApplicationController"
  ],
  "al_get_allegro_version": [
    "ApplicationController",
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen"
  ],
  "Motion": [
    "ApplicationController"
  ],
  "Hexagon/Shaders/TiledHexagonMotionEffect": [
    "ApplicationController",
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen"
  ],
  "Hexagon/System/System": [
    "ApplicationController",
    "ApplicationController",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/System/EventController",
    "Hexagon/System/EventController",
    "Hexagon/System/Renderer",
    "Hexagon/System/Renderer"
  ],
  "Hexagon/System/Renderer": [
    "ApplicationController"
  ],
  "ALLEGRO_EVENT_SOURCE": [
    "ApplicationController"
  ],
  "ALLEGRO_EVENT": [
    "ApplicationController",
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/Fancy/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/NewComponentMaker/Stage",
    "Hexagon/Notifications/Stage",
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/ProjectNavigator",
    "Hexagon/System/EventController",
    "Hexagon/System/EventController",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/LittleMenu"
  ],
  "al_init": [
    "ApplicationController",
    "Testing/WithStageFactoryFixture"
  ],
  "al_init_font_addon": [
    "ApplicationController",
    "Testing/WithStageFactoryFixture"
  ],
  "al_init_ttf_addon": [
    "ApplicationController",
    "Testing/WithAllegroRenderingFixture",
    "Testing/WithStageFactoryFixture"
  ],
  "al_init_image_addon": [
    "ApplicationController"
  ],
  "al_init_primitives_addon": [
    "ApplicationController",
    "Testing/WithAllegroRenderingFixture"
  ],
  "Blast/FileExistenceChecker": [
    "ApplicationController",
    "Hexagon/ASTTraverser",
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ChatGPTIntegration/Chat/LogView",
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/Elements/FilePixelPreviewCreator",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/ProjectFactory",
    "Hexagon/SymlinkToucher",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent"
  ],
  "global": [
    "ApplicationController"
  ],
  "ALLEGRO_DISPLAY": [
    "ApplicationController",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/Elements/CheckTextureGenerator",
    "Hexagon/Elements/CheckTextureGenerator",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/Hud",
    "Hexagon/Hud",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MissingFile/Stage",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/System/Renderer",
    "Hexagon/System/Renderer",
    "Testing/WithAllegroRenderingFixture",
    "Testing/WithAllegroRenderingFixture"
  ],
  "ALLEGRO_EVENT_QUEUE": [
    "ApplicationController"
  ],
  "ALLEGRO_TIMER": [
    "ApplicationController"
  ],
  "std/find_if": [
    "Blast/String/Trimmer"
  ],
  "nlohmann/json": [
    "Hexagon/ASTTraverser",
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader",
    "Hexagon/Search/ComponentElasticsearchIndexer"
  ],
  "std/ifstream": [
    "Hexagon/ASTTraverser"
  ],
  "Hexagon/DirtyGrid": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/DirtyGrid"
  ],
  "Blast/StringSplitter": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor",
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator",
    "Hexagon/AdvancedComponentNavigator/ComponentSearcher",
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ComponentDependencyFileParser",
    "Hexagon/Elements/FilePixelPreviewCreator",
    "Hexagon/Git/Modified",
    "Hexagon/Git/Staged",
    "Hexagon/Git/Untracked",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/NewComponentMaker/NewComponentMaker",
    "Hexagon/NewComponentMaker/Stage",
    "Hexagon/Rails/ComponentLister",
    "Hexagon/RailsTestOutputParser",
    "Hexagon/StageFactory",
    "Hexagon/Testing/ClangBuildOutputParser",
    "Hexagon/Testing/ClangBuildOutputResult",
    "Hexagon/Testing/GoogleTestRunOutputParser",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "Hexagon/AdvancedCodeEditor/Cursor": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor",
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/ChatGPTIntegration/Chat/InputBox",
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "RegexMatcher": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/RailsTestOutputParser",
    "Hexagon/Search/Elasticsearch/HealthChecker",
    "Hexagon/Testing/GoogleTestRunOutputParser"
  ],
  "std/max": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor",
    "Hexagon/CodeRangeExtractor"
  ],
  "std/reverse": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor"
  ],
  "std/begin": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor"
  ],
  "std/end": [
    "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor"
  ],
  "Hexagon/AdvancedCodeEditor/Stage": [
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/System/Action/CreateThreeSplitFromComponent"
  ],
  "AllegroFlare/KeyboardCommandMapper": [
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/System/EventController"
  ],
  "ActionData": [
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/EventController",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/Fancy/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/NewComponentMaker/Stage",
    "Hexagon/Notifications/Stage",
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/ProjectComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/ProjectNavigator",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/LittleMenu"
  ],
  "ALLEGRO_EVENT&": [
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/Fancy/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/NewComponentMaker/Stage",
    "Hexagon/Notifications/Stage",
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/LittleMenu"
  ],
  "std/map<std/string, std/function<void(Hexagon/AdvancedCodeEditor/Stage&)>>": [
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "std/function": [
    "Hexagon/AdvancedCodeEditor/EventController",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/EventController",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/System/EventController",
    "Hexagon/UI/DrawingBox"
  ],
  "Hexagon/WordRangesFinder": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "std/vector<CodeRange>": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter",
    "Hexagon/AdvancedCodeEditor/Selection",
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Hexagon/Elements/TextMesh": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "std/vector<Hexagon/AdvancedCodeEditor/Selection>": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Hexagon/AdvancedCodeEditor/Selection": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "std/vector<std/string>": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedComponentNavigator/ComponentSearcher",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/CodeRangeExtractor",
    "Hexagon/CodeSelectionBoxRenderer",
    "Hexagon/DirtyGrid",
    "Hexagon/Elements/TextPixelPreviewCreator",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/ComponentSearcher",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "ALLEGRO_COLOR": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/ChatGPTIntegration/Author",
    "Hexagon/CodeEditor/CursorRenderer",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/CodeSelectionBoxRenderer",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/Elements/BitmapGridMesh",
    "Hexagon/Elements/BitmapGridRenderSurface",
    "Hexagon/Elements/ColorKit",
    "Hexagon/Elements/DataTable",
    "Hexagon/Elements/DynamicGridMesh",
    "Hexagon/Elements/FontedTextGrid",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/ListMenu",
    "Hexagon/Elements/Pill",
    "Hexagon/Elements/SingleBlockBarGraph",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/TextGrid",
    "Hexagon/Elements/TextMesh",
    "Hexagon/Elements/Window",
    "Hexagon/Fancy/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/Forms/Fun",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/Hud",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/Logo",
    "Hexagon/OneLineInputBox/Renderer",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/PacketRenderer",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/Shaders/FlatColor",
    "Hexagon/Shaders/Fun",
    "Hexagon/Shaders/Smiley",
    "Hexagon/Shaders/TexturedTruchet",
    "Hexagon/Shaders/TiledHexagonMotionEffect",
    "Hexagon/Shaders/TruchetMaze",
    "Hexagon/Shaders/TruchetVine",
    "Hexagon/Shaders/TruchetVineSquiggle",
    "Hexagon/Shapes/Hexagon/Renderer",
    "Hexagon/Shapes/Hexagon/Stroke",
    "Hexagon/StageFactory",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/System/Config",
    "Hexagon/System/Renderer",
    "Hexagon/System/Renderer",
    "Hexagon/UI/DrawingBox"
  ],
  "ALLEGRO_FONT": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/ChatGPTIntegration/Chat/ConversationView",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/CodeEditor/CachedLineRenderer",
    "Hexagon/CodeEditor/CachedLineRenderer",
    "Hexagon/CodeEditor/LineRenderBin",
    "Hexagon/CodeEditor/LineRenderBin",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/Elements/ComponentTitleSlate",
    "Hexagon/Elements/ComponentTitleSlate",
    "Hexagon/Elements/DataTable",
    "Hexagon/Elements/FontCharacterMapGrid",
    "Hexagon/Elements/FontCharacterMapGrid",
    "Hexagon/Elements/FontedTextGrid",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/ListMenu",
    "Hexagon/Elements/Pill",
    "Hexagon/Elements/Pill",
    "Hexagon/Elements/QuoteRenderer",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/SubBitmapCharacterMap",
    "Hexagon/Elements/SubBitmapCharacterMap",
    "Hexagon/Elements/TextGrid",
    "Hexagon/Elements/TextGrid",
    "Hexagon/Elements/TextMesh",
    "Hexagon/Elements/TextMesh",
    "Hexagon/Elements/TextPixelPreviewCreator",
    "Hexagon/Fancy/Stage",
    "Hexagon/Fancy/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/Font",
    "Hexagon/Font",
    "Hexagon/FontSet",
    "Hexagon/FontSet",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/Hud",
    "Hexagon/Hud",
    "Hexagon/Hud",
    "Hexagon/Logo",
    "Hexagon/Logo",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/ObjectivesLog/ObjectiveRenderer",
    "Hexagon/ObjectivesLog/ObjectiveRenderer",
    "Hexagon/OneLineInputBox/Renderer",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/PacketRenderer",
    "Hexagon/PacketRenderer",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/Shapes/Hexagon/Renderer",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/TitleScreen",
    "Hexagon/TitleScreen",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/DrawingBox",
    "Testing/WithAllegroRenderingFixture",
    "Testing/WithAllegroRenderingFixture"
  ],
  "ALLEGRO_BITMAP": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/Camera",
    "Hexagon/Camera",
    "Hexagon/CodeEditor/CachedLineRenderer",
    "Hexagon/CodeEditor/CachedLineRenderer",
    "Hexagon/CodeEditor/LineRenderBin",
    "Hexagon/CodeEditor/LineRenderBin",
    "Hexagon/ComponentBitmapRenderCreator",
    "Hexagon/ComponentBitmapRenderCreator",
    "Hexagon/Elements/BitmapGridMesh",
    "Hexagon/Elements/BitmapGridRenderSurface",
    "Hexagon/Elements/BitmapGridRenderSurface",
    "Hexagon/Elements/CheckTextureGenerator",
    "Hexagon/Elements/CheckTextureGenerator",
    "Hexagon/Elements/DynamicGridMesh",
    "Hexagon/Elements/FilePixelPreviewCreator",
    "Hexagon/Elements/FilePixelPreviewCreator",
    "Hexagon/Elements/FontCharacterMapGrid",
    "Hexagon/Elements/FontCharacterMapGrid",
    "Hexagon/Elements/FontedTextGrid",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/SubBitmapCharacterMap",
    "Hexagon/Elements/SubBitmapCharacterMap",
    "Hexagon/Elements/TextMesh",
    "Hexagon/Elements/TextMesh",
    "Hexagon/Elements/TextPixelPreviewCreator",
    "Hexagon/Elements/TextPixelPreviewCreator",
    "Hexagon/Elements/TexturedRectangle",
    "Hexagon/Elements/TexturedRectangle",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/Hud",
    "Hexagon/Hud",
    "Hexagon/Shaders/Fun",
    "Hexagon/Shaders/Fun",
    "Hexagon/Shaders/TexturedTruchet",
    "Hexagon/Shaders/TexturedTruchet",
    "Hexagon/Shaders/TiledHexagonMotionEffect",
    "Hexagon/Shaders/TiledHexagonMotionEffect",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/DrawingBox"
  ],
  "al_draw_bitmap": [
    "Hexagon/AdvancedCodeEditor/Renderer"
  ],
  "Hexagon/Elements/FontedTextGrid": [
    "Hexagon/AdvancedCodeEditor/Renderer"
  ],
  "Hexagon/AdvancedCodeEditor/WindowRenderer": [
    "Hexagon/AdvancedCodeEditor/Renderer"
  ],
  "Hexagon/CodeSelectionBoxRenderer": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/OneLineInputBox/Renderer"
  ],
  "CodeMessagePointsOverlay": [
    "Hexagon/AdvancedCodeEditor/Renderer"
  ],
  "AllegroFlare/Timer": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "AllegroFlare/color/color": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/Elements/Frame",
    "Hexagon/UI/DrawingBox"
  ],
  "std/vector<CodeMessagePoint>": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/CodeMessagePointManager"
  ],
  "CodeMessagePoint": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/CodeMessagePointManager",
    "Hexagon/RailsMinitestTestResultToCodeMessagePointConverter"
  ],
  "CodeRange": [
    "Hexagon/AdvancedCodeEditor/Renderer",
    "Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter",
    "Hexagon/AdvancedCodeEditor/Selection",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/CodeRangeExtractor",
    "Hexagon/CodeRangeExtractor",
    "Hexagon/CodeSelectionBoxRenderer",
    "Hexagon/CodeSelectionBoxRenderer",
    "Hexagon/OneLineInputBox/Renderer"
  ],
  "Hexagon/AdvancedCodeEditor/SymbolUnderCursorMatcher": [
    "Hexagon/AdvancedCodeEditor/Renderer"
  ],
  "Blast/RegexMatcher": [
    "Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter"
  ],
  "CodePoint": [
    "Hexagon/AdvancedCodeEditor/Selection"
  ],
  "std/sort": [
    "Hexagon/AdvancedCodeEditor/Selection",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/unique": [
    "Hexagon/AdvancedCodeEditor/Selection"
  ],
  "std/min": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/CodeRangeExtractor",
    "Hexagon/Hud"
  ],
  "Hexagon/CodeRangeExtractor": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "ClipboardData/store": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator"
  ],
  "ClipboardData/retrieve": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Hexagon/SymlinkToucher": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Hexagon/AdvancedCodeEditor/SearchRegexToSelectionsConverter": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "std/vector<std/pair<int, int>>": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/DirtyGrid",
    "Hexagon/Elements/TextMesh"
  ],
  "StageInterface": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/Fancy/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/Hud",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MultiplexMenu/CommandExecutor",
    "Hexagon/MultiplexMenu/CommandExecutor",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/NewComponentMaker/Stage",
    "Hexagon/Notifications/Stage",
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/ProjectNavigator",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/System/Action/DestroyAllCodeEditorStages",
    "Hexagon/System/Renderer",
    "Hexagon/System/Renderer",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/LittleMenu"
  ],
  "placement3d": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Forms/Fun",
    "Hexagon/Hud",
    "Hexagon/Layout",
    "Hexagon/LayoutPlacements",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/OneLineInputBox/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectNavigator",
    "Hexagon/StageFactory",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/TitleScreen",
    "Testing/WithAllegroRenderingFixture"
  ],
  "AllegroFlare/FontBin": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/ChatGPTIntegration/Chat/ConversationView",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/Elements/ComponentTitleSlate",
    "Hexagon/Elements/ComponentTitleSlate",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/ListMenu",
    "Hexagon/Elements/Pill",
    "Hexagon/Elements/Pill",
    "Hexagon/Elements/QuoteRenderer",
    "Hexagon/Elements/QuoteRenderer",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Fancy/Stage",
    "Hexagon/Fancy/Stage",
    "Hexagon/FocusTimerBar/Renderer",
    "Hexagon/Font",
    "Hexagon/Font",
    "Hexagon/FontSet",
    "Hexagon/Hud",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/Logo",
    "Hexagon/Logo",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/ObjectivesLog/ObjectiveRenderer",
    "Hexagon/ObjectivesLog/ObjectiveRenderer",
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/OneLineInputBox/Renderer",
    "Hexagon/PacketRenderer",
    "Hexagon/PacketRenderer",
    "Hexagon/ProjectNavigator",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/TitleScreen",
    "Hexagon/TitleScreen",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/LittleMenu",
    "Hexagon/UI/LittleMenu",
    "Testing/WithAllegroRenderingFixture",
    "Testing/WithStageFactoryFixture"
  ],
  "Hexagon/AdvancedCodeEditor/AdvancedCodeEditor": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/ChatGPTIntegration/Chat/InputBox"
  ],
  "Hexagon/AdvancedCodeEditor/Renderer": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Hexagon/AdvancedCodeEditor/EventController": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  ":save_file": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Hexagon/CodeMessagePointManager": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Blast/StringJoiner": [
    "Hexagon/AdvancedCodeEditor/Stage",
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ChatGPTIntegration/Chat/InputBox",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/UI/DrawingBox"
  ],
  "ActionQueueRecording": [
    "Hexagon/AdvancedCodeEditor/Stage"
  ],
  "Hexagon/Elements/Window": [
    "Hexagon/AdvancedCodeEditor/WindowRenderer",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/ElementFX/WindowSpawnMotionFX",
    "Hexagon/Elements/DataTable",
    "Hexagon/PacketRenderer",
    "Hexagon/System/Renderer",
    "Hexagon/UI/DrawingBox"
  ],
  "Hexagon/ElementFX/WindowSpawnMotionFX": [
    "Hexagon/AdvancedCodeEditor/WindowRenderer"
  ],
  "php/str_replace": [
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator"
  ],
  "Hexagon/AdvancedComponentNavigator/ComponentSearcher": [
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator",
    "Hexagon/AdvancedComponentNavigator/Stage"
  ],
  "std/vector<Blast/Project/Component>": [
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator",
    "Hexagon/AdvancedComponentNavigator/ComponentSearcher",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/ComponentRelationsNavigator/ComponentRelations",
    "Hexagon/ProjectComponentNavigator/ComponentSearcher",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "std/transform": [
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator",
    "Hexagon/Elements/ListMenu",
    "Hexagon/Elements/StageInfoOverlay"
  ],
  "isupper": [
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator"
  ],
  "islower": [
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator"
  ],
  "Blast/Project/Component": [
    "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator",
    "Hexagon/AdvancedComponentNavigator/ComponentSearcher",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/BlastComponentLayoutGenerator",
    "Hexagon/BlastProjectLayoutsGenerator",
    "Hexagon/ComponentBitmapRenderCreator",
    "Hexagon/ComponentBitmapRenderCreator",
    "Hexagon/ComponentRelationsNavigator/ComponentRelations",
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/ProjectComponentNavigator/ComponentSearcher",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/Search/ComponentElasticsearchIndexer",
    "Hexagon/Search/ComponentElasticsearchIndexer",
    "Hexagon/StageFactory",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/Testing/ComponentTestRunner"
  ],
  "Blast/Project/ComponentLister": [
    "Hexagon/AdvancedComponentNavigator/ComponentSearcher",
    "Hexagon/BlastComponentLayoutGenerator",
    "Hexagon/BlastProjectLayoutsGenerator",
    "Hexagon/ProjectComponentNavigator/ComponentSearcher"
  ],
  "Blast/SimpleTextSearcher": [
    "Hexagon/AdvancedComponentNavigator/ComponentSearcher",
    "Hexagon/ProjectComponentNavigator/ComponentSearcher"
  ],
  "std/map<std/string, std/function<void(AdvancedComponentNavigator&)>>": [
    "Hexagon/AdvancedComponentNavigator/EventController",
    "Hexagon/AdvancedComponentNavigator/Stage"
  ],
  "std/map<std/string, std/function>": [
    "Hexagon/AdvancedComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/EventController"
  ],
  "Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator": [
    "Hexagon/AdvancedComponentNavigator/EventController",
    "Hexagon/AdvancedComponentNavigator/EventController",
    "Hexagon/AdvancedComponentNavigator/Stage"
  ],
  "Hexagon/AdvancedComponentNavigator/EventController": [
    "Hexagon/AdvancedComponentNavigator/EventController",
    "Hexagon/AdvancedComponentNavigator/Stage"
  ],
  "std/sin": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer"
  ],
  "Hexagon/AdvancedComponentNavigator/Stage": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/Hud",
    "Hexagon/Hud",
    "Hexagon/StageFactory",
    "Hexagon/System/Renderer",
    "Hexagon/System/Renderer"
  ],
  "color/mix": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "al_color_name": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/CodeEditor/CursorRenderer",
    "Hexagon/CodeEditor/LineRenderBin",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/Elements/CheckTextureGenerator",
    "Hexagon/Elements/FlashingGrid",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/TextGrid",
    "Hexagon/Elements/Window",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/FocusTimerBar/Renderer",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/Hud",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/System/Renderer"
  ],
  "al_draw_circle": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "FileSystemNode": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "Hexagon/Shapes/Hexagon/Renderer": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "Hexagon/Shapes/Hexagon/Stroke": [
    "Hexagon/AdvancedComponentNavigator/Renderer",
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "Hexagon/AdvancedComponentNavigator/Renderer": [
    "Hexagon/AdvancedComponentNavigator/Stage"
  ],
  "std/endl": [
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/PasteboardData",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/RailsTestOutputParser",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/cerr": [
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/cout": [
    "Hexagon/AdvancedComponentNavigator/Stage",
    "Hexagon/FileNavigator/Stage",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/RailsTestOutputParser"
  ],
  "std/vector<Hexagon/Layout>": [
    "Hexagon/BlastComponentLayoutGenerator",
    "Hexagon/BlastProjectLayoutsGenerator",
    "Hexagon/ProjectComponentNavigator/ProjectComponentNavigator"
  ],
  "Hexagon/Layout": [
    "Hexagon/BlastComponentLayoutGenerator",
    "Hexagon/BlastProjectLayoutsGenerator",
    "Hexagon/LayoutFromYAML",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/Project",
    "Hexagon/ProjectComponentNavigator/ProjectComponentNavigator"
  ],
  "Blast/ProjectComponentFilenameGenerator": [
    "Hexagon/BlastComponentLayoutGenerator",
    "Hexagon/BlastProjectLayoutsGenerator",
    "Hexagon/System/Action/CreateThreeSplitFromComponent"
  ],
  "Blast/ProjectComponentFileTypes": [
    "Hexagon/BlastComponentLayoutGenerator",
    "Hexagon/BlastProjectLayoutsGenerator"
  ],
  "al_is_system_installed": [
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/Elements/FilePixelPreviewCreator",
    "Hexagon/Elements/FlashingGrid",
    "Hexagon/Elements/SingleBlockBarGraph",
    "Hexagon/Elements/TextGrid",
    "Hexagon/Elements/TextPixelPreviewCreator",
    "Hexagon/Elements/Window",
    "Hexagon/Forms/Fun"
  ],
  "al_is_font_addon_initialized": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "al_draw_filled_rectangle": [
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/CodeSelectionBoxRenderer",
    "Hexagon/Elements/FlashingGrid",
    "Hexagon/Elements/ListMenu",
    "Hexagon/Elements/Pill",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Elements/TextGrid",
    "Hexagon/Fancy/Stage",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/OneLineInputBox/Renderer",
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen"
  ],
  "al_is_primitives_addon_initialized": [
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/Elements/SingleBlockBarGraph",
    "Hexagon/Elements/Window",
    "Hexagon/FocusTimerBar/Renderer",
    "Hexagon/Forms/Fun",
    "Hexagon/ObjectivesLog/ObjectiveRenderer",
    "Hexagon/PacketRenderer",
    "Hexagon/ProjectNavigator",
    "Hexagon/UI/DrawingBox"
  ],
  "al_is_ttf_addon_initialized": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "allegro_flare/placement2d": [
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/PacketRenderer"
  ],
  "php/file_get_contents": [
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ChatGPTIntegration/Chat/LogView",
    "Hexagon/ComponentDependencyFileParser",
    "Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader",
    "Hexagon/Elements/FilePixelPreviewCreator",
    "Hexagon/Hud",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/ProjectFactory",
    "Hexagon/StageFactory",
    "Hexagon/System/Action/CreateThreeSplitFromComponent"
  ],
  "std/vector<std/tuple<std/string, std/string, std/string, std/string>>": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "std/map<std/string, ALLEGRO_COLOR>": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "std/find": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "Hexagon/Elements/ColorKit": [
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/Hud",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/System/Config"
  ],
  "AllegroFlare/Color": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "Hexagon/Testing/ClangBuildOutputParser": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "std/count": [
    "Hexagon/BuildSequenceMeter/Renderer"
  ],
  "Hexagon/Testing/GoogleTestRunOutputParser": [
    "Hexagon/BuildSequenceMeter/Renderer",
    "Hexagon/Daemus/ProgramRunner"
  ],
  "Hexagon/BuildSystem/Builds/Base": [
    "Hexagon/BuildSystem/BuildFactory",
    "Hexagon/BuildSystem/BuildFactory",
    "Hexagon/BuildSystem/ReportRenderer",
    "Hexagon/BuildSystem/ReportRenderer",
    "Hexagon/BuildSystem/ReportRenderers/Base"
  ],
  "Hexagon/BuildSystem/BuildStageFactory": [
    "Hexagon/BuildSystem/BuildFactory"
  ],
  "Hexagon/BuildSystem/BuildStages/ShellCommand": [
    "Hexagon/BuildSystem/BuildStageFactory",
    "Hexagon/BuildSystem/BuildStageFactory",
    "Hexagon/BuildSystem/BuildStageRenderers/ShellCommand",
    "Hexagon/BuildSystem/BuildStageRenderers/ShellCommand"
  ],
  "Hexagon/BuildSystem/BuildStageRenderers/Base": [
    "Hexagon/BuildSystem/BuildStageRenderer",
    "Hexagon/BuildSystem/BuildStageRenderers/ShellCommand"
  ],
  "Hexagon/BuildSystem/BuildStageRenderers/ShellCommand": [
    "Hexagon/BuildSystem/BuildStageRenderer"
  ],
  "Hexagon/BuildSystem/BuildStages/Base": [
    "Hexagon/BuildSystem/BuildStageRenderer",
    "Hexagon/BuildSystem/BuildStages/ShellCommand",
    "Hexagon/BuildSystem/Builds/Base",
    "Hexagon/BuildSystem/ReportRenderers/Base"
  ],
  "Hexagon/Errors": [
    "Hexagon/BuildSystem/BuildStageRenderer",
    "Hexagon/BuildSystem/ReportRenderers/Base"
  ],
  "std/vector<std/vector<std/string>>": [
    "Hexagon/BuildSystem/BuildStageRenderers/Base",
    "Hexagon/Elements/DataTable"
  ],
  "char": [
    "Hexagon/BuildSystem/BuildStageRenderers/Base",
    "Hexagon/BuildSystem/BuildStageRenderers/ShellCommand",
    "Hexagon/BuildSystem/BuildStages/ShellCommand",
    "Hexagon/Testing/GoogleTestRunOutputParser"
  ],
  "std/chrono/system_clock/time_point": [
    "Hexagon/BuildSystem/BuildStages/Base",
    "Hexagon/BuildSystem/Builds/Base"
  ],
  "std/mutex": [
    "Hexagon/BuildSystem/BuildStages/Base"
  ],
  "Blast/ShellCommandExecutorWithCallback": [
    "Hexagon/BuildSystem/BuildStages/ShellCommand",
    "Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat",
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/DarkModeDetector",
    "Hexagon/Git/CommitStagedWithMessage",
    "Hexagon/Git/Modified",
    "Hexagon/Git/Pusher",
    "Hexagon/Git/StageEverything",
    "Hexagon/Git/Staged",
    "Hexagon/Git/Untracked",
    "Hexagon/NewComponentMaker/NewComponentMaker",
    "Hexagon/NewComponentMaker/Stage",
    "Hexagon/PasteboardData",
    "Hexagon/Rails/ComponentLister",
    "Hexagon/Search/ComponentElasticsearchIndexer",
    "Hexagon/Search/Elasticsearch/HealthChecker",
    "Hexagon/SymlinkToucher",
    "Hexagon/System/Action/OpenDocumentationInBrowser",
    "Hexagon/Testing/ComponentTestRunner",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/thread": [
    "Hexagon/BuildSystem/Builds/Base"
  ],
  "Hexagon/BuildSystem/ReportRenderers/Base": [
    "Hexagon/BuildSystem/ReportRenderer"
  ],
  "Hexagon/BuildSystem/BuildStageRenderer": [
    "Hexagon/BuildSystem/ReportRenderers/Base"
  ],
  "vec3d": [
    "Hexagon/Camera"
  ],
  "tan": [
    "Hexagon/Camera"
  ],
  "Hexagon/ChatCPTIntegration/Messages/Base": [
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ChatCPTIntegration/Messages/Text",
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "Hexagon/ChatCPTIntegration/Messages/Text": [
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ChatGPTIntegration/Chat/ConversationView",
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "Blast/String/Trimmer": [
    "Hexagon/ChatCPTIntegration/Conversation",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/DarkModeDetector",
    "Hexagon/PacketLogger",
    "Hexagon/Testing/ClangBuildOutputResult",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "Hexagon/ChatGPTIntegration/Author": [
    "Hexagon/ChatCPTIntegration/Conversation"
  ],
  "Hexagon/ChatCPTIntegration/Conversation": [
    "Hexagon/ChatGPTIntegration/Chat/ConversationView",
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "al_draw_line": [
    "Hexagon/ChatGPTIntegration/Chat/ConversationView",
    "Hexagon/UI/DrawingBox"
  ],
  "AllegroFlare/BitmapBin": [
    "Hexagon/ChatGPTIntegration/Chat/ConversationView",
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/StageFactory"
  ],
  "Hexagon/ChatGPTIntegration/Chat/LogView": [
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "Hexagon/ChatGPTIntegration/Chat/InputBox": [
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "AllegroFlare/Placement2D": [
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat": [
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "Hexagon/ChatGPTIntegration/Chat/ConversationView": [
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "Hexagon/ClipboardData": [
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "al_draw_filled_rounded_rectangle": [
    "Hexagon/ChatGPTIntegration/Chat/Stage",
    "Hexagon/OneLineInputBox/Renderer"
  ],
  "al_draw_rounded_rectangle": [
    "Hexagon/ChatGPTIntegration/Chat/Stage"
  ],
  "all": [
    "Hexagon/CodeEditor/CachedLineRenderer"
  ],
  "std/vector<ALLEGRO_BITMAP>": [
    "Hexagon/CodeEditor/CachedLineRenderer",
    "Hexagon/Elements/BitmapGridRenderSurface"
  ],
  ":CodeEditor/CodeEditor/mode_t": [
    "Hexagon/CodeEditor/CursorRenderer"
  ],
  ":CodeEditor/CodeEditor/EDIT": [
    "Hexagon/CodeEditor/CursorRenderer"
  ],
  ":CodeEditor/CodeEditor/INSERT": [
    "Hexagon/CodeEditor/CursorRenderer"
  ],
  "al_draw_rectangle": [
    "Hexagon/CodeEditor/CursorRenderer",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/Elements/CheckTextureGenerator",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/Window",
    "Hexagon/FocusTimerBar/Renderer",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/Hud",
    "Hexagon/MissingFile/Stage",
    "Hexagon/NewComponentMaker/Stage",
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/Powerbar/Renderer"
  ],
  "color/color": [
    "Hexagon/CodeEditor/CursorRenderer",
    "Hexagon/Elements/Window",
    "Hexagon/OneLineInputBox/Renderer"
  ],
  "std/map<std/string>": [
    "Hexagon/CodeEditor/FileCategoryDecorator"
  ],
  "AllegroFlare/Bin<std/string, ALLEGRO_BITMAP >": [
    "Hexagon/CodeEditor/LineRenderBin"
  ],
  "Hexagon/CodeEditor/CachedLineRenderer": [
    "Hexagon/CodeEditor/LineRenderBin"
  ],
  "std/map<std/string, int>": [
    "Hexagon/CodeEditor/LineRenderBin"
  ],
  "al_draw_text": [
    "Hexagon/CodeEditor/LineRenderBin",
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer",
    "Hexagon/CodeEditor/Stage",
    "Hexagon/Elements/Frame",
    "Hexagon/Elements/Pill",
    "Hexagon/Elements/QuoteRenderer",
    "Hexagon/Elements/StageInfoOverlay",
    "Hexagon/Fancy/Stage",
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/Hud",
    "Hexagon/MissingFile/Stage",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/OneLineInputBox/Stage",
    "Hexagon/UI/DrawingBox"
  ],
  "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer": [
    "Hexagon/CodeEditor/LineRenderBin"
  ],
  "Hexagon/RendererInterface": [
    "Hexagon/CodeEditor/LineRenderBin",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer"
  ],
  "AllegroFlare/Bin": [
    "Hexagon/CodeEditor/LineRenderBin"
  ],
  "Hexagon/RegexStore": [
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer"
  ],
  "al_get_text_width": [
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/StageFactory"
  ],
  "std/get": [
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer"
  ],
  "std/vector<std/tuple<std/string, int, ALLEGRO_COLOR>>": [
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer"
  ],
  "ALLEGRO_ALIGN_LEFT": [
    "Hexagon/CodeEditor/Renderer/AdvancedLineRenderer",
    "Hexagon/CodeEditor/Renderer/BasicLineRenderer"
  ],
  ":CodeEditor/CodeEditor": [
    "Hexagon/CodeEditor/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/OneLineInputBox/Stage"
  ],
  ":CodeEditor/EventController": [
    "Hexagon/CodeEditor/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/OneLineInputBox/Stage"
  ],
  "Hexagon/OneLineInputBox/Renderer": [
    "Hexagon/CodeEditor/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/OneLineInputBox/Stage"
  ],
  "Hexagon/Elements/StageInfoOverlay": [
    "Hexagon/CodeEditor/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/OneLineInputBox/Stage"
  ],
  "CodeEditor/Renderer": [
    "Hexagon/CodeEditor/Stage",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/OneLineInputBox/Stage"
  ],
  "al_color_html": [
    "Hexagon/CodeEditor/Stage",
    "Hexagon/Elements/Frame",
    "Hexagon/GitCommitMessageInputBox/Stage",
    "Hexagon/MissingFile/Stage",
    "Hexagon/OneLineInputBox/Stage"
  ],
  "Hexagon/CodeEditor/FileCategoryDecorator": [
    "Hexagon/CodeEditor/Stage",
    "Hexagon/OneLineInputBox/Stage"
  ],
  "std/remove": [
    "Hexagon/ComponentDependencyFileParser"
  ],
  "Blast/Project/ComponentDependencyLister": [
    "Hexagon/ComponentRelationsNavigator/ComponentRelations"
  ],
  "Blast/Project/ComponentRelativeLister": [
    "Hexagon/ComponentRelationsNavigator/ComponentRelations"
  ],
  "Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader": [
    "Hexagon/ComponentRelationsNavigator/ComponentRelations"
  ],
  "Hexagon/DependencyManager": [
    "Hexagon/ComponentRelationsNavigator/ComponentRelations"
  ],
  "Hexagon/Elements/ListMenu": [
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen",
    "Hexagon/UI/DrawingBox",
    "Hexagon/UI/LittleMenu"
  ],
  "std/vector<std/tuple<std/string, std/string>>": [
    "Hexagon/ComponentRelationsNavigator/Stage",
    "Hexagon/PacketRenderer",
    "Hexagon/ProjectNavigator",
    "Hexagon/StageFactory",
    "Hexagon/StageFactory",
    "Hexagon/UI/LittleMenu"
  ],
  "Blast/DirectoryExistenceChecker": [
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/Daemus/ProgramRunner"
  ],
  "std/chrono": [
    "Hexagon/Daemus/ProgramRunner"
  ],
  "std/filesystem/last_write_time": [
    "Hexagon/Daemus/ProgramRunner"
  ],
  "std/filesystem/is_empty": [
    "Hexagon/Daemus/ProgramRunner"
  ],
  "getpid": [
    "Hexagon/Daemus/ProgramRunner"
  ],
  "std/vector<Hexagon/Testing/GoogleTestRunTestResult>": [
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/Testing/GoogleTestRunOutputParser"
  ],
  "Hexagon/Daemus/ProgramRunner/WatchMode": [
    "Hexagon/Daemus/ProgramRunner"
  ],
  "Hexagon/Testing/GoogleTestRunTestResult": [
    "Hexagon/Daemus/ProgramRunner",
    "Hexagon/Testing/GoogleTestRunOutputParser"
  ],
  "std/filesystem": [
    "Hexagon/DependencyManager"
  ],
  "Hexagon/ComponentDependencyFileParser": [
    "Hexagon/DependencyManager"
  ],
  "std/set<std/pair<int, int>>": [
    "Hexagon/DirtyGrid"
  ],
  "ALLEGRO_VERTEX": [
    "Hexagon/Elements/BitmapGridMesh",
    "Hexagon/Elements/DynamicGridMesh"
  ],
  "ALLEGRO_STATE": [
    "Hexagon/Elements/BitmapGridRenderSurface"
  ],
  "AllegroFlare/color/mix": [
    "Hexagon/Elements/ColorKit",
    "Hexagon/Elements/Frame",
    "Hexagon/Hud",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/StageFactory"
  ],
  "al_draw_textf": [
    "Hexagon/Elements/DataTable",
    "Hexagon/PacketRenderer"
  ],
  "al_get_font_line_height": [
    "Hexagon/Elements/DataTable",
    "Hexagon/PacketRenderer"
  ],
  "Hexagon/Elements/TextPixelPreviewCreator": [
    "Hexagon/Elements/FilePixelPreviewCreator"
  ],
  "std/map<char, std/tuple<float, float, float, float>>": [
    "Hexagon/Elements/FontCharacterMapGrid",
    "Hexagon/Elements/SubBitmapCharacterMap",
    "Hexagon/Elements/TextMesh"
  ],
  "Hexagon/Elements/BitmapGridRenderSurface": [
    "Hexagon/Elements/FontedTextGrid"
  ],
  "Hexagon/Elements/SubBitmapCharacterMap": [
    "Hexagon/Elements/FontedTextGrid"
  ],
  "const char": [
    "Hexagon/Elements/QuoteRenderer"
  ],
  "void": [
    "Hexagon/Elements/QuoteRenderer"
  ],
  "Hexagon/Font": [
    "Hexagon/Elements/QuoteRenderer"
  ],
  "al_get_target_bitmap": [
    "Hexagon/Elements/SingleBlockBarGraph",
    "Hexagon/Forms/Fun"
  ],
  "Hexagon/Elements/Frame": [
    "Hexagon/Elements/StageInfoOverlay"
  ],
  "std/map<char, ALLEGRO_BITMAP>": [
    "Hexagon/Elements/SubBitmapCharacterMap"
  ],
  "std/vector<std/vector<std/tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>&": [
    "Hexagon/Elements/TextGrid"
  ],
  "std/vector<std/vector<std/tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>": [
    "Hexagon/Elements/TextGrid"
  ],
  "Hexagon/Elements/BitmapGridMesh": [
    "Hexagon/Elements/TextMesh"
  ],
  "Hexagon/Elements/FontCharacterMapGrid": [
    "Hexagon/Elements/TextMesh"
  ],
  "draw_textured_rectangle": [
    "Hexagon/Elements/TexturedRectangle"
  ],
  "std/vector<std/pair<std/string, std/string>>": [
    "Hexagon/FileNavigator/Stage"
  ],
  "std/time_t": [
    "Hexagon/FocusTimerBar/FocusTimerBar",
    "Hexagon/FocusTimerBar/Renderer",
    "Hexagon/Powerbar/Powerbar"
  ],
  "std/fmod": [
    "Hexagon/FocusTimerBar/Renderer"
  ],
  "Hexagon/FocusTimerBar/FocusTimerBar": [
    "Hexagon/FocusTimerBar/Renderer",
    "Hexagon/Hud"
  ],
  "std/stringstream": [
    "Hexagon/FontSet",
    "Hexagon/LayoutPlacements",
    "Hexagon/PasteboardData",
    "Hexagon/Search/ComponentElasticsearchIndex",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/System/Config",
    "NcursesArt/GithubRepoStatusFetcher"
  ],
  "std/map<std/string, std/string>": [
    "Hexagon/FontSet"
  ],
  "AllegroFlare/FontBin&": [
    "Hexagon/FontSet",
    "Hexagon/Hud"
  ],
  "std/runtime_error": [
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/LayoutPlacements"
  ],
  "al_get_font_ascent": [
    "Hexagon/FullScreenOverlay/Stage",
    "Hexagon/Hud"
  ],
  "NcursesArt/GithubRepoStatusFetcher": [
    "Hexagon/Git/RemoteSyncChecker"
  ],
  ":GitCommitMessageInputBox/EventController": [
    "Hexagon/GitCommitMessageInputBox/Stage"
  ],
  "sin": [
    "Hexagon/Hud"
  ],
  "Hexagon/Camera": [
    "Hexagon/Hud"
  ],
  "Hexagon/Powerbar/Powerbar": [
    "Hexagon/Hud",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/Powerbar/Renderer",
    "Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar",
    "Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar",
    "Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar",
    "Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar"
  ],
  "Hexagon/Powerbar/Renderer": [
    "Hexagon/Hud"
  ],
  "Hexagon/FocusTimerBar/Renderer": [
    "Hexagon/Hud"
  ],
  "al_get_display_width": [
    "Hexagon/Hud",
    "Hexagon/Powerbar/Renderer"
  ],
  "global/profiler": [
    "Hexagon/Hud",
    "Hexagon/System/Renderer"
  ],
  "std/vector<Hexagon/Packet>": [
    "Hexagon/Hud"
  ],
  "Hexagon/PacketRenderer": [
    "Hexagon/Hud"
  ],
  "placement2d": [
    "Hexagon/Hud"
  ],
  "std/vector<StageInterface >": [
    "Hexagon/Hud",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageCollectionHelper",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/System/Action/DestroyAllCodeEditorStages"
  ],
  "Hexagon/CodeEditor/Stage": [
    "Hexagon/Hud",
    "Hexagon/Hud",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageFactory",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/DestroyAllCodeEditorStages",
    "Hexagon/System/Renderer",
    "Hexagon/System/Renderer"
  ],
  "Hexagon/BuildSequenceMeter/Renderer": [
    "Hexagon/Hud"
  ],
  "Hexagon/Elements/Pill": [
    "Hexagon/Hud"
  ],
  "Hexagon/StageCollectionHelper": [
    "Hexagon/Hud",
    "Hexagon/System/Renderer"
  ],
  "Hexagon/Packet": [
    "Hexagon/Hud",
    "Hexagon/PacketRenderer",
    "Hexagon/PacketRenderer"
  ],
  "std/vector<std/tuple<std/string, std/string, placement3d>>": [
    "Hexagon/Layout",
    "Hexagon/LayoutToStagesCreator"
  ],
  "YAML/Node": [
    "Hexagon/LayoutFromYAML",
    "Hexagon/ProjectFromYAML"
  ],
  "std/map<std/string, placement3d>": [
    "Hexagon/LayoutPlacements"
  ],
  "std/vector<StageInterface >&": [
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/System/Action/DestroyAllCodeEditorStages"
  ],
  "Hexagon/StageFactory": [
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/LayoutToStagesCreator",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Testing/WithStageFactoryFixture",
    "Testing/WithStageFactoryFixture"
  ],
  "path2d": [
    "Hexagon/Logo"
  ],
  "sqrt": [
    "Hexagon/Logo",
    "Hexagon/Shapes/Hexagon/Renderer",
    "Hexagon/Shapes/Hexagon/Stroke"
  ],
  "std/map<std/string, Hexagon/Marker>": [
    "Hexagon/MarkerNavigator"
  ],
  "Hexagon/Marker": [
    "Hexagon/MarkerNavigator"
  ],
  "Blast/FileCreator": [
    "Hexagon/MissingFile/Stage",
    "Hexagon/System/Action/SendMessageToDaemusToBuild"
  ],
  "Hexagon/Elements/TexturedRectangle": [
    "Hexagon/MissingFile/Stage"
  ],
  "Hexagon/MultiplexMenu/MultiplexMenu": [
    "Hexagon/MultiplexMenu/CommandExecutor",
    "Hexagon/MultiplexMenu/CommandExecutor",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/StageFactory"
  ],
  "Hexagon/KeyboardCommandKey": [
    "Hexagon/MultiplexMenu/MenuItem",
    "Hexagon/MultiplexMenu/MultiplexMenuPage",
    "Hexagon/MultiplexMenu/Stage"
  ],
  "std/map<std/string, Hexagon/MultiplexMenu/MultiplexMenuPage>": [
    "Hexagon/MultiplexMenu/MultiplexMenu"
  ],
  "std/vector<Hexagon/MultiplexMenu/MultiplexMenuPage>": [
    "Hexagon/MultiplexMenu/MultiplexMenu"
  ],
  "Hexagon/MultiplexMenu/MultiplexMenuPage": [
    "Hexagon/MultiplexMenu/MultiplexMenu",
    "Hexagon/MultiplexMenu/MultiplexMenu",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/MultiplexMenu/Renderer",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/StageFactory"
  ],
  "Hexagon/MultiplexMenu/MenuItem": [
    "Hexagon/MultiplexMenu/MultiplexMenuPage",
    "Hexagon/MultiplexMenu/MultiplexMenuPage",
    "Hexagon/MultiplexMenu/Stage",
    "Hexagon/MultiplexMenu/Stage"
  ],
  "std/vector<Hexagon/MultiplexMenu/MenuItem>": [
    "Hexagon/MultiplexMenu/MultiplexMenuPage"
  ],
  "al_keycode_to_name": [
    "Hexagon/MultiplexMenu/PageRenderer"
  ],
  "AllegroFlare/color": [
    "Hexagon/MultiplexMenu/PageRenderer",
    "Hexagon/MultiplexMenu/Renderer"
  ],
  "Hexagon/MultiplexMenu/PageRenderer": [
    "Hexagon/MultiplexMenu/Renderer"
  ],
  "Hexagon/MultiplexMenu/Renderer": [
    "Hexagon/MultiplexMenu/Stage"
  ],
  "KeyboardCommandMapper": [
    "Hexagon/MultiplexMenu/Stage"
  ],
  "Hexagon/Notifications/Notification": [
    "Hexagon/Notifications/NotificationFactory",
    "Hexagon/Notifications/NotificationFactory",
    "Hexagon/Notifications/Stage"
  ],
  "Hexagon/ObjectivesLog/Objective": [
    "Hexagon/ObjectivesLog/ObjectiveRenderer",
    "Hexagon/ObjectivesLog/ObjectiveRenderer",
    "Hexagon/ObjectivesLog/ObjectivesLog"
  ],
  "std/vector<Hexagon/ObjectivesLog/Objective>": [
    "Hexagon/ObjectivesLog/ObjectivesLog"
  ],
  "Hexagon/ObjectivesLog/ObjectiveRenderer": [
    "Hexagon/ObjectivesLog/Stage"
  ],
  "Hexagon/ObjectivesLog/ObjectivesLog": [
    "Hexagon/ObjectivesLog/Stage",
    "Hexagon/ObjectivesLog/Stage"
  ],
  ":OneLineInputBox/EventController": [
    "Hexagon/OneLineInputBox/Stage"
  ],
  "time": [
    "Hexagon/PacketLogger"
  ],
  "AllegroFlare/random_string": [
    "Hexagon/PacketLogger"
  ],
  "php/file_put_contents": [
    "Hexagon/PacketLogger"
  ],
  "allegro_flare/placement3d": [
    "Hexagon/Powerbar/Renderer"
  ],
  "al_get_display_height": [
    "Hexagon/Powerbar/Renderer"
  ],
  "std/vector<std/tuple<std/string, Hexagon/Layout>>": [
    "Hexagon/Project"
  ],
  "std/map<std/string, std/function<void(ProjectComponentNavigator&)>>": [
    "Hexagon/ProjectComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "Hexagon/ProjectComponentNavigator/ProjectComponentNavigator": [
    "Hexagon/ProjectComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/System/EventController"
  ],
  "Hexagon/ProjectComponentNavigator/EventController": [
    "Hexagon/ProjectComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "ProjectComponentNavigator": [
    "Hexagon/ProjectComponentNavigator/EventController",
    "Hexagon/ProjectComponentNavigator/Stage",
    "Hexagon/System/EventController"
  ],
  "std/pair<bool, bool>": [
    "Hexagon/ProjectComponentNavigator/Renderer"
  ],
  "Hexagon/ProjectComponentNavigator/Stage": [
    "Hexagon/ProjectComponentNavigator/Renderer",
    "Hexagon/ProjectComponentNavigator/Renderer"
  ],
  "Hexagon/ProjectComponentNavigator/Renderer": [
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "Hexagon/ProjectComponentNavigator/ComponentSearcher": [
    "Hexagon/ProjectComponentNavigator/Stage"
  ],
  "Hexagon/Project": [
    "Hexagon/ProjectFactory",
    "Hexagon/ProjectFromYAML"
  ],
  "Hexagon/ProjectFromYAML": [
    "Hexagon/ProjectFactory"
  ],
  "Hexagon/LayoutFromYAML": [
    "Hexagon/ProjectFromYAML"
  ],
  "std/ofstream": [
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen"
  ],
  "Hexagon/Logo": [
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen"
  ],
  "AllegroFlare/Profiler": [
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen",
    "Hexagon/TitleScreen"
  ],
  "Hexagon/Elements/DataTable": [
    "Hexagon/ProjectNavigator",
    "Hexagon/TitleScreen"
  ],
  "RailsMinitestTestResult": [
    "Hexagon/RailsMinitestTestResultToCodeMessagePointConverter",
    "Hexagon/RailsTestOutputParser"
  ],
  "CodeMessagePoint/type_t": [
    "Hexagon/RailsMinitestTestResultToCodeMessagePointConverter"
  ],
  "std/vector<RailsMinitestTestResult>&": [
    "Hexagon/RailsTestOutputParser"
  ],
  "std/vector<RailsMinitestTestResult>": [
    "Hexagon/RailsTestOutputParser"
  ],
  "AllegroFlare/Shaders/Base": [
    "Hexagon/Shaders/Base"
  ],
  "Hexagon/Shaders/Base": [
    "Hexagon/Shaders/FlatColor",
    "Hexagon/Shaders/Fun",
    "Hexagon/Shaders/Smiley",
    "Hexagon/Shaders/TexturedTruchet",
    "Hexagon/Shaders/TiledHexagonMotionEffect",
    "Hexagon/Shaders/TruchetMaze",
    "Hexagon/Shaders/TruchetVine",
    "Hexagon/Shaders/TruchetVineSquiggle"
  ],
  "std/vector<Shapes/Hexagon/Stroke>": [
    "Hexagon/Shapes/Hexagon/Renderer"
  ],
  "vec2d": [
    "Hexagon/Shapes/Hexagon/Renderer",
    "Hexagon/Shapes/Hexagon/Stroke"
  ],
  "allegro_flare/path2d": [
    "Hexagon/Shapes/Hexagon/Renderer",
    "Hexagon/Shapes/Hexagon/Stroke"
  ],
  "Shapes/Hexagon/Stroke": [
    "Hexagon/Shapes/Hexagon/Renderer"
  ],
  "Hexagon/GitCommitMessageInputBox/Stage": [
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageCollectionHelper",
    "Hexagon/StageFactory"
  ],
  "std/vector<Hexagon/CodeEditor/Stage >": [
    "Hexagon/StageCollectionHelper"
  ],
  "std/vector<Hexagon/AdvancedCodeEditor/Stage >": [
    "Hexagon/StageCollectionHelper"
  ],
  "Hexagon/ObjectivesLog/Stage": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/MultiplexMenu/Stage": [
    "Hexagon/StageFactory"
  ],
  "Blast/Project/SymlinkChecker": [
    "Hexagon/StageFactory",
    "Hexagon/SymlinkToucher"
  ],
  "Hexagon/Fancy/Stage": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/MissingFile/Stage": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/FileNavigator/Stage": [
    "Hexagon/StageFactory",
    "Hexagon/System/Renderer",
    "Hexagon/System/Renderer"
  ],
  "Hexagon/OneLineInputBox/Stage": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/ProjectNavigator": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/Notifications/Stage": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/UI/LittleMenu": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/ComponentRelationsNavigator/Stage": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/ComponentRelationsNavigator/ComponentRelations": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/UI/DrawingBox": [
    "Hexagon/StageFactory",
    "Hexagon/UI/DrawingBox"
  ],
  "al_get_current_display": [
    "Hexagon/StageFactory"
  ],
  "al_font_line_height": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/ChatGPTIntegration/Chat/Stage": [
    "Hexagon/StageFactory"
  ],
  "Hexagon/Git/Modified": [
    "Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar"
  ],
  "Hexagon/Git/Untracked": [
    "Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar"
  ],
  "Hexagon/Git/Staged": [
    "Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar"
  ],
  ":Action": [
    "Hexagon/System/Action/CheckGitLocalStatusAndUpdatePowerbar",
    "Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar",
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename",
    "Hexagon/System/Action/CreateThreeSplitFromComponent",
    "Hexagon/System/Action/CreateTwoSplitFromComponent",
    "Hexagon/System/Action/DestroyAllCodeEditorStages",
    "Hexagon/System/Action/OpenDocumentationInBrowser",
    "Hexagon/System/Action/SendMessageToDaemusToBuild"
  ],
  "Hexagon/Git/RemoteSyncChecker": [
    "Hexagon/System/Action/CheckGitSyncAndUpdatePowerbar"
  ],
  ":read_file": [
    "Hexagon/System/Action/CreateCodeEditorStageFromFilename"
  ],
  "std/vector": [
    "Hexagon/System/Action/CreateTwoSplitFromComponent"
  ],
  "std/string": [
    "Hexagon/System/Action/CreateTwoSplitFromComponent"
  ],
  "NcursesArt/ProjectFilenameGenerator": [
    "Hexagon/System/Action/CreateTwoSplitFromComponent"
  ],
  "read_file": [
    "Hexagon/System/Action/CreateTwoSplitFromComponent"
  ],
  "CodeEditor/Stage": [
    "Hexagon/System/Action/CreateTwoSplitFromComponent"
  ],
  "AllegroFlare/Config": [
    "Hexagon/System/Config"
  ],
  "std/map<std/string, std/function<bool(Hexagon/System/System&)>>": [
    "Hexagon/System/EventController"
  ],
  "add_notification": [
    "Hexagon/System/EventController"
  ],
  "NOTIFICATION_FILE_IS_UNSAVED": [
    "Hexagon/System/Renderer"
  ],
  "al_clear_to_color": [
    "Hexagon/System/Renderer"
  ],
  "std/vector<Hexagon/Testing/ClangBuildOutputResult>": [
    "Hexagon/Testing/ClangBuildOutputParser"
  ],
  "Hexagon/RegexMatcher": [
    "Hexagon/Testing/ClangBuildOutputParser"
  ],
  "Hexagon/Testing/ClangBuildOutputResult": [
    "Hexagon/Testing/ClangBuildOutputParser",
    "Hexagon/Testing/ClangBuildOutputResult"
  ],
  "atoi": [
    "Hexagon/Testing/ClangBuildOutputResult"
  ],
  "debugging": [
    "Hexagon/Testing/GoogleTestRunOutputParser"
  ],
  "std/pair<std/string, std/string>": [
    "Hexagon/Testing/GoogleTestRunOutputParser",
    "NcursesArt/ProjectComponentBasenameExtractor"
  ],
  "std/map<std/string, std/function<bool(Hexagon/UI/DrawingBox&)>>": [
    "Hexagon/UI/DrawingBox"
  ],
  "random_string": [
    "Hexagon/UI/DrawingBox"
  ],
  "al_save_bitmap": [
    "Hexagon/UI/DrawingBox"
  ],
  "al_is_image_addon_initialized": [
    "Hexagon/UI/DrawingBox"
  ],
  "TimestampGenerator": [
    "Hexagon/UI/DrawingBox"
  ],
  "std/pair<int, int>": [
    "Hexagon/WordRangesFinder"
  ],
  ":testing/Test": [
    "Testing/WithAllegroRenderingFixture",
    "Testing/WithStageFactoryFixture"
  ],
  "X": [
    "TimestampGenerator"
  ]
}
</pre>
</body>