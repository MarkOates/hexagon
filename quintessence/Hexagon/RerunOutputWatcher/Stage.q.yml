parent_classes:


  - class: StageInterface
    scope: public
    init_with: "StageInterface::RERUN_OUTPUT_WATCHER"


properties:


  - name: command
    type: std::string
    init_with: "\"make\""
    getter: true
    setter: true
    constructor_arg: true
  - name: watch_pattern
    type: std::string
    init_with: "\"**.*.q.yml\""
    getter: true
    setter: true
    constructor_arg: true
  - name: output
    type: std::string
    init_with: "\"[no content]\""
    getter: true


functions:


  - name: clear
    type: void
    body: |
      output = "";
  - name: dummy_ALLEGRO_EVENT
    type: ALLEGRO_EVENT&
    static: true
    body: |
      static ALLEGRO_EVENT ev;
      return ev;
  - name: append_to_output
    type: void
    parameters:
      - name: content_to_append
        type: std::string
        default_argument: "\"\""
    body: |
      output += content_to_append;
  - name: refresh
    type: void
    body: |
      output = "";
      using std::placeholders::_1;
      Blast::ShellCommandExecutorWithCallback executor(
            get_command(),
            std::bind(&RerunOutputWatcher::Stage::append_to_output, this, _1)
         );
      executor.execute();


  - name: render
    type: void
    virtual: true
    override: true
    parameters:
      - name: is_focused
        type: bool
        default_argument: true
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: cell_width
        type: int
        default_argument: 60
      - name: cell_height
        type: int
        default_argument: 20
    body: |
       ALLEGRO_COLOR pass_color = al_color_name("aquamarine");
       ALLEGRO_COLOR running_color = al_color_name("sandybrown");

       get_place().start_transform();

       if (!font) throw std::runtime_error("could not load font font");
       //al_draw_text(font, al_color_name("yellow"), 0, 0, 0, "+ RerunOutputWatcher");

       Hexagon::Elements::Frame frame(get_place().size.x, get_place().size.y);
       frame.render();

       int y_spacing = 20;
       int x_col = 170;
       int line_height = al_get_font_line_height(font);

       // draw the command
       al_draw_text(font, al_color_name("yellow"), 0, y_spacing * 1, 0, "command: ");
       al_draw_text(font, al_color_name("aliceblue"), x_col, y_spacing * 1, 0, get_command().c_str());

       // draw the command
       //al_draw_text(font, al_color_name("yellow"), 0, y_spacing * 2, 0, "watch_pattern: ");
       //al_draw_text(font, al_color_name("aliceblue"), x_col, y_spacing * 2, 0, get_watch_pattern().c_str());

       // status
       //std::string expected_passing_message = "FINISHED!";
       std::string expected_passing_message = ", 0 failures";
       bool passed = (get_output().find(expected_passing_message) != std::string::npos);

       // split the lines
       int line_count = 0;
       std::vector<std::string> output_lines = Blast::StringSplitter(get_output(), '\n').split();
       // draw the output
       for (auto &line : output_lines)
       {
          ALLEGRO_COLOR line_color = passed ? pass_color : running_color;
          al_draw_text(font, line_color, 0, y_spacing * 2 + line_count * line_height, 0, line.c_str());
          line_count++;
          //std::cout << line << "-------" << std::endl;
       }
       get_place().restore_transform();

       return;


  - name: process_local_event
    type: void
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: "\"\""
      - name: action_data
        type: ActionData
        override_default_argument_requirement: true
        default_argument: "{}"
    body: |
      return;


  - name: process_event
    type: void
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: Stage::dummy_ALLEGRO_EVENT()
    body: |
      return;


function_body_symbol_dependencies:


  - al_color_name
  - Blast::ShellCommandExecutorWithCallback
  - Hexagon::Elements::Frame
  - std::cout
  - Blast::StringSplitter


dependencies:


  - symbol: std::cout
    headers: [ 'iostream' ]
  - symbol: Hexagon::Elements::Frame
    headers: [ 'Hexagon/Elements/Frame.hpp' ]
  - symbol: Blast::StringSplitter
    headers: [ 'vector', 'Blast/StringSplitter.hpp' ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ 'Blast/ShellCommandExecutorWithCallback.hpp' ]
  - symbol: ALLEGRO_EVENT&
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ActionData
    headers: [ 'Hexagon/ActionData.hpp' ]
  - symbol: al_color_name
    headers: [ 'allegro5/allegro_color.h' ]
  - symbol: ALLEGRO_FONT*
    headers: [ 'allegro5/allegro_font.h' ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ 'allegro5/allegro.h' ]
  - symbol: StageInterface
    headers: [ 'Hexagon/StageInterface.hpp' ]
