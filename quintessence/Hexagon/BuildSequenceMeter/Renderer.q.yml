properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: status
    type: std::string
    init_with: '"not_started"'
    constructor_arg: true

  - name: stages
    type: std::vector<std::pair<std::string, std::string>>
    init_with: '{}'
    constructor_arg: true

  - name: place
    type: placement2d
    init_with: '{1920 - 60, 1080 / 2, 90, 200}'
    constructor_arg: true


functions:


  - name: render
    type: void
    body: |
      ALLEGRO_COLOR color = ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2};
      ALLEGRO_FONT *font = obtain_font();
      al_draw_text(font, color, 1920 - 30, 1080 * 0.5, ALLEGRO_ALIGN_RIGHT, status.c_str());

      int num_stages = stages.size();
      float box_height = 40;
      float box_width = 90;
      float box_spacing = 40;
      float meter_height = box_height * num_stages + box_spacing * (num_stages - 1);
      float x = 1920;

      float cursor_y = 0;
      for (auto &stage : stages)
      {
         std::string stage_status = stage.second;
         draw_rectangle(0, cursor_y, box_width, cursor_y+box_height, stage_status);
         cursor_y += (box_height + box_spacing);
      }

      return;
    body_dependency_symbols:
      - ALLEGRO_COLOR


  - name: draw_rectangle
    type: void
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: w
        type: float
        default_argument: 1
      - name: h
        type: float
        default_argument: 1
      - name: status
        type: std::string
        default_argument: '"incomplete"'
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      // statuses:
      //   incomplete: nothing has run yet
      //   running: current step is being executed and will show results once processed
      //   failed: current step failed
      //   succeeded: current step succeeded

      al_draw_rectangle(x, y, w, h, ALLEGRO_COLOR{0.1, 0.1, 0.1, 0.1}, 1.0);

      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - al_is_system_installed
      - al_is_ttf_addon_initialized
      - al_is_font_addon_initialized
      - al_is_primitives_addon_initialized


  - name: build_color_from_status
    type: ALLEGRO_COLOR
    parameters:
      - name: status
        type: std::string
        default_argument: '"status_unset"'
    body: |
      ALLEGRO_COLOR result;

      std::map<std::string, ALLEGRO_COLOR> status_colors = {
         { "finished", al_color_html("116568") },
         { "running", al_color_html("eae049") },
         { "not_started", ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2} },
         { "passed", al_color_html("82e499") },
         { "failed", al_color_html("b22222") },
      };

      std::map<std::string, ALLEGRO_COLOR>::iterator it = status_colors.find(status);
      if (it == status_colors.end()) return al_color_html("333333");

      return it->second;
    body_dependency_symbols:
      - std::map<std::string, ALLEGRO_COLOR>


  - name: obtain_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Purista Medium.otf -20");


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: std::vector<std::pair<std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: std::map<std::string, ALLEGRO_COLOR>
    headers: [ map, string, allegro5/allegro_color.h ]


