properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: status
    type: std::string
    init_with: '"not_started"'
    constructor_arg: true

  - name: stages
    type: std::vector<std::tuple<std::string, std::string, std::string, std::string>>
    init_with: '{}'
    constructor_arg: true

  - name: meter_width
    type: float
    init_with: 90
    constructor_arg: true

  - name: meter_height
    type: float
    init_with: 690
    constructor_arg: true

  - name: backfill_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2}
    constructor_arg: true
    getter: true
    setter: true

  - name: base_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}
    constructor_arg: true
    getter: true
    setter: true

  - name: draw_frame
    type: bool
    init_with: false
    getter: true
    setter: true


functions:


  - name: render
    type: void
    body: |
      ALLEGRO_COLOR color = ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2};
      ALLEGRO_FONT *font = obtain_font();

      // draw_frame
      if (get_draw_frame())
      {
         al_draw_rectangle(0, 0, meter_width, meter_height, ALLEGRO_COLOR{0.1, 0.1, 0.1, 0.1}, 2.0);
      }

      if (stages.empty()) return;

      int num_stages = stages.size();
      float box_height = meter_height / (num_stages * 2 - 1);
      float box_width = meter_width;
      float box_spacing = box_height;

      float cursor_y = meter_height - box_height;
      for (auto &stage : stages)
      {
         std::string PATH_TO_BUILD_DUMPS = "/Users/markoates/Repos/hexagon/bin/programs/data/builds/dumps/";
         std::string stage_result_dump_filename = std::get<3>(stage); // currently not used, but hopefully soon :)
         std::string stage_status = std::get<2>(stage);
         std::string stage_label = std::get<1>(stage);
         std::string sequence_dump_full_path = PATH_TO_BUILD_DUMPS + stage_result_dump_filename;
         bool expecting_stage_to_have_file = !stage_result_dump_filename.empty();
         bool stage_dump_path_exists = expecting_stage_to_have_file
                                     && Blast::FileExistenceChecker(sequence_dump_full_path).exists();

         if (expecting_stage_to_have_file)
         {
            ALLEGRO_COLOR stage_box_color = build_color_from_status(stage_status);
            if (stage_dump_path_exists)
            {
               al_draw_filled_rectangle(0-6, cursor_y, 0-3, cursor_y+box_height, stage_box_color);
            }
            else
            {
               al_draw_rectangle(0-6, cursor_y, 0-3, cursor_y+box_height, stage_box_color, 1.0);
            }
         }

         if (stage_dump_path_exists)
         {
            Hexagon::Elements::ColorKit color_kit;
            //ALLEGRO_COLOR dump_text_color = al_color_html("ffa500");
            //ALLEGRO_COLOR stage_box_color = build_color_from_status(stage_status);
            //al_draw_filled_rectangle(0-6, cursor_y, 0-3, cursor_y+box_height, stage_box_color);

            if (is_status_to_draw_label(stage_status))
            {
               ALLEGRO_FONT *dump_font = obtain_dump_font();
               float font_line_height = al_get_font_line_height(dump_font);
               //ALLEGRO_COLOR dump_text_color = al_color_html("ffa500");
               ALLEGRO_COLOR bg_trans_color = AllegroFlare::Color(backfill_color, 0.3).to_al(); //ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.3};
               ALLEGRO_COLOR dump_text_color = color_kit.terminal_warm_orange();
                  //al_color_html("ffa500");

               placement2d dump_place;
               dump_place.scale = vec2d(0.8, 0.8);
               dump_place.position = vec2d(-10, 0);
               dump_place.align = vec2d(1.0, 0.0);
               dump_place.size = vec2d(1000, 900);

               dump_place.start_transform();
               
               //ALLEGRO_COLOR bg_trans_color = AllegroFlare::Color(backfill_color, 0.3); //ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.3};
               al_draw_filled_rectangle(0, 0, dump_place.size.x, dump_place.size.y, bg_trans_color);

               std::string stage_text_dump = php::file_get_contents(sequence_dump_full_path);

               draw_build_dump(dump_place.size.x, stage_text_dump);
               //al_draw_multiline_text(dump_font, dump_text_color, 0, 0, dump_place.size.x, font_line_height, ALLEGRO_ALIGN_LEFT,
                  //stage_text_dump.c_str()
               //);

               dump_place.restore_transform();
            }
         }

         //ALLEGRO_COLOR box_color = build_color_from_status(stage_status);
         draw_status_box(0, cursor_y, box_width, cursor_y+box_height, stage_status, stage_label);

         cursor_y -= (box_height + box_spacing);
      }

      return;
    body_dependency_symbols:
      - ALLEGRO_COLOR
      - Blast::FileExistenceChecker
      - php::file_get_contents
      - allegro_flare::placement2d
      - AllegroFlare::Color
      - Hexagon::Elements::ColorKit


  - name: draw_build_dump
    parameters:
      - name: width
        type: float
        default_argument: 0
      - name: stage_text_dump
        type: std::string
        default_argument: '"[unset-stage_text_dump]"'
    body: |
      Hexagon::Elements::ColorKit color_kit;
      ALLEGRO_FONT *dump_font = obtain_dump_font();
      float font_line_height = al_get_font_line_height(dump_font);
      ALLEGRO_COLOR dump_text_color = color_kit.terminal_warm_orange();

      //std::string stage_text_dump = php::file_get_contents(sequence_dump_full_path);
      al_draw_multiline_text(dump_font, dump_text_color, 0, 0, width, font_line_height, ALLEGRO_ALIGN_LEFT,
         stage_text_dump.c_str()
      );
      return;


  - name: draw_status_box
    type: void
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: w
        type: float
        default_argument: 1
      - name: h
        type: float
        default_argument: 1
      - name: status
        type: std::string
        default_argument: '"incomplete"'
      - name: label
        type: std::string
        default_argument: '"-  -"'
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), al_is_ttf_addon_initialized(), font_bin ]
    body: |
      // statuses:
      //   incomplete: nothing has run yet
      //   running: current step is being executed and will show results once processed
      //   failed: current step failed
      //   succeeded: current step succeeded

      ALLEGRO_COLOR color = build_color_from_status(status);
      if (is_status_to_draw_label(status))
      {
         ALLEGRO_FONT *font = obtain_font();
         if (!font)
         {
            // TODO
         }
         else
         {
            float actual_height = h - y;
            al_draw_text(
               obtain_font(),
               color,
               x + w * 0.5,
               y + actual_height * 0.5 - al_get_font_line_height(font)*0.5 - 1,
               ALLEGRO_ALIGN_CENTER,
               label.c_str()
            );
         }
      }
      al_draw_rectangle(x, y, w, h, color, 1.0);
      //al_draw_rectangle(x, y, w, h, ALLEGRO_COLOR{0.1, 0.1, 0.1, 0.1}, 1.0);

      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - al_is_system_installed
      - al_is_ttf_addon_initialized
      - al_is_font_addon_initialized
      - al_is_primitives_addon_initialized


  - name: is_status_to_draw_label
    type: bool
    parameters:
      - name: status
        type: std::string
        default_argument: '"status_unset"'
    body: |
      std::vector<std::string> states_that_will_render_label = {
         "running",
         "failed",
         "succeeded",
         "finished",
      };
      std::vector<std::string>::iterator find_iterator;
      find_iterator = std::find(states_that_will_render_label.begin(), states_that_will_render_label.end(), status);
      bool was_found = (find_iterator != states_that_will_render_label.end());
      return was_found;
    body_dependency_symbols:
      - std::find


  - name: build_color_from_status
    type: ALLEGRO_COLOR
    parameters:
      - name: status
        type: std::string
        default_argument: '"status_unset"'
    body: |
      ALLEGRO_COLOR result;

      std::map<std::string, ALLEGRO_COLOR> status_colors = {
         { "finished", al_color_html("116568") },
         { "running", al_color_html("eae049") },
         { "not_started", ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2} },
         { "passed", al_color_html("82e499") },
         { "failed", al_color_html("b22222") },
      };

      std::map<std::string, ALLEGRO_COLOR>::iterator it = status_colors.find(status);
      if (it == status_colors.end()) return al_color_html("333333");

      return it->second;
    body_dependency_symbols:
      - std::map<std::string, ALLEGRO_COLOR>


  - name: obtain_dump_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      float scale = 1.45;
      int font_size = -10 * scale;
      std::stringstream ident;
      ident << "Purista Medium.otf " << (int)(font_size * scale);
      return font_bin->auto_get(ident.str());


  - name: obtain_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Purista Medium.otf -20");


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_font_addon_initialized
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_is_ttf_addon_initialized
    headers: [ allegro5/allegro_ttf.h ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
  - symbol: std::vector<std::tuple<std::string, std::string, std::string, std::string>>
    headers: [ vector, utility, string ]
  - symbol: std::map<std::string, ALLEGRO_COLOR>
    headers: [ map, string, allegro5/allegro_color.h ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: std::find
    headers: [ algorithm ]
  - symbol: Hexagon::Elements::ColorKit
    headers: [ Hexagon/Elements/ColorKit.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]


