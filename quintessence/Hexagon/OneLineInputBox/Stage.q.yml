parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "code_editor.get_type()"


properties:


  - name: code_editor
    type: ::CodeEditor::CodeEditor
    init_with: '::CodeEditor::CodeEditor{}'
    constructor_arg: true
    getter: true
    getter_ref: true

  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true

  - name: is_focused
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: nullptr
    getter: true
    setter: true

  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    getter: true
    setter: true

  - name: cell_width
    type: int
    init_with: 10
    getter: true
    setter: true

  - name: cell_height
    type: int
    init_with: 20
    getter: true
    setter: true

  - name: base_font_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f}
    getter: true
    setter: true

  - name: backfill_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 1.0f}
    getter: true
    setter: true

  - name: state
    type: std::string
    init_with: '"normal"'


methods:


  - name: change_state_to_submitted_and_pending_destruction
    body: |
      state = "submitted_and_pending_destruction";
      return;


  - name: is_state_to_submitted_and_pending_destruction
    type: bool
    body: |
      return state == "submitted_and_pending_destruction";


  - name: render
    virtual: true
    override: true
    guards: [ (code_editor.get_type() == ONE_LINE_INPUT_BOX) ]
    body: |
      ALLEGRO_COLOR outline_color = al_color_name("dodgerblue");
      ALLEGRO_COLOR user_input_text_color = al_color_name("dodgerblue");
      float width = get_place().size.x;
      float height = get_place().size.y;
      //std::string top_left_text = "ESC: Close";
      std::string bottom_right_text = "search";
      ALLEGRO_COLOR backfill_color = al_color_name("black");
      std::vector<std::string> lines = code_editor.get_lines_ref();
      int char_count = code_editor_char_count();

      Hexagon::OneLineInputBox::Renderer renderer(
         nullptr,
         get_font(),
         outline_color,
         user_input_text_color,
         backfill_color,
         width,
         height,
         get_cell_width(),
         get_cell_height(),
         lines,
         code_editor.selections,
         code_editor.get_cursor_x(),
         code_editor.get_cursor_y(),
         get_place(),
         code_editor.get_first_line_number(),
         (code_editor.get_mode() == ::CodeEditor::CodeEditor::EDIT) // in_edit_mode
      );

      //renderer.set_top_left_text(top_left_text);
      renderer.set_bottom_right_text(bottom_right_text);
      renderer.set_bottom_left_text(std::to_string(char_count));

      renderer.render();

      return;
    body_dependency_symbols:
      - std::cout
      - al_color_name
      - Hexagon::OneLineInputBox::Renderer
      - CodeEditor::Renderer
      - Hexagon::Elements::StageInfoOverlay
      - Hexagon::CodeEditor::FileCategoryDecorator


  - name: process_local_event
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    guard: [ code_editor ]
    body: return;
      // these two lines disabled during copy from Hexagon/CodeEditor/Stage
      ::OneLineInputBox::EventController stage_event_controller(this);
      stage_event_controller.process_local_event(event_name, action_data);
      return;
    body_dependency_symbols:
      - ::CodeEditor::EventController
      - ::OneLineInputBox::EventController


  - name: process_event
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    guard: [ code_editor ]
    body: |
      // these two lines disabled during copy from Hexagon/CodeEditor/Stage
      ::OneLineInputBox::EventController stage_event_controller(this);
      stage_event_controller.process_event(event);
      return;
    body_dependency_symbols:
      - ::CodeEditor::EventController
      - ::OneLineInputBox::EventController


  - name: code_editor_char_count
    type: int
    body: |
      if (code_editor.get_lines_ref().size() == 0) return 0;
      int char_count = 0;
      for (auto &line : code_editor.get_lines_ref())
      {
         char_count += line.size();
      }
      return char_count + (code_editor.get_lines_ref().size() - 1);


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: ::CodeEditor::CodeEditor
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
  - symbol: ::CodeEditor::EventController
    headers: [ Hexagon/CodeEditor/EventController.hpp ]
  - symbol: Hexagon::OneLineInputBox::Renderer
    headers: [ Hexagon/OneLineInputBox/Renderer.hpp ]
  - symbol: ::OneLineInputBox::EventController
    headers: [ Hexagon/OneLineInputBox/EventController.hpp ]
  - symbol: Hexagon::Elements::StageInfoOverlay
    headers: [ Hexagon/Elements/StageInfoOverlay.hpp ]
  - symbol: CodeEditor::Renderer
    headers: [ Hexagon/CodeEditor/Renderer.hpp ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: Hexagon::CodeEditor::FileCategoryDecorator
    headers: [ Hexagon/CodeEditor/FileCategoryDecorator.hpp ]
  - symbol: ALLEGRO_DISPLAY
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]


