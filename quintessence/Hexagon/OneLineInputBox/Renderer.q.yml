properties:


  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true
  - name: outline_color
    type: ALLEGRO_COLOR
    init_with: '{0.0f,0.0f,0.0f,0.0f}'
    constructor_arg: true
  - name: user_input_text_color
    type: ALLEGRO_COLOR
    init_with: '{0.0f,0.0f,0.0f,0.0f}'
    constructor_arg: true
  - name: backfill_color
    type: ALLEGRO_COLOR
    init_with: '{0.0f,0.0f,0.0f,0.0f}'
    constructor_arg: true
  - name: width
    type: float
    init_with: 1.0f
    constructor_arg: true
  - name: height
    type: float
    init_with: 1.0f
    constructor_arg: true
  - name: cell_width
    type: int
    init_with: 1
    constructor_arg: true
  - name: cell_height
    type: int
    init_with: 1
    constructor_arg: true
  - name: lines
    type: std::vector<std::string>
    init_with: '{}'
    constructor_arg: true
  - name: selections
    type: std::vector<CodeRange>
    init_with: '{}'
    constructor_arg: true
  - name: cursor_x
    type: int
    init_with: 0
    constructor_arg: true
  - name: cursor_y
    type: int
    init_with: 0
    constructor_arg: true
  - name: place
    type: placement3d
    init_with: '{}'
    constructor_arg: true
  - name: first_line_number
    type: int
    init_with: 0
    constructor_arg: true
  - name: in_edit_mode
    type: bool
    init_with: false
    constructor_arg: true
  - name: top_left_text
    type: std::string
    init_with: '""'
    constructor_arg: true
    setter: true
  - name: top_right_text
    type: std::string
    init_with: '""'
    constructor_arg: true
    setter: true
  - name: bottom_left_text
    type: std::string
    init_with: '""'
    constructor_arg: true
    setter: true
  - name: bottom_right_text
    type: std::string
    init_with: '""'
    constructor_arg: true
    setter: true
  - name: state
    type: std::string
    init_with: '"normal"'


functions:


  - name: change_state_to_submitted_and_pending_destruction
    body: |
      state = "submitted_and_pending_destruction";
      return;


  - name: is_state_to_submitted_and_pending_destruction
    type: bool
    body: |
      return state == "submitted_and_pending_destruction";


  - name: draw_selections
    parameters:
      - name: cell_width
        type: int
        default_argument: 1
      - name: cell_height
        type: int
        default_argument: 1
      - name: first_line_number
        type: int
        default_argument: 0
    body: |
      for (auto &selection : selections)
      {
         std::cout << " drawing selection " << selection << std::endl;
         CodeSelectionBoxRenderer(lines, selection, first_line_number, cell_width, cell_height).render();
      }
    body_dependency_symbols:
      - std::cout
      - std::endl
      - CodeSelectionBoxRenderer


  - name: get_primary_color
    type: ALLEGRO_COLOR
    body: |
      if (is_state_to_submitted_and_pending_destruction())
      {
         return ALLEGRO_COLOR{1, 1, 1, 1};
      }
      else return outline_color;


  - name: get_user_input_text_color
    type: ALLEGRO_COLOR
    body: |
      if (is_state_to_submitted_and_pending_destruction())
      {
         return ALLEGRO_COLOR{1, 1, 1, 1};
      }
      else return user_input_text_color;


  - name: render
    guards: [ font ]
    body: |
      //placement3d place = get_place();
      place.start_transform();

      //ALLEGRO_COLOR backfill_color = hexagon_get_backfill_color();
      //backfill_color = color::color(backfill_color, hexagon_get_backfill_opacity());

      ALLEGRO_COLOR color = get_primary_color();
      ALLEGRO_COLOR user_input_text_color = get_user_input_text_color();

      float outer_roundness = 12;
      float inner_roundness = 6;
      float padding = 6;
      al_draw_filled_rounded_rectangle(
         0-padding*2,
         0-padding*2,
         place.size.x+padding*2,
         place.size.y+padding*2,
         outer_roundness,
         outer_roundness,
         backfill_color);
      al_draw_rounded_rectangle(
         0-padding,
         0-padding,
         place.size.x+padding,
         place.size.y+padding,
         inner_roundness,
         inner_roundness,
         color,
         3.0);

      // draw_top_left_text
      if (!top_left_text.empty())
      {
         float line_height = al_get_font_line_height(font);
         float x = 0;
         float y = -padding - line_height/2;
         float x2 = x + al_get_text_width(font, top_left_text.c_str());
         float y2 = y + line_height;

         al_draw_filled_rectangle(x, y, x2, y2, backfill_color);
         al_draw_text(font, color, x, y, ALLEGRO_ALIGN_LEFT, top_left_text.c_str());
      }

      // draw_top_right_text
      if (!top_right_text.empty())
      {
         float line_height = al_get_font_line_height(font);
         float x = place.size.x;
         float y = -padding - line_height/2;

         float x1 = x - al_get_text_width(font, top_right_text.c_str());
         float y1 = y;
         float x2 = x;
         float y2 = y + line_height;

         al_draw_filled_rectangle(x1, y1, x2, y2, backfill_color);
         al_draw_text(font, color, x, y, ALLEGRO_ALIGN_RIGHT, top_right_text.c_str());
      }

      // draw_bottom_right_text
      if (!bottom_right_text.empty())
      {
         float line_height = al_get_font_line_height(font);
         float x = place.size.x;
         float y = place.size.y + padding - line_height/2;

         float x1 = x - al_get_text_width(font, bottom_right_text.c_str());
         float y1 = y;
         float x2 = x;
         float y2 = y + line_height;

         al_draw_filled_rectangle(x1, y1, x2, y2, backfill_color);
         al_draw_text(font, color, x, y, ALLEGRO_ALIGN_RIGHT, bottom_right_text.c_str());
      }

      if (!bottom_left_text.empty())
      {
         float line_height = al_get_font_line_height(font);
         //float x = place.size.x;
         float y = place.size.y + padding - line_height/2;

         float x1 = 0; //x - al_get_text_width(font, bottom_left_text.c_str());
         float y1 = y;
         float x2 = 0 + al_get_text_width(font, bottom_left_text.c_str());
         float y2 = y + line_height;

         al_draw_filled_rectangle(x1, y1, x2, y2, backfill_color);
         al_draw_text(font, color, x1, y1, 0, bottom_left_text.c_str());
      }

      float _cursor_y = cursor_y - first_line_number;
      float text_length_to_cursor_x = 0; //cursor_x * cell_width;
      float character_width_at_cursor_x = cell_width;
      if (cursor_y < 0 || cursor_y >= lines.size()) {}
      else
      {
         int length_of_line = lines[cursor_y].size();
         text_length_to_cursor_x = al_get_text_width(
            font,
            lines[cursor_y].substr(0, std::min(length_of_line, cursor_x)).c_str()
         );

         if (cursor_x < length_of_line)
         {
            std::string current_char_str_at_cursor_x = " ";
            current_char_str_at_cursor_x[0] = lines[cursor_y][cursor_x];
            character_width_at_cursor_x = al_get_text_width(font, current_char_str_at_cursor_x.c_str());
         }
         if (cursor_x > length_of_line)
         {
            float extra_x_length = 0;
            // TODO: There appears to be a bug in here that is making the extension longer
            int length_of_extension = cursor_x - length_of_line;
            extra_x_length = al_get_text_width(font, "x") * length_of_extension;
            text_length_to_cursor_x += extra_x_length;
         }
      }
      //switch(mode)
      //{
      //case EDIT:
      if (in_edit_mode)
      {
         float width_of_character_at_cursor_x = character_width_at_cursor_x;
         al_draw_filled_rectangle(
            text_length_to_cursor_x,
            _cursor_y*cell_height,
            text_length_to_cursor_x + width_of_character_at_cursor_x,
            _cursor_y*cell_height + cell_height,
            al_color_name("gray"));
      }
      //   break;
      //case INSERT:
      else
      {
         al_draw_line(
            text_length_to_cursor_x,
            _cursor_y*cell_height,
            text_length_to_cursor_x,
            _cursor_y*cell_height + cell_height,
            al_color_name("gray"),
            3);
         //break;
      }

      draw_selections(cell_width, cell_height, first_line_number);

      int line_height = al_get_font_line_height(font);
      for (int i=0; i<lines.size(); i++)
      {
         al_draw_text(font, user_input_text_color, 0, i*line_height, ALLEGRO_ALIGN_LEFT, lines[i].c_str());
      }

      place.restore_transform();
    body_dependency_symbols:
      - al_draw_filled_rounded_rectangle
      - color::color
      - placement3d


  - name: get_lines_character_count
    type: int
    body: |
      int char_count = 0;
      for (int i=0; i<lines.size(); i++)
      {
         char_count += lines[i].size();
      }
      return char_count + (lines.size() - 1);


dependencies:
  - symbol: std::vector<CodeRange>
    headers: [ vector, Hexagon/CodeRange.hpp ]
  - symbol: CodeSelectionBoxRenderer
    headers: [ Hexagon/CodeSelectionBoxRenderer.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ 'allegro5/allegro_primitives.h' ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ 'allegro5/allegro_primitives.h' ]
  - symbol: color::color
    headers: [ allegro_flare/color.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
