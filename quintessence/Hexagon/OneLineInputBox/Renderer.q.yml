properties:


  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
  - name: outline_and_text_color
    type: ALLEGRO_COLOR
    init_with: '{0.0f,0.0f,0.0f,0.0f}'
  - name: width
    type: float
    init_with: 1.0f
  - name: height
    type: float
    init_with: 1.0f
  - name: cell_width
    type: int
    init_with: 1
  - name: cell_height
    type: int
    init_with: 1


functions:


  - name: draw_selections
    parameters:
      - name: cell_width
        type: int
        default_argument: 1
      - name: cell_height
        type: int
        default_argument: 1
    body: |
      //for (auto &selection : selections)
      {
         //std::cout << " drawing selection " << selection << std::endl;
         //CodeRangeRenderer(get_lines_ref(), selection, first_line_number, cell_width, cell_height).render();
      }


  - name: render
    parameters:
      - name: cursor_x
        type: int
        default_argument: 0
      - name: cursor_y
        type: int
        default_argument: 0
      - name: place
        type: placement3d
        default_argument: '{}'
      - name: first_line_number
        type: int
        default_argument: 0
      - name: in_edit_mode
        type: bool
        default_argument: false
      - name: lines
        type: std::vector<std::string>
        default_argument: '{}'
    guards: [ font ]
    body: |
      //placement3d place = get_place();
      place.start_transform();

      ALLEGRO_COLOR backfill_color = hexagon_get_backfill_color();
      backfill_color = color::color(backfill_color, hexagon_get_backfill_opacity());

      float outer_roundness = 12;
      float inner_roundness = 6;
      float padding = 6;
      al_draw_filled_rounded_rectangle(
         0-padding*2,
         0-padding*2,
         place.size.x+padding*2,
         place.size.y+padding*2,
         outer_roundness,
         outer_roundness,
         backfill_color);
      al_draw_rounded_rectangle(
         0-padding,
         0-padding,
         place.size.x+padding,
         place.size.y+padding,
         inner_roundness,
         inner_roundness,
         outline_and_text_color,
         3.0);

      float _cursor_y = cursor_y - first_line_number;
      //switch(mode)
      //{
      //case EDIT:
      if (in_edit_mode)
      {
         al_draw_filled_rectangle(
            cursor_x*cell_width,
            _cursor_y*cell_height,
            cursor_x*cell_width + cell_width,
            _cursor_y*cell_height + cell_height,
            al_color_name("gray"));
      }
      //   break;
      //case INSERT:
      else
      {
         al_draw_line(
            cursor_x*cell_width,
            _cursor_y*cell_height,
            cursor_x*cell_width,
            _cursor_y*cell_height + cell_height,
            al_color_name("gray"),
            3);
         //break;
      }

      draw_selections(cell_width, cell_height);

      int line_height = al_get_font_line_height(font);
      for (int i=0; i<lines.size(); i++)
      {
         al_draw_text(font, outline_and_text_color, 0, i*line_height, ALLEGRO_ALIGN_LEFT, lines[i].c_str());
      }

      place.restore_transform();
    body_dependency_symbols:
      - al_draw_filled_rounded_rectangle
      - color::color
      - placement3d
      - hexagon_get_backfill_color


dependencies:
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ 'allegro5/allegro_primitives.h' ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ 'allegro5/allegro_primitives.h' ]
  - symbol: color::color
    headers: [ allegro_flare/color.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: hexagon_get_backfill_color
    headers: [ Hexagon/shared_globals.hpp ]

