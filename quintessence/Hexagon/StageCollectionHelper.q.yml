properties:


  - name: stages
    type: std::vector<StageInterface *>*
    init_with: nullptr
    constructor_arg: true


functions:


  - name: all
    type: std::vector<StageInterface *>
    guards: [ stages ]
    body: |
      return *stages;


  - name: count_code_editor_stages
    type: int
    guards: [ stages ]
    body: |
      int result = 0;
      for (auto &stage : *stages)
      {
         if (stage->get_type() == StageInterface::CODE_EDITOR) result++;
      }
      return result;


  - name: get_all_code_editor_stages_as_code_editor_stages
    type: std::vector<Hexagon::CodeEditor::Stage *>
    guards: [ stages ]
    body: |
      std::vector<Hexagon::CodeEditor::Stage *> result;
      for (auto &stage : (*stages))
      {
         StageInterface::type_t type = stage->get_type();
         if (type == StageInterface::CODE_EDITOR)
         {
            result.push_back(static_cast<Hexagon::CodeEditor::Stage *>(stage));
         }
      }
      return result;
    body_dependency_symbols:
      - std::vector<Hexagon::CodeEditor::Stage *>



  - name: get_frontmost_stage
    type: StageInterface*
    guards: [ stages ]
    body: |
      std::vector<StageInterface *> stages = *(this->stages);
      if (stages.size() == 0) return nullptr;
      return stages.back();


dependencies:


  - symbol: StageInterface*
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: std::vector<Hexagon::CodeEditor::Stage *>
    headers: [ vector, Hexagon/CodeEditor/Stage.hpp ]
  - symbol: std::vector<StageInterface *>*
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]

