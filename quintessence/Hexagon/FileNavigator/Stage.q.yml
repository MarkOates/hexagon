parent_classes:
  - class: 'StageInterface'
    scope: public
    init_with: "{}"
properties:
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
  - name: circle_color
    type: ALLEGRO_COLOR
    init_with: "al_color_name(\"green\")"
    getter: true
    setter: true
functions:
  - name: run
    type: std::string
    body: return "Hello World!";
  - name: render
    is_override: true
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: cell_width
        type: int
        default_argument: 10
      - name: cell_height
        type: int
        default_argument: 20
    body: |
      al_draw_filled_circle(100, 100, 60, get_circle_color());
      return;
    body_dependency_symbols:
      - al_color_name
      - al_draw_circle
  - name: change_to_yellow
    body: |
      set_circle_color(al_color_name("yellow"));
  - name: process_local_event
    is_override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: "\"\""
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      std::cout << "LocalEvent::" << event_name << std::endl;

      try
      {
         bool executed = false;

         if (event_name == "change_to_yellow")
         {
           executed = true;
           change_to_yellow();
         }
         //else if (event_name == ROTATE_STAGE_LEFT) { executed = true; rotate_stage_left(); }

         if (!executed) std::cerr << "???? cannot execute \"" << event_name << "\".  It does not exist." << std::endl;
      }
      catch (const std::exception &exception)
      {
         std::cerr << ">BOOM< cannot execute \"" << event_name << "\".  The following exception occurred: " << exception.what() << std::endl;
      }
    body_dependency_symbols:
      - std::endl
      - std::cout
      - std::cerr
  - name: save_file
    is_override: true
    type: bool
    body: |
      return true;
  - name: process_event
    is_override: true
    parameters:
      - name: action_data
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      return;
dependencies:
  - symbol: StageInterface
    headers: [ 'Hexagon/StageInterface.hpp' ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_EVENT&
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_COLOR
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_EVENT
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_FONT*
    headers: [ 'allegro5/allegro_font.h' ]
  - symbol: ActionData
    headers: [ 'Hexagon/ActionData.hpp' ]
  - symbol: al_color_name
    headers: [ 'allegro5/allegro_color.h' ]
  - symbol: std::endl
    headers: [ 'iostream' ]
  - symbol: std::cerr
    headers: [ 'iostream' ]
  - symbol: std::cout
    headers: [ 'iostream' ]
  - symbol: al_draw_circle
    headers: [ 'allegro5/allegro_primitives.h' ]
