parent_classes:
  - class: 'StageInterface'
    scope: public
    init_with: "{}"
properties:
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
  - name: circle_color
    type: ALLEGRO_COLOR
    init_with: "al_color_name(\"green\")"
    getter: true
    setter: true
  - name: nodes
    type: std::vector<std::string>
    init_with: "{}"
    getter: true
    setter: true
  - name: cursor_position
    type: int
    getter: true
    init_with: 0
  - name: node_root
    type: std::string
    init_with: "\"/Users/markoates/Repos\""
    getter: true
    setter: true
functions:
  - name: move_cursor_down
    type: void
    body: |
      cursor_position += 1;
  - name: run
    type: std::string
    body: return "Hello World!";
  - name: refresh_nodes
    body: |
      nodes.clear();
      nodes.push_back("/Users/markoates/Repos");
      OldFileSystemNode current_node(get_node_root());
      current_node.create_children();
      for (auto &node : current_node.get_children_ref())
      {
        nodes.push_back(node->infer_basename());
      }

      return;
    body_dependency_symbols:
      - OldFileSystemNode
  - name: render
    is_override: true
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: cell_width
        type: int
        default_argument: 10
      - name: cell_height
        type: int
        default_argument: 20
    body: |
      if (!font) throw std::runtime_error("font missing");

      int line = 0;
      int line_height = 36;
      int pos_x = 0;
      int pos_y = 0;
      int cursor_y = 0;
      ALLEGRO_COLOR font_color = al_color_name("white");
      for (auto &node : nodes)
      {
        std::string line_content = node;
        al_draw_text(font, font_color, pos_x, pos_y + cursor_y, 0, line_content.c_str());
        cursor_y += line_height;
      }

      al_draw_filled_circle(0, 0, 20, get_circle_color());
      return;
    body_dependency_symbols:
      - al_color_name
      - al_draw_circle
  - name: change_to_yellow
    body: |
      set_circle_color(al_color_name("yellow"));
  - name: process_local_event
    is_override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: "\"\""
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      std::cout << "LocalEvent::" << event_name << std::endl;

      try
      {
         bool executed = false;

         if (event_name == "change_to_yellow")
         {
           executed = true;
           change_to_yellow();
         }
         else if (event_name == "refresh_nodes")
         {
           executed = true;
           refresh_nodes();
         }
         //else if (event_name == ROTATE_STAGE_LEFT) { executed = true; rotate_stage_left(); }

         if (!executed) std::cerr << "???? cannot execute \"" << event_name << "\".  It does not exist." << std::endl;
      }
      catch (const std::exception &exception)
      {
         std::cerr << ">BOOM< cannot execute \"" << event_name << "\".  The following exception occurred: " << exception.what() << std::endl;
      }
    body_dependency_symbols:
      - std::endl
      - std::cout
      - std::cerr
  - name: save_file
    is_override: true
    type: bool
    body: |
      return true;
  - name: process_event
    is_override: true
    parameters:
      - name: action_data
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      return;
dependencies:
  - symbol: StageInterface
    headers: [ 'Hexagon/StageInterface.hpp' ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_EVENT&
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_COLOR
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_EVENT
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_FONT*
    headers: [ 'allegro5/allegro_font.h' ]
  - symbol: ActionData
    headers: [ 'Hexagon/ActionData.hpp' ]
  - symbol: al_color_name
    headers: [ 'allegro5/allegro_color.h' ]
  - symbol: std::endl
    headers: [ 'iostream' ]
  - symbol: std::cerr
    headers: [ 'iostream' ]
  - symbol: std::cout
    headers: [ 'iostream' ]
  - symbol: al_draw_circle
    headers: [ 'allegro5/allegro_primitives.h' ]
  - symbol: std::vector<std::string>
    headers: [ 'vector', 'string' ]
  - symbol: OldFileSystemNode
    headers: [ 'Hexagon/OldFileSystemNode.hpp' ]
