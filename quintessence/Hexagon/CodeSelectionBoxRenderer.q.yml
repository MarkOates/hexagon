properties:


  - name: lines
    type: std::vector<std::string>*
    init_with: nullptr
    constructor_arg: true

  - name: code_range
    type: CodeRange*
    init_with: nullptr
    constructor_arg: true

  - name: first_line_number
    type: int
    init_with: 0
    constructor_arg: true

  - name: cell_width
    type: int
    init_with: 0
    constructor_arg: true

  - name: cell_height
    type: int
    init_with: 0
    constructor_arg: true

  - name: selection_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1.0*0.4, 0.65*0.4, 0.0*0.4, 1.0*0.4}
    constructor_arg: true


functions:


  - name: render
    guards: [ code_range ]
    body: |
      int num_lines = code_range->infer_num_lines();
      CodePoint start = code_range->infer_cursor_start();
      CodePoint end = code_range->infer_cursor_end();

      //ALLEGRO_COLOR selection_color = al_color_name("orange");
      //selection_color.r *= 0.4;
      //selection_color.g *= 0.4;
      //selection_color.b *= 0.4;
      //selection_color.a *= 0.4;

      if (num_lines == 0) return; // this shouldn't happen, TODO: though perhaps with a negative selection
      if (num_lines == 1)
      {
         // draw beginning-to-end on single line
         //CodePoint start = code_range->infer_cursor_start();
         //CodePoint end = code_range->infer_cursor_end();

         int this_actual_line_y = start.get_y();
         int this_line_y = (this_actual_line_y - first_line_number);

         al_draw_filled_rectangle(
            start.get_x() * cell_width,
            this_line_y * cell_height,
            end.get_x() * cell_width,
            (this_line_y + 1) * cell_height,
            selection_color
         );
      }
      if (num_lines >= 2)
      {
         // draw first line
         //CodePoint start = code_range.infer_cursor_start();
         //CodePoint end = code_range.infer_cursor_end();

         int this_actual_line_y = start.get_y();
         int this_line_y = this_actual_line_y - first_line_number;

         al_draw_filled_rectangle(
            start.get_x() * cell_width,
            this_line_y * cell_height,
            get_line_length(this_actual_line_y) * cell_width,
            (this_line_y + 1) * cell_height,
            selection_color
         );

         if (num_lines > 2)
         {
            // draw intermediate lines
            //CodePoint start = code_range.infer_cursor_start();
            //CodePoint end = code_range.infer_cursor_end();

            for (int i = (start.get_y()+1); i < end.get_y(); i++)
            {
               this_line_y = (i - first_line_number);
               al_draw_filled_rectangle(0, this_line_y * cell_height, get_line_length(i) * cell_width, (this_line_y + 1) * cell_height, selection_color);
            }
         }

         // draw last line

         //CodePoint start = code_range.infer_cursor_start();
         //CodePoint end = code_range.infer_cursor_end();

         this_actual_line_y = end.get_y();
         this_line_y = (this_actual_line_y - first_line_number);
         al_draw_filled_rectangle(0, (this_line_y * cell_height), end.get_x() * cell_width, (this_line_y+1) * cell_height, selection_color);
      }

      return;
    body_dependency_symbols:
      - ALLEGRO_COLOR
      - al_draw_filled_rectangle


  - name: verify_line_in_range
    type: bool
    private: true
    parameters:
      - name: line_num
        type: int
        default_argument: 0
    guard: [ lines ]
    body: |
      if (line_num >= lines->size()) return false;
      if (line_num < 0) return false;
      return true;


  - name: get_line_length
    type: int
    private: true
    parameters:
      - name: line_num
        type: int
        default_argument: 0
    guards: [ lines ]
    body: |
      if (!verify_line_in_range(line_num)) return 0;
      return (*lines)[line_num].length();
      return 0;


dependencies:


  - symbol: CodeRange*
    headers: [ Hexagon/CodeRange.hpp ]
  - symbol: std::vector<std::string>*
    headers: [ vector, string ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]


