properties:


  - name: component
    type: Blast::Project::Component
    init_with: '{}'
    constructor_arg: true

  - name: simplify_relatives_list
    type: bool
    init_with: true


functions:


  - name: build_dependents_list
    type: std::vector<std::string>
    body: |
      Hexagon::ComponentRelationsNavigator::DocumentationDependentsJSONLoader dependents_relations_loader;
      return dependents_relations_loader.build_dependent_names_for_component_name(component.get_name());
    body_dependency_symbols:
      - Hexagon::ComponentRelationsNavigator::DocumentationDependentsJSONLoader


  - name: build_relatives_list
    type: std::vector<std::string>
    body: |
      Blast::Project::ComponentRelativeLister relative_lister(&component);
      std::vector<std::string> result_component_names = relative_lister.list_component_relative_names();
      return result_component_names;
    body_dependency_symbols:
      - Blast::Project::ComponentRelativeLister


  - name: build_dependencies_list
    type: std::vector<std::string>
    body: |
      // TODO: test this functionality
      Blast::Project::ComponentDependencyLister dependency_lister(&component);
      std::vector<std::string> result_component_names = dependency_lister.list_component_dependency_names();
      return result_component_names;
    body_dependency_symbols:
      - Blast::Project::ComponentDependencyLister


dependencies:


  - symbol: Blast::Project::ComponentDependencyLister
    headers: [ Blast/Project/ComponentDependencyLister.hpp ]
  - symbol: Blast::Project::ComponentRelativeLister
    headers: [ Blast/Project/ComponentRelativeLister.hpp ]
  - symbol: Blast::Project::Component
    headers: [ Blast/Project/Component.hpp ]
  - symbol: std::vector<Blast::Project::Component>
    headers: [ vector, Blast/Project/Component.hpp ]
  - symbol: Hexagon::ComponentRelationsNavigator::DocumentationDependentsJSONLoader
    headers: [ Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader.hpp ]


