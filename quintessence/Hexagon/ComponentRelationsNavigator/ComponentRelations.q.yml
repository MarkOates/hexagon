properties:


  - name: component
    type: Blast::Project::Component
    init_with: '{}'
    constructor_arg: true

  - name: simplify_relatives_list
    type: bool
    init_with: true


functions:


  - name: build_dependents_list
    type: std::vector<std::string>
    body: |
      /*
      { // Strategy 1: Use Dependencies JSON from documentation, and reverse it
         //std::string dependents_json_filename = "/Users/markoates/Repos/hexagon/documentation/dependents.json";
         std::string dependents_json_filename =
            build_implicit_json_dependents_filename_for_project(component.get_project_root());
         Hexagon::ComponentRelationsNavigator::DocumentationDependentsJSONLoader dependents_relations_loader(
            dependents_json_filename
         );
         return dependents_relations_loader.build_dependent_names_for_component_name(component.get_name());
      }
      */
      { // Strategy 2: Ues Hexagon::DependencyManager, which reads from /.deps folder
         std::string component_name = component.get_name();
         Hexagon::DependencyManager dependency_manager(component.get_project_root() + "/");
         //Hexagon::DependencyManager dependency_manager(TEST_FIXTURE_PROJECT_FOLDER);

         //std::cout << " - component.get_project_root(): \"" << component.get_project_root() << "\"" << std::endl;
         //std::cout << "   component.get_name(): \"" << component.get_name() << "\"" << std::endl;
         //std::cout << "                               " << std::endl;

         dependency_manager.load_from_source_tree();
         std::map<std::string, std::set<std::string>> dependents = dependency_manager.get_dependents();
         
         //std::cout << "   num_dependents_entries_loaded: \"" << dependents.size() << "\"" << std::endl;

         //for (auto &dep : dependents)
         //{
            //std::cout << "      - \"" << dep.first << "\"" << std::endl;
         //}

         bool component_exists_in_deps_listing = dependents.count(component.get_name()) != 0;
         if (!component_exists_in_deps_listing) return std::vector<std::string>({"not-found"});
         // convert our set to a vector
         std::vector<std::string> result;
         for (auto &element : dependents[component.get_name()])
         {
            result.push_back(element);
         }
         return result; //dependents[component.get_name()];
      }
    body_dependency_symbols:
      - Hexagon::ComponentRelationsNavigator::DocumentationDependentsJSONLoader
      - Hexagon::DependencyManager


  - name: build_relatives_list
    type: std::vector<std::string>
    body: |
      Blast::Project::ComponentRelativeLister relative_lister(&component);
      std::vector<std::string> result_component_names = relative_lister.list_component_relative_names();
      return result_component_names;
    body_dependency_symbols:
      - Blast::Project::ComponentRelativeLister


  - name: build_dependencies_list
    type: std::vector<std::string>
    body: |
      // TODO: test this functionality
      Blast::Project::ComponentDependencyLister dependency_lister(&component);
      std::vector<std::string> result_component_names = dependency_lister.list_component_dependency_names();
      return result_component_names;
    body_dependency_symbols:
      - Blast::Project::ComponentDependencyLister


  - name: build_implicit_json_dependents_filename_for_project
    type: std::string
    static: true
    private: true
    parameters:
      - name: project_root
        type: std::string
        default_argument: '"[unset-project_root]"'
    guards: [ valid_project_root(&project_root) ]
    body: |
      return project_root + "/documentation/dependents.json";


  - name: valid_project_root
    type: bool
    static: true
    private: true
    parameters:
      - name: project_root
        type: std::string*
        default_argument: nullptr
    guards: [ project_root ]
    body: |
       std::string expected_prefix = "/Users/markoates/Repos/";
       bool has_valid_prefixed_path = (project_root->compare(0, expected_prefix.length(), expected_prefix) == 0);
       if (!has_valid_prefixed_path) return false;
       
       if (project_root->empty()) return false;
       for (char c : *project_root)
       {
          if (!std::isalnum(c) && c != '_' && c != '-' && c != '/')
          {
             return false;
          }
       }
       return true;


dependencies:


  - symbol: Blast::Project::ComponentDependencyLister
    headers: [ Blast/Project/ComponentDependencyLister.hpp ]
  - symbol: Blast::Project::ComponentRelativeLister
    headers: [ Blast/Project/ComponentRelativeLister.hpp ]
  - symbol: Blast::Project::Component
    headers: [ Blast/Project/Component.hpp ]
  - symbol: std::vector<Blast::Project::Component>
    headers: [ vector, Blast/Project/Component.hpp ]
  - symbol: Hexagon::ComponentRelationsNavigator::DocumentationDependentsJSONLoader
    headers: [ Hexagon/ComponentRelationsNavigator/DocumentationDependentsJSONLoader.hpp ]
  - symbol: Hexagon::DependencyManager
    headers: [ Hexagon/DependencyManager.hpp ]


