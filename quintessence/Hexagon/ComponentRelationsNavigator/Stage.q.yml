parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: 'StageInterface::COMPONENT_RELATIONS_NAVIGATOR'


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
  - name: dependents_menu_items
    type: std::vector<std::tuple<std::string, std::string>>
    init_with: '{{"Foo", "foo"}, {"Bar", "bar"}}'
    constructor_arg: true
  - name: relatives_menu_items
    type: std::vector<std::tuple<std::string, std::string>>
    init_with: '{{"Baz", "baz"}, {"Buz", "buz"}}'
    constructor_arg: true
  - name: dependencies_menu_items
    type: std::vector<std::tuple<std::string, std::string>>
    init_with: '{{"Fiz", "fiz"}, {"Foz", "foz"}}'
    constructor_arg: true
  - name: dependents_menu
    type: Hexagon::Elements::ListMenu
    init_with: 'font_bin, "Dependents", dependents_menu_items'
  - name: relatives_menu
    type: Hexagon::Elements::ListMenu
    init_with: 'font_bin, "Relatives", relatives_menu_items'
  - name: dependencies_menu
    type: Hexagon::Elements::ListMenu
    init_with: 'font_bin, "Dependencies", dependencies_menu_items'
  - name: dependents_menu_place
    type: placement3d
    init_with: '-700, 0, 0'
  - name: relatives_menu_place
    type: placement3d
    init_with: '0, 0, 0'
  - name: dependencies_menu_place
    type: placement3d
    init_with: '700, 0, 0'
  - name: initialized
    type: bool
    init_with: false
    getter: true
  - name: currently_active_menu
    type: Hexagon::Elements::ListMenu*
    init_with: nullptr
    getter: true
    private: true


functions:


  - name: initialize
    guards: [ (!get_initialized()) ]
    body: |
      set_currently_active_menu(&relatives_menu);
      initialized = true;
      return;


  - name: set_currently_active_menu
    parameters:
      - name: menu
        type: Hexagon::Elements::ListMenu*
        default_argument: nullptr
    guards: [ menu ]
    body: |
      dependents_menu.set_active(false);
      relatives_menu.set_active(false);
      dependencies_menu.set_active(false);

      this->currently_active_menu = menu;
      if (currently_active_menu) currently_active_menu->set_active(true);

      return;


  - name: is_currently_active_menu
    type: bool
    parameters:
      - name: currently_active_menu
        type: Hexagon::Elements::ListMenu*
        default_argument: nullptr
    body: |
      return (get_currently_active_menu() == currently_active_menu);


  - name: render
    guards: [ get_initialized() ]
    override: true
    body: |
      placement3d &place = get_place();
      place.start_transform();
         dependents_menu_place.start_transform();
            dependents_menu.render();
         dependents_menu_place.restore_transform();
         relatives_menu_place.start_transform();
            relatives_menu.render();
         relatives_menu_place.restore_transform();
         dependencies_menu_place.start_transform();
            dependencies_menu.render();
         dependencies_menu_place.restore_transform();
      place.restore_transform();
      return;


  - name: move_cursor_up
    body: |
      if (is_currently_active_menu(&dependents_menu))
      {
         dependents_menu.move_cursor_up();
      }
      else if (is_currently_active_menu(&relatives_menu))
      {
         relatives_menu.move_cursor_up();
      }
      else if (is_currently_active_menu(&dependencies_menu))
      {
         dependencies_menu.move_cursor_up();
      }
      return;


  - name: move_cursor_down
    body: |
      if (is_currently_active_menu(&dependents_menu))
      {
         dependents_menu.move_cursor_down();
      }
      else if (is_currently_active_menu(&relatives_menu))
      {
         relatives_menu.move_cursor_down();
      }
      else if (is_currently_active_menu(&dependencies_menu))
      {
         dependencies_menu.move_cursor_down();
      }
      return;


  - name: move_cursor_left
    guards: [ get_initialized() ]
    body: |
      if (is_currently_active_menu(&dependents_menu))
      {
         set_currently_active_menu(&dependencies_menu);
      }
      else if (is_currently_active_menu(&relatives_menu))
      {
         set_currently_active_menu(&dependents_menu);
      }
      else if (is_currently_active_menu(&dependencies_menu))
      {
         set_currently_active_menu(&relatives_menu);
      }
      else
      {
         // throw an error
      }
      return;


  - name: move_cursor_right
    guards: [ get_initialized() ]
    body: |
      if (is_currently_active_menu(&dependents_menu))
      {
         set_currently_active_menu(&relatives_menu);
      }
      else if (is_currently_active_menu(&relatives_menu))
      {
         set_currently_active_menu(&dependencies_menu);
      }
      else if (is_currently_active_menu(&dependencies_menu))
      {
         set_currently_active_menu(&dependents_menu);
      }
      else
      {
         // throw an error
      }
      return;


  - name: process_event
    guards: [ get_initialized() ]
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      switch(event.type)
      {
      case ALLEGRO_EVENT_KEY_CHAR:
        switch(event.keyboard.keycode)
        {
          case ALLEGRO_KEY_K:
            move_cursor_up();
            break;
          case ALLEGRO_KEY_J:
            move_cursor_down();
            break;
          case ALLEGRO_KEY_H:
            move_cursor_left();
            break;
          case ALLEGRO_KEY_L:
            move_cursor_right();
            break;
          case ALLEGRO_KEY_ENTER:
            emit_submission();
            break;
        }
        break;
      }
      return;


  - name: set_upcase
    parameters:
      - name: upcase
        type: bool
        default_argument: "false"
    body: |
      dependents_menu.set_upcase(upcase);
      relatives_menu.set_upcase(upcase);
      dependencies_menu.set_upcase(upcase);
      return;


  - name: process_local_event
    guards: [ get_initialized() ]
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: "\"\""
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      return;


  - name: emit_submission
    private: true
    body: |
      std::cout << "DUMMY_MESSAGE: Sumitting ComponentRelationsNavigator/Stage with current selections (\""
                << dependents_menu.get_current_list_item_identifier() << ", "
                << relatives_menu.get_current_list_item_identifier() << ", "
                << dependencies_menu.get_current_list_item_identifier() << ")"
                << "\"" << std::endl;
    body_dependency_symbols:
      - std::cout


dependencies:


  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::Elements::ListMenu
    headers: [ Hexagon/Elements/ListMenu.hpp ]
  - symbol: Hexagon::Elements::ListMenu*
    headers: [ Hexagon/Elements/ListMenu.hpp ]
  - symbol: ActionData
    headers: [ 'Hexagon/ActionData.hpp' ]
  - symbol: std::vector<std::tuple<std::string, std::string>>
    headers: [ vector, tuple, string ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]



