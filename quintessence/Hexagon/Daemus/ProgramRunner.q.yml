properties:


  - name: quintessence_build_executable
    type: std::string
    init_with: '"/Users/markoates/Repos/blast/bin/programs/quintessence_from_yaml"'
    constructor_arg: true

  - name: daemus_buildfile_directory
    type: std::string
    init_with: '"/Users/markoates/Repos/hexagon/bin/programs/data/tmp/"'
    getter: true

  - name: daemus_buildfile_filename
    type: std::string
    init_with: '"daemus_build.txt"'
    getter: true

  - name: watch_mode
    type: Hexagon::Daemus::ProgramRunner::WatchMode
    init_with: WATCH_FOR_CHANGE_IN_BUILDFILE
    getter: true
    setter: true


enums:


  - name: WatchMode
    scope: public
    enumerators:
      - UNDEFINED
      - WATCH_FOR_CHANGES_IN_TREE
      - WATCH_FOR_CHANGE_IN_BUILDFILE
      - RUN_ONCE


functions:


  - name: run
    type: void
    body: |
      al_init();

      if (watch_mode == WATCH_FOR_CHANGE_IN_BUILDFILE)
      {
         Hexagon::System::Config hexagon_config;
         hexagon_config.initialize();
         std::string project_directory = hexagon_config.get_default_navigator_directory();
         watch_for_buildfile(project_directory);
      }
      else if (watch_mode == WATCH_FOR_CHANGES_IN_TREE)
      {
         Hexagon::System::Config hexagon_config;
         hexagon_config.initialize();
         std::string project_directory = hexagon_config.get_default_navigator_directory();
         cd_to_project_directory_and_run_with_rerun(project_directory);
      }
      else
      {
         throw std::runtime_error("Hexagon::Daemus::ProgramRunner::run: error: unhandled case for \"watch_mode\"");
      }

      al_uninstall_system();
      return;


  - name: run_full_rebuild
    type: void
    body: |
      std::string full_rebuild_command = "make clean && make programs && make && make clean && make programs && make";
      execute_command(full_rebuild_command);


  - name: run_simple_echo_command
    body: execute_command("printf \"hello\"");


  - name: run_simple_sleep_command
    body: execute_command("echo \"sleeping\"; sleep 0.5; echo \"done\"");


  - name: run_once
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      std::string actual_command_to_execute_in_project_directory = "make focus";

      // TODO: note this override of 
      project_directory = "`cat /Users/markoates/Repos/hexagon/bin/programs/data/tmp/current_project_directory.txt`";
      //project_directory = "/Users/markoates/Repos/hexagon/ ";

      std::stringstream result_command;
      result_command << "cd "
                     << project_directory
                     << " && "
                     << actual_command_to_execute_in_project_directory;

      std::string output = execute_command(result_command.str());
    body_dependency_symbols:
      - std::stringstream


  - name: cd_to_project_directory_and_run_with_rerun
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      std::string actual_command_to_execute_in_project_directory = "make focus";

      std::string build_command = "rerun" \
         " " \
         "-c" \
         " " \
         "--background" \
         " " \
         "--ignore \"{**/bin/programs/data/tmp/*,**bin/programs/data/builds/*,**/documentation/*\"}" \
         " " \
         "-p \"**/*.{rb,js,tsx,coffee,css,scss,sass,erb,html,haml,ru,yml,slim,md,feature,c,h,cpp,hpp,txt,cfg}\"" \
         " " \
         "\"(cd ";

      build_command += project_directory + " && " + actual_command_to_execute_in_project_directory + ")\"";

      std::string build_command_wrapped = "(cd " + project_directory + " && " + build_command + ")";

      std::string output = execute_command(build_command);
      return;
    body_dependency_symbols:
      - Hexagon::System::Config
      - Hexagon::System::Config*


  - name: watch_for_buildfile
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      // this will, being run from any directory, will watch for a new buildfile in the "project_directory"
      // (as set by the hexagon config), and then cd into that directory and run make focus

      std::string actual_command_to_execute_in_project_directory = "make focus";

      std::cout << "watching for buildfile \"" << get_daemus_buildfile_filename() << "\" "
                << "in directory (\"" << get_daemus_buildfile_directory() << "\""
                << std::endl;

      std::string build_command = "rerun" \
        " " \
        "-c" \
        " " \
        "--background" \
        " " \
        "--dir \"" + get_daemus_buildfile_directory() + "\"" \
        " " \
        "-p \"" + get_daemus_buildfile_filename() + "\"" \
        " "
        //"\"(" \
        //"cd "
        ;

      //project_directory = "`cat /Users/markoates/Repos/hexagon/bin/programs/data/tmp/current_project_directory.txt` ";

      //build_command += project_directory + " && " + actual_command_to_execute_in_project_directory + ")\"";
      build_command += "\"(/Users/markoates/Repos/hexagon/bin/programs/daemus run_once)\"";

      std::string output = execute_command(build_command);
      return;
    body_dependency_symbols:
      - std::cout
      - Hexagon::System::Config
      - Hexagon::System::Config*


  - name: run_with_rerun
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      std::string actual_command_to_execute_in_project_directory = "make focus";

      std::string build_command = "rerun" \
        " " \
        "-c" \
        " " \
        "--background" \
        " " \
        "--ignore \"**/bin/programs/data/tmp/*\"" \
        " " \
        "-p \"**/*.{rb,js,tsx,coffee,css,scss,sass,erb,html,haml,ru,yml,slim,md,feature,c,h,cpp,hpp,txt,cfg}\"" \
        " " \
        "\"(cd ";

      build_command += project_directory + " && " + actual_command_to_execute_in_project_directory + ")\"";
      //build_command += "(/Users/markoates/Repos/hexagon/bin/programs/daemus run_once)\"";

      std::string output = execute_command(build_command);
      return;
    body_dependency_symbols:
      - Hexagon::System::Config
      - Hexagon::System::Config*


  - name: execute_command
    type: std::string
    private: true
    parameters:
      - name: command
        type: std::string
        default_argument: "\"\""
    body: |
      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         command,
         Blast::ShellCommandExecutorWithCallback::simple_cout_callback
         //Blast::ShellCommandExecutorWithCallback::simple_silent_callback
      );
      return shell_command_executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback


  - name: run_component_test
    type: std::vector<Hexagon::Testing::GoogleTestRunTestResult>
    parameters:
      - name: component
        type: Blast::Project::Component
        default_argument: '{}'
    body: |
      std::string name = component.get_name();
      std::string project_directory = component.get_project_root();
      std::string test_binary = component.generate_full_path_test_binary_filename();

      if (!Blast::DirectoryExistenceChecker(project_directory).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_component_test: error: "
                       << "the expected project directory \"" << project_directory << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }
      if (!Blast::FileExistenceChecker(test_binary).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_component_test: error: "
                       << "the test binary \"" << test_binary << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }

      // execute the test
      std::stringstream command;
      command << "("
                 << "cd " << project_directory
                 << " && "
                 << test_binary
              << ")";
      std::string test_run_output = __execute_command(command.str(), false);

      // parse the results
      Hexagon::Testing::GoogleTestRunOutputParser google_test_run_output_parser(test_run_output);

      bool successful_parse = google_test_run_output_parser.parse();
      if (!successful_parse) throw std::runtime_error("fooobbarrr");
      std::vector<Hexagon::Testing::GoogleTestRunTestResult> test_results =
         google_test_run_output_parser.get_parsed_test_results();

      return test_results;
    body_dependency_symbols:
      - Hexagon::Testing::GoogleTestRunOutputParser
      - std::vector<Hexagon::Testing::GoogleTestRunTestResult>


  - name: run_build_quintessence_file
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
      - name: quintessence_filename
        type: std::string
        default_argument: '""'
    body: |
      if (!Blast::DirectoryExistenceChecker(project_directory).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the expected project directory \"" << project_directory << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }
      if (!Blast::FileExistenceChecker(quintessence_build_executable).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the expected executable \"" << quintessence_build_executable << "\" "
                       << "is not present";
         throw std::runtime_error(error_message.str());
      }
      std::string full_path_to_quintessence_file = project_directory + "/" + quintessence_filename;
      if (!Blast::FileExistenceChecker(full_path_to_quintessence_file).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the quintessence file \"" << quintessence_filename << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }

      std::stringstream command;
      command << "("
                 << "cd " << project_directory
                 << " && "
                 << quintessence_build_executable << " -f " << quintessence_filename
              << ")";
      __execute_command(command.str(), false);

      return;
    body_dependency_symbols:
      - Blast::DirectoryExistenceChecker
      - Blast::FileExistenceChecker
      - std::stringstream


  - name: output_pid
    type: void
    body: |
      std::cout << "pid: " << getpid() << std::endl;
      return;
    body_dependency_symbols:
      - std::cout
      - std::endl
      - getpid


  - name: __execute_command
    private: true
    type: std::string
    parameters:
      - name: command
        type: std::string
        default_argument: '""'
      - name: output_to_stdout
        type: bool
        default_argument: true
    body: |
      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         command,
         output_to_stdout ? Blast::ShellCommandExecutorWithCallback::simple_cout_callback
                          : Blast::ShellCommandExecutorWithCallback::simple_silent_callback
      );
      shell_command_executor.set_capture_stderr(false); // TODO: Remove this line
                                                        // NOTE: This should probably be set to true. A recent
                                                        // change to Blast::ShellCommandExecutor resulted in
                                                        // stderr being captured by default, and as such this
                                                        // command is now running with errors.
      return shell_command_executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback


  - name: find_oldest_filename
    static: true
    type: std::string
    parameters:
      - name: path
        type: std::string
        default_argument: '"/Users/markoates/Repos/hexagon/bin/programs/data/builds/pending"'
      - name: ignore_dotfiles
        type: bool
        default_argument: true
    body: |
      // check that path exists, or raise
      if (!Blast::DirectoryExistenceChecker(path).exists())
      {
         std::stringstream error_message;
         error_message << "[Hexagon::Daemus::ProgramRunner::find_oldest_filename] error: The directory "
                       << "\"" << path << "\" does not exist";
         throw std::runtime_error(error_message.str());
      }

      std::vector<std::pair<std::filesystem::file_time_type, std::string>> listing;
      for (const auto &entry : std::filesystem::directory_iterator(path))
      {
         std::filesystem::file_time_type file_time = std::filesystem::last_write_time(entry);
         std::string filename = entry.path().filename();
         std::string full_path_filename = entry.path().string();

         if (ignore_dotfiles)
         {
            bool file_is_a_dotfile = false;
            if (!filename.empty() && (filename[0] == '.')) file_is_a_dotfile = true;
            if (!file_is_a_dotfile)
            {
               listing.push_back(std::pair<std::filesystem::file_time_type, std::string>(file_time, full_path_filename));
            }
         }
         else
         {
            listing.push_back(std::pair<std::filesystem::file_time_type, std::string>(file_time, full_path_filename));
         }
      }

      if (listing.empty()) return "";

      std::sort(listing.begin(), listing.end());

      return listing[0].second;
    body_dependency_symbols:
      - Blast::DirectoryExistenceChecker
      - std::filesystem::last_write_time
      - std::chrono
      - std::filesystem::is_empty


dependencies:


  - symbol: Blast::DirectoryExistenceChecker
    headers: [ Blast/DirectoryExistenceChecker.hpp ]
  - symbol: std::chrono
    headers: [ chrono ]
  - symbol: std::filesystem::last_write_time
    headers: [ filesystem ]
  - symbol: std::filesystem::is_empty
    headers: [ filesystem ]
  - symbol: Blast::Project::Component
    headers: [ Blast/Project/Component.hpp ]
  - symbol: getpid
    headers: [ unistd.h ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: Blast::DirectoryExistenceChecker
    headers: [ Blast/DirectoryExistenceChecker.hpp ]
  - symbol: Hexagon::Testing::GoogleTestRunOutputParser
    headers: [ Hexagon/Testing/GoogleTestRunOutputParser.hpp ]
  - symbol: std::vector<Hexagon::Testing::GoogleTestRunTestResult>
    headers: [ vector, Hexagon/Testing/GoogleTestRunTestResult.hpp ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: Hexagon::System::Config
    headers: [ Hexagon/System/Config.hpp ]
  - symbol: Hexagon::System::Config*
    headers: [ Hexagon/System/Config.hpp ]
  - symbol: Hexagon::Daemus::ProgramRunner::WatchMode
    headers: [ ]
  - symbol: Hexagon::Testing::GoogleTestRunTestResult
    headers: [ Hexagon/Testing/GoogleTestRunTestResult.hpp ]


