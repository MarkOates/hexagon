properties:


  - name: quintessence_build_executable
    type: std::string
    init_with: '"/Users/markoates/Repos/blast/bin/programs/quintessence_from_yaml"'
    constructor_arg: true

  - name: current_build
    type: Hexagon::Daemus::Builds::Base*
    init_with: nullptr
    getter: true

  - name: builds
    type: std::vector<Hexagon::Daemus::Builds::Base*>
    init_with: '{}'
    getter_ref: true


functions:


  - name: create_extrapolate_quintessence_build
    type: Hexagon::Daemus::Builds::ExtrapolateQuintessence*
    body: |
      Hexagon::Daemus::Builds::ExtrapolateQuintessence* result = new Hexagon::Daemus::Builds::ExtrapolateQuintessence();
      return result;


  - name: run_component_test
    type: std::vector<Hexagon::Testing::GoogleTestRunTestResult>
    parameters:
      - name: component
        type: Blast::Project::Component
        default_argument: '{}'
    body: |
      std::string name = component.get_name();
      std::string project_directory = component.get_project_root();
      std::string test_binary = component.generate_full_path_test_binary_filename();

      if (!Blast::DirectoryExistenceChecker(project_directory).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_component_test: error: "
                       << "the expected project directory \"" << project_directory << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }
      if (!Blast::FileExistenceChecker(test_binary).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_component_test: error: "
                       << "the test binary \"" << test_binary << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }

      // execute the test
      std::stringstream command;
      command << "("
                 << "cd " << project_directory
                 << " && "
                 << test_binary
              << ")";
      std::string test_run_output = execute_command(command.str(), false);

      // parse the results
      Hexagon::Testing::GoogleTestRunOutputParser google_test_run_output_parser(test_run_output);

      bool successful_parse = google_test_run_output_parser.parse();
      if (!successful_parse) throw std::runtime_error("fooobbarrr");
      std::vector<Hexagon::Testing::GoogleTestRunTestResult> test_results =
         google_test_run_output_parser.get_parsed_test_results();

      return test_results;
    body_dependency_symbols:
      - Hexagon::Testing::GoogleTestRunOutputParser
      - std::vector<Hexagon::Testing::GoogleTestRunTestResult>


  - name: run_build_quintessence_file
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
      - name: quintessence_filename
        type: std::string
        default_argument: '""'
    body: |
      if (!Blast::DirectoryExistenceChecker(project_directory).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the expected project directory \"" << project_directory << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }
      if (!Blast::FileExistenceChecker(quintessence_build_executable).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the expected executable \"" << quintessence_build_executable << "\" "
                       << "is not present";
         throw std::runtime_error(error_message.str());
      }
      std::string full_path_to_quintessence_file = project_directory + "/" + quintessence_filename;
      if (!Blast::FileExistenceChecker(full_path_to_quintessence_file).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the quintessence file \"" << quintessence_filename << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }

      std::stringstream command;
      command << "("
                 << "cd " << project_directory
                 << " && "
                 << quintessence_build_executable << " -f " << quintessence_filename
              << ")";
      execute_command(command.str(), false);

      return;
    body_dependency_symbols:
      - Blast::DirectoryExistenceChecker
      - Blast::FileExistenceChecker
      - std::stringstream


  - name: output_pid
    type: void
    body: |
      std::cout << "pid: " << getpid() << std::endl;
      return;
    body_dependency_symbols:
      - std::cout
      - std::endl
      - getpid


  - name: execute_command
    private: true
    type: std::string
    parameters:
      - name: command
        type: std::string
        default_argument: '""'
      - name: output_to_stdout
        type: bool
        default_argument: true
    body: |
      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         command,
         output_to_stdout ? Blast::ShellCommandExecutorWithCallback::simple_cout_callback
                          : Blast::ShellCommandExecutorWithCallback::simple_silent_callback
      );
      return shell_command_executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback


dependencies:


  - symbol: Hexagon::Daemus::Builds::ExtrapolateQuintessence*
    headers: [ Hexagon/Daemus/Builds/ExtrapolateQuintessence.hpp ]
  - symbol: Hexagon::Daemus::Builds::Base*
    headers: [ Hexagon/Daemus/Builds/Base.hpp ]
  - symbol: std::vector<Hexagon::Daemus::Builds::Base*>
    headers: [ vector, Hexagon/Daemus/Builds/Base.hpp ]
  - symbol: getpid
    headers: [ unistd.h ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: Blast::DirectoryExistenceChecker
    headers: [ Blast/DirectoryExistenceChecker.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: Blast::Project::Component
    headers: [ Blast/Project/Component.hpp ]
  - symbol: Hexagon::Testing::GoogleTestRunOutputParser
    headers: [ Hexagon/Testing/GoogleTestRunOutputParser.hpp ]
  - symbol: std::vector<Hexagon::Testing::GoogleTestRunTestResult>
    headers: [ vector, Hexagon/Testing/GoogleTestRunTestResult.hpp ]
