properties:


  - name: messages
    type: std::vector<Hexagon::ChatCPTIntegration::Messages::Base*>
    init_with: ''


functions:


  - name: append_text_message
    parameters:
      - name: body
        type: std::string
        default_argument: '"[unset-append_text_message]"'
    body: |
      Hexagon::ChatCPTIntegration::Messages::Text *result = new Hexagon::ChatCPTIntegration::Messages::Text(body);
      messages.push_back(result);
      return;
    body_dependency_symbols:
      - Hexagon::ChatCPTIntegration::Messages::Text


  - name: clear
    body: |
      for (auto &message : messages) { delete message; }
      messages.clear();
      return;


  - name: get_last_n_messages
    type: std::vector<Hexagon::ChatCPTIntegration::Messages::Base*>
    parameters:
      - name: count
        type: uint32_t
        default_argument: 3
    body: |
       std::vector<Messages::Base*> lastNMessages;

       // Make sure n is not greater than the number of messages in the vector
       if (count > messages.size()) {
           count = messages.size();
       }

       // Start from the end of the vector and work backwards, adding the
       // last n messages to the lastNMessages vector
       for (int i = messages.size() - 1; i >= messages.size() - count; i--) {
           lastNMessages.push_back(messages[i]);
       }

       return lastNMessages;


  - name: load_from_log_text_file
    parameters:
      - name: log_text_filename
        type: std::string
        default_argument: '"[unset-log_text_filename]"'
    body: |
      Blast::FileExistenceChecker existence_checker(log_text_filename);
      if (!existence_checker.exists())
      {
         // TODO: output this message in the chat window
         std::cout << "[ file not found at expected location ]\n[ looking in " + log_text_filename + " ]" << std::endl;
      }
      std::string log_text = php::file_get_contents(log_text_filename);

      clear();
      std::vector<std::string> lines = Blast::StringSplitter(log_text, '\n').split();
      int32_t state = 0; // 0 nothing, 1 parsing prompt, 2 parsing response, 3 response info, 4 parsing error
      std::vector<std::string> accumulated_lines;
      for (auto &line : lines)
      {
         if (line == "========== PROMPT BEGIN ==========") { state = 1; continue; }
         if (line == "========== RESPONSE BEGIN ==========") { state = 2; continue; }
         if (line == "========== RESPONSE INFO BEGIN ==========") { state = 3; continue; }
         if (line == "========== ERROR BEGIN ==========") { state = 4; continue; }

         if (line == "========== PROMPT END ==========")
         {
            std::string joined_accumulated_lines = Blast::StringJoiner(accumulated_lines, "\n").join();
            //Hexagon::ChatCPTIntegration::Messages::Text* result =
               //new Hexagon::ChatCPTIntegration::Messages::Text(joined_accumulated_lines);
            append_text_message(joined_accumulated_lines);
            
            accumulated_lines.clear();
            state = 0;
            continue;
         }
         if (line == "========== RESPONSE END ==========")
         {
            std::string joined_accumulated_lines = Blast::StringJoiner(accumulated_lines, "\n").join();
            append_text_message(joined_accumulated_lines);
            accumulated_lines.clear();
            state = 0;
            continue;
         }
         if (line == "========== RESPONSE INFO END ==========")
         {
            std::string joined_accumulated_lines = Blast::StringJoiner(accumulated_lines, "\n").join();
            append_text_message(joined_accumulated_lines);
            accumulated_lines.clear();
            state = 0;
            continue;
         }
         if (line == "========== ERROR END ==========")
         {
            std::string joined_accumulated_lines = Blast::StringJoiner(accumulated_lines, "\n").join();
            append_text_message(joined_accumulated_lines);
            accumulated_lines.clear();
            state = 0;
            continue;
         }
      }
    body_dependency_symbols:
      - Blast::StringSplitter
      - Blast::StringJoiner
      - Blast::FileExistenceChecker
      - php::file_get_contents
    
    


dependencies:


  - symbol: Hexagon::ChatCPTIntegration::Messages::Base
    headers: [ Hexagon/ChatCPTIntegration/Messages/Base.hpp ]
  - symbol: Hexagon::ChatCPTIntegration::Messages::Text
    headers: [ Hexagon/ChatCPTIntegration/Messages/Text.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]


