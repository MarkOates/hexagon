parent_classes:
  - class: 'StageInterface'
    scope: public
    init_with: "StageInterface::FILE_NAVIGATOR"
properties:
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
functions:
  - name: render
    is_override: true
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: cell_width
        type: int
        default_argument: 10
      - name: cell_height
        type: int
        default_argument: 20
    body: |
      return;
  - name: process_local_event
    is_override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: "\"\""
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      std::cout << "LocalEvent::" << event_name << std::endl;

      try
      {
         bool executed = false;

         //if (event_name == "refresh_list")
         {
           executed = true;
           //refresh_list();
         }
      }
      catch (const std::exception &exception)
      {
         std::cerr << ">BOOM< cannot execute \"" << event_name << "\".  The following exception occurred: " << exception.what() << std::endl;
      }
    body_dependency_symbols:
      - std::endl
      - std::cout
      - std::cerr
  - name: save_file
    is_override: true
    type: bool
    body: |
      return true;
  - name: process_event
    is_override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      KeyboardCommandMapper keyboard_command_mapper;
                                                 // al_keycodee, shift, ctrl, alt, command, { command_identifier }
      //static const std::string SET_NODE_ROOT_TO_SYSTEM_ROOT_DIRECTORY = "set_node_root_to_system_root_directory";

                                         // al_keycodee,         shift, ctrl, alt, command, { command_identifier }
      //keyboard_command_mapper.set_mapping(ALLEGRO_KEY_FULLSTOP,  false, false, false, false, { SET_NODE_ROOT_TO_REPOS_DIRECTORY, REFRESH_LIST, MOVE_CURSOR_TO_TOP });

      bool event_caught = false;

      switch(event.type)
      {
      case ALLEGRO_EVENT_KEY_UP:
         break;
      case ALLEGRO_EVENT_KEY_DOWN:
         break;
      case ALLEGRO_EVENT_KEY_CHAR:
         bool shift = event.keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT;
         bool alt = event.keyboard.modifiers & ALLEGRO_KEYMOD_ALT;
         bool ctrl = event.keyboard.modifiers & ALLEGRO_KEYMOD_CTRL;
         bool command = event.keyboard.modifiers & ALLEGRO_KEYMOD_COMMAND;
         bool ctrl_or_command = ctrl || command;
         std::vector<std::string> mapped_events = keyboard_command_mapper.get_mapping(event.keyboard.keycode, shift, ctrl_or_command, alt);
         if (!mapped_events.empty()) event_caught = true;
         for (auto &mapped_event : mapped_events) process_local_event(mapped_event);
         break;
      }
      return;
    body_dependency_symbols:
      - KeyboardCommandMapper
dependencies:
  - symbol: StageInterface
    headers: [ 'Hexagon/StageInterface.hpp' ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_EVENT&
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_COLOR
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_EVENT
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ALLEGRO_FONT*
    headers: [ 'allegro5/allegro_font.h' ]
  - symbol: ActionData
    headers: [ 'Hexagon/ActionData.hpp' ]
  - symbol: al_color_name
    headers: [ 'allegro5/allegro_color.h' ]
  - symbol: std::endl
    headers: [ 'iostream' ]
  - symbol: std::cerr
    headers: [ 'iostream' ]
  - symbol: std::cout
    headers: [ 'iostream' ]
  - symbol: al_draw_circle
    headers: [ 'allegro5/allegro_primitives.h' ]
  - symbol: std::vector<std::string>
    headers: [ 'vector', 'string' ]
  - symbol: OldFileSystemNode
    headers: [ 'Hexagon/OldFileSystemNode.hpp' ]
  - symbol: KeyboardCommandMapper
    headers: [ 'Blast/KeyboardCommandMapper.hpp' ]
