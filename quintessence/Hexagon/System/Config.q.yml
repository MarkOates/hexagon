properties:


  - name: INITIAL_DISPLAY_WIDTH_KEY
    type: std::string
    static: true
    const: true
    init_with: '"initial_display_width"'

  - name: INITIAL_DISPLAY_HEIGHT_KEY
    type: std::string
    static: true
    const: true
    init_with: '"initial_display_height"'

  - name: DEFAULT_NAVIGATOR_DIRECTORY_KEY
    type: std::string
    static: true
    const: true
    init_with: '"default_navigator_directory"'

  - name: DOMAIN_KEY
    type: std::string
    static: true
    const: true
    init_with: '"domain"'

  - name: REGEX_TEMP_FILENAME_KEY
    type: std::string
    static: true
    const: true
    init_with: '"regex_temp_filename"'

  - name: CLIPBOARD_TEMP_FILENAME_KEY
    type: std::string
    static: true
    const: true
    init_with: '"clipboard_temp_filename"'

  - name: FILE_NAVIGATOR_SELECTION_FILENAME_KEY
    type: std::string
    static: true
    const: true
    init_with: '"file_navigator_selection_temp_filename"'

  - name: MAKE_COMMAND_FILENAME_KEY
    type: std::string
    static: true
    const: true
    init_with: '"make_command_temp_filename"'

  - name: FOCUSED_COMPONENT_FILENAME_KEY
    type: std::string
    static: true
    const: true
    init_with: '"focused_component_filename"'

  - name: FONT_BIN_PATH_KEY
    type: std::string
    static: true
    const: true
    init_with: '"font_bin_path"'

  - name: BITMAP_BIN_PATH_KEY
    type: std::string
    static: true
    const: true
    init_with: '"bitmap_bin_path"'

  - name: DARK_MODE_KEY
    type: std::string
    static: true
    const: true
    init_with: '"dark_mode"'

  - name: OBJECTIVE_KEY
    type: std::string
    static: true
    const: true
    init_with: '"objective"'

  - name: HUD_SHOW_FOCUS_TIMER_BAR_KEY
    type: std::string
    static: true
    const: true
    init_with: '"hud_show_focus_timer_bar"'

  - name: FULLSCREEN_KEY
    type: char*
    static: true
    const: true
    init_with: '(char*)"fullscreen"'
    constexpr: true

  - name: INITIAL_BASELINE_CAMERA_STEPBACK_KEY
    type: std::string
    static: true
    const: true
    init_with: '"initial_baseline_camera_stepback"'

  - name: config_filename
    type: std::string
    constructor_arg: true
    init_with: '"/Users/markoates/Repos/hexagon/bin/programs/data/config/hexagon.boot.cfg"'
    getter: true

  - name: config
    type: AllegroFlare::Config
    init_with: config_filename

  - name: initialized
    type: bool
    init_with: false


functions:


  - name: validate_initialized
    private: true
    type: void
    parameters:
      - name: function_name
        type: std::string
        default_argument: '"[unnamed_function]"'
    body: |
      if (!initialized)
      {
         std::stringstream error_message;
         error_message << "[Hexagon::System::Config error:] cannot call "
                       << "\"" << function_name << "\". "
                       << "This component must be initialized before this function can be used.";
         throw std::runtime_error(error_message.str());
      }
    body_dependency_symbols:
      - std::stringstream


  - name: initialize
    type: void
    guards: [ al_is_system_installed() ]
    body: |
      if (initialized) return; // TODO, double initialization should raise an exception
      config.load();
      initialized = true;


  - name: reload
    type: void
    guards: [ initialized ]
    body:
      config.reload();
      return;


  - name: get_projects_list
    type: std::vector<std::tuple<std::string, std::string>>
    body: |
      std::vector<std::tuple<std::string, std::string>> result;

      std::string projects_section = "projects";
      std::vector<std::string> project_name_keys = config.get_section_keys(projects_section);


      if (!config.has_section(projects_section))
      {
         //AllegroFlare::Logger::throw_error(
            //"Hexagon::System::Config::get_projects_list",
            //"Expecting \"" + projects_section + "\" in the config but it is not present."
         //);
         std::stringstream error_message;
         error_message << "[AllegroFlare::System::Config::get_projects_list]: error: "
                       "Expecting \"" << projects_section << "\" in the config but it is not present.";
         throw std::runtime_error(error_message.str());
      }
      

      for (auto &project_name_key : project_name_keys)
      {
         std::string menu_item_label = project_name_key;
         std::string folder = config.get_value_string(projects_section, menu_item_label);
         result.push_back({menu_item_label, folder});
      }
      return result;


      result = {
      //std::vector<std::tuple<std::string, std::string>> result = {
         //{ "Robieo", "/Users/markoates/Repos/Robieo/" },
         //{ "Pipeline", "/Users/markoates/Repos/Pipeline/" },
         { "Blast", "/Users/markoates/Repos/blast/" },
         { "AllegroFlare", "/Users/markoates/Repos/allegro_flare/" },
         { "OutOfTheBox", "/Users/markoates/Repos/OutOfTheBox/" },
         { "Hexagon", "/Users/markoates/Repos/hexagon/" },
         { "FullScore3", "/Users/markoates/Repos/FullScore3/" },
         { "ClubCatt", "/Users/markoates/Repos/ClubCatt/" },
         //{ "AllegroFlare", "/Users/markoates/Repos/allegro_flare/" },
         { "---", "/" },
         { "SomePlatformer", "/Users/markoates/Repos/SomePlatformer/" },
         { "CatchIt", "/Users/markoates/Repos/CatchIt/" },
         { "UIElements", "/Users/markoates/Repos/UIElements/" },
         { "Robieo", "/Users/markoates/Repos/Robieo/" },
         { "SurviveTheCity", "/Users/markoates/Repos/SurviveTheCity/" },
         { "FadeToWhite", "/Users/markoates/Repos/FadeToWhite/" },
         { "ClubCatt", "/Users/markoates/Repos/ClubCatt/" },
         { "ReturnOfTheWanderer", "/Users/markoates/Repos/ReturnOfTheWanderer/" },
         { "ConnectCat", "/Users/markoates/Repos/ConnectCat/" },
         //{ "TheOldMill", "/Users/markoates/Repos/TheOldMill/" },
         //{ "PicSnap", "/Users/markoates/Repos/PicSnap/" },
         //{ "Billboard", "/Users/markoates/Repos/Billboard/" },
         { "ArtGalleryOfCats", "/Users/markoates/Repos/ArtGalleryOfCats/" },
         { "Framerate", "/Users/markoates/Repos/Framerate/" },
         { "AllegroFlare", "/Users/markoates/Repos/allegro_flare/" },
         //{ "ReturnOfTheWanderer", "/Users/markoates/Repos/ReturnOfTheWanderer/" },
         { "OutOfTheBox", "/Users/markoates/Repos/OutOfTheBox/" },
         //{ "Router", "/Users/markoates/Repos/Router/" },
         { "CubeShooter", "/Users/markoates/Repos/CubeShooter/" },
         //{ "TrackLock", "/Users/markoates/Repos/TrackLock/" },
         { "KrampusReturns", "/Users/markoates/Repos/KrampusReturns/" },
         //{ "Mania", "/Users/markoates/Repos/Mania/" },
         //{ "dungeon", "/Users/markoates/Repos/dungeon/" },
         //{ "KrampusTest01", "/Users/markoates/Repos/KrampusTest01/" },
         { "CatDetective", "/Users/markoates/Repos/CatDetective/" },
         //{ "Blast", "/Users/markoates/Repos/blast/" },
         //{ "SurviveTheCity", "/Users/markoates/Repos/SurviveTheCity/" },
         //{ "FadeToWhite", "/Users/markoates/Repos/FadeToWhite/" },
         //{ "DialogPlayer", "/Users/markoates/Repos/DialogPlayer/" },
         //{ "AllegroFlare", "/Users/markoates/Repos/allegro_flare/" },
         { "RPG", "/Users/markoates/Repos/RPG/" },
         //{ "CubeShooter", "/Users/markoates/Repos/CubeShooter/" },
         //{ "TrackLock", "/Users/markoates/Repos/TrackLock/" },
         //{ "Hexagon", "/Users/markoates/Repos/hexagon/" },
         { "TheWeepingHouse", "/Users/markoates/Repos/TheWeepingHouse/" },
         //{ "LabyrinthOfLore", "/Users/markoates/Repos/LabyrinthOfLore/" },
         { "LabyrinthOfLore", "/Users/markoates/Repos/LabyrinthOfLore/" },
         { "LightracerMax", "/Users/markoates/Repos/lightracer-max/" },
         { "DragonWrath", "/Users/markoates/Repos/DragonWrath/" },
         //{ "Fullscore", "/Users/markoates/Repos/fullscore/" },
         //{ "FullScore3", "/Users/markoates/Repos/FullScore3/" },
         { "Krampus2023 (Robieo)", "/Users/markoates/Repos/Krampus2023-Robieo/" },
         { "Krampus21 (Fade to White)", "/Users/markoates/Repos/Krampus21/" },
         //{ "Peri", "/Users/markoates/Repos/Peri/" },
         //{ "Solitare", "/Users/markoates/Repos/Solitare/" },
         //{ "Epidemic", "/Users/markoates/Repos/Epidemic/" },
         { "Golf", "/Users/markoates/Repos/Golf/" },
         //{ "AllegroMembersClub", "/Users/markoates/Repos/AllegroMembersClub/" },
      };

      return result;


  - name: get_initial_display_width
    type: int
    body: |
      validate_initialized(__FUNCTION__);
      return config.get_or_default_int("", INITIAL_DISPLAY_WIDTH_KEY, 2430);


  - name: get_initial_display_height
    type: int
    body: |
      validate_initialized(__FUNCTION__);
      return config.get_or_default_int("", INITIAL_DISPLAY_HEIGHT_KEY, 1350);


  - name: get_default_navigator_directory
    type: std::string
    body: |
      validate_initialized(__FUNCTION__);
      return config.get_or_default_str("", DEFAULT_NAVIGATOR_DIRECTORY_KEY, "/Users/markoates/Repos/hexagon/");


  - name: get_regex_temp_filename
    type: std::string
    body: |
      std::string default_filename = resource_path({"data", "tmp"}, "regex.txt");
      return config.get_or_default_str("", REGEX_TEMP_FILENAME_KEY, default_filename);


  - name: get_clipboard_temp_filename
    type: std::string
    body: |
      std::string default_filename = resource_path({"data", "tmp"}, "clipboard.txt");
      return config.get_or_default_str("", CLIPBOARD_TEMP_FILENAME_KEY, default_filename);


  - name: get_file_navigator_selection_filename
    type: std::string
    body: |
      std::string default_filename = resource_path({"data", "tmp"}, "file_navigator_selection.txt");
      return config.get_or_default_str("", FILE_NAVIGATOR_SELECTION_FILENAME_KEY, default_filename);


  - name: get_make_command_filename
    type: std::string
    body: |
      std::string default_filename = resource_path({"data", "tmp"}, "make_command.txt");
      return config.get_or_default_str("", MAKE_COMMAND_FILENAME_KEY, default_filename);


  - name: get_focused_component_filename
    type: std::string
    body: |
      std::string default_filename = "/Users/markoates/Repos/hexagon/bin/programs/data/tmp/focused_component.txt";
      return config.get_or_default_str("", FOCUSED_COMPONENT_FILENAME_KEY, default_filename);


  - name: get_font_bin_path
    type: std::string
    body: |
      std::string default_font_bin_path = "/Users/markoates/Repos/hexagon/bin/programs/data/fonts";
      return config.get_or_default_str("", FONT_BIN_PATH_KEY, default_font_bin_path);


  - name: get_bitmap_bin_path
    type: std::string
    body: |
      std::string default_bitmap_bin_path = "/Users/markoates/Repos/hexagon/bin/programs/data/bitmaps";
      return config.get_or_default_str("", BITMAP_BIN_PATH_KEY, default_bitmap_bin_path);


  - name: get_initial_baseline_camera_stepback
    type: int
    guards: [ initialized ]
    body: |
      validate_initialized(__FUNCTION__);
      return config.get_or_default_int("", INITIAL_BASELINE_CAMERA_STEPBACK_KEY, 130);


  - name: is_dark_mode
    type: bool
    guards: [ initialized ]
    body: |
      return config.get_or_default_bool("", DARK_MODE_KEY, false);


  - name: get_objective
    type: std::string
    guards: [ initialized ]
    body: |
      return config.get_or_default_str("", OBJECTIVE_KEY, "- objective not set -");


  - name: get_current_project_domain
    type: std::string
    guards: [ initialized ]
    body: |
      return config.get_or_default_str("", DOMAIN_KEY, ""); // value should be an empty string


  - name: is_fullscreen
    type: bool
    guards: [ initialized ]
    body: |
      return config.get_or_default_bool("", FULLSCREEN_KEY, false);


  - name: get_hud_show_focus_timer_bar
    type: bool
    guards: [ initialized ]
    body: |
      return config.get_or_default_bool("", HUD_SHOW_FOCUS_TIMER_BAR_KEY, false);


  - name: get_backfill_color
    type: ALLEGRO_COLOR
    body: |
      if (is_dark_mode())
      {
         return al_color_name("black");
      }
      else
      {
         //Hexagon::Elements::ColorKit color_kit;
         //return color_kit.backwall_gray();
         return al_color_name("white");
         //return al_color_html("8f9996"); // deep rich gray
         //return al_color_html("8a5b38"); // darker, more true deep brown from lamp
         //return al_color_html("a67d5a"); // color of lamp light against wall

         //return al_color_html("d2dbd6"); // very nice light gray
      }
      //return al_color_html("d2dbd6"); // very nice light gray
      //return al_color_html("8f9996"); // deep rich gray

      //return al_color_html("5b5c60");
      //return al_color_name("black");
    body_dependency_symbols:
      - Hexagon::Elements::ColorKit


  - name: get_base_text_color
    type: ALLEGRO_COLOR
    body: |
      if (is_dark_mode())
      {
         return al_color_name("white");
      }
      else
      {
         return al_color_name("black");
      }


  - name: get_backfill_opacity
    type: float
    body: return 0.8f;


  - name: resource_path
    private: true
    type: std::string
    parameters:
      - name: components
        type: std::vector<std::string>
        default_argument: '{}'
      - name: filename
        type: std::string
        default_argument: '{}'
    body: |
      std::string result;

      ALLEGRO_PATH *path = al_get_standard_path(ALLEGRO_RESOURCES_PATH);
      for (auto &component : components) al_append_path_component(path, component.c_str());

      al_set_path_filename(path, filename.c_str());
      result = al_path_cstr(path, ALLEGRO_NATIVE_PATH_SEP);

      //std::cout << result << std::endl;

      return result;


dependencies:


  - symbol: Hexagon::Elements::ColorKit
    headers: [ Hexagon/Elements/ColorKit.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: AllegroFlare::Config
    headers: [ AllegroFlare/Config.hpp ]


