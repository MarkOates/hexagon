properties:


  - name: INITIAL_DISPLAY_WIDTH_KEY
    type: std::string
    static: true
    const: true
    init_with: "\"initial_display_width\""
  - name: INITIAL_DISPLAY_HEIGHT_KEY
    type: std::string
    static: true
    const: true
    init_with: "\"initial_display_height\""
  - name: DEFAULT_NAVIGATOR_DIRECTORY_KEY
    type: std::string
    static: true
    const: true
    init_with: "\"default_navigator_directory\""
  - name: REGEX_TEMP_FILENAME_KEY
    type: std::string
    static: true
    const: true
    init_with: '"regex_temp_filename"'
  - name: config_filename
    type: std::string
    constructor_arg: true
    init_with: "\"/Users/markoates/Repos/hexagon/bin/programs/data/config/hexagon.boot.cfg\""
    getter: true
  - name: config
    type: AllegroFlare::Config
    init_with: config_filename
  - name: initialized
    type: bool
    init_with: false


functions:


  - name: validate_initialized
    private: true
    type: void
    parameters:
      - name: function_name
        type: std::string
        default_argument: "\"[unnamed_function]\""
    body: |
      if (!initialized)
      {
         std::stringstream error_message;
         error_message << "[Hexagon::System::Config error:] cannot call "
                       << "\"" << function_name << "\". "
                       << "This component must be initialized before this function can be used.";
         throw std::runtime_error(error_message.str());
      }
    body_dependency_symbols:
      - std::stringstream


  - name: initialize
    type: void
    body: |
      if (initialized) return;
      config.load();
      initialized = true;


  - name: get_initial_display_width
    type: int
    body: |
      validate_initialized(__FUNCTION__);
      return config.get_or_default_int("", INITIAL_DISPLAY_WIDTH_KEY, 2430);


  - name: get_initial_display_height
    type: int
    body: |
      validate_initialized(__FUNCTION__);
      return config.get_or_default_int("", INITIAL_DISPLAY_HEIGHT_KEY, 1350);


  - name: get_default_navigator_directory
    type: std::string
    body: |
      validate_initialized(__FUNCTION__);
      return config.get_or_default_str("", DEFAULT_NAVIGATOR_DIRECTORY_KEY, "/Users/markoates/Repos/hexagon");


  - name: get_regex_temp_filename
    type: std::string
    body: |
      std::string default_filename = resource_path({"data", "tmp"}, "regex.txt");
      return config.get_or_default_str("", REGEX_TEMP_FILENAME_KEY, default_filename);


  - name: resource_path
    private: true
    type: std::string
    parameters:
      - name: components
        type: std::vector<std::string>
        default_argument: '{}'
      - name: filename
        type: std::string
        default_argument: '{}'
    body: |
      std::string result;

      ALLEGRO_PATH *path = al_get_standard_path(ALLEGRO_RESOURCES_PATH);
      for (auto &component : components) al_append_path_component(path, component.c_str());

      al_set_path_filename(path, filename.c_str());
      result = al_path_cstr(path, ALLEGRO_NATIVE_PATH_SEP);

      //std::cout << result << std::endl;

      return result;


dependencies:


  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: AllegroFlare::Config
    headers: [ AllegroFlare/Config.hpp ]
