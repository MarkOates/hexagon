parent_classes:
  - class: ::Action
    scope: public
    init_with: "\"System::Action::AttemptToCreateTwoPaneSplitFromLastComponentNavigatorSelection\", ActionData()"
properties:
  - name: project_path
    type: std::string
    init_with: "\"/Users/markoates/Repos/hexagon/\""
    constructor_arg: true
    getter: true
  - name: last_component_navigator_selection
    type: std::string
    init_with: "\"\""
    constructor_arg: true
  - name: display_default_width
    type: int
    init_with: 2430
    constructor_arg: true
  - name: display_default_height
    type: int
    init_with: 1350
    constructor_arg: true
  - name: stages
    type: std::vector<StageInterface *>&
    constructor_arg: true
    init_with: "get_dummy_stages_ref()"
    getter: true
    setter: true
  - name: dummy_stages
    type: std::vector<StageInterface *>
    init_with: "{}"
    static: true
    getter_ref: true
  - name: code_editor_width
    type: int
    init_with: 1215
    constructor_arg: true
    getter: true
functions:
  - name: run
    type: std::string
    body: return "Hello World!";
  - name: execute
    virtual: true
    override: true
    type: bool
    body: |
      std::string component_name = last_component_navigator_selection;

      NcursesArt::ProjectFilenameGenerator project_component_filename_generator(component_name, false);
      std::string quintessence_filename = project_path
         + project_component_filename_generator.generate_quintessence_filename();
      std::string test_src_filename = project_path + project_component_filename_generator.generate_test_src_filename();

      std::string filename = quintessence_filename;
      std::string test_filename = test_src_filename;

      std::vector<std::string> missing_files = {};

      bool quintessence_file_present = true;
      bool test_file_present = true;
      if (!Blast::FileExistenceChecker(filename).exists()) quintessence_file_present = false;
      if (!Blast::FileExistenceChecker(test_filename).exists()) test_file_present = false;

      float width_scale_of_halfwidth = 1.0; //0.6180339;
      float width = get_code_editor_width(); //display_default_width/2 * width_scale_of_halfwidth;

      //if (!test_file_contents.empty())
      {
        placement3d place(0, 0, 0);
        place.size = vec3d(width, display_default_height, 0.0);
        place.align = vec3d(0.0, 0.5, 0.0);
        place.scale = vec3d(1.0, 1.0, 0.0);

        StageInterface *stage = nullptr;

        if (test_file_present)
        {
           std::vector<std::string> file_contents = {};
           ::read_file(file_contents, test_filename);
           stage = new CodeEditor::Stage(test_filename);
           static_cast<CodeEditor::Stage*>(stage)->set_initial_content(file_contents);
        }
        else
        {
            stage = new Hexagon::MissingFile::Stage(test_filename);
        }

        stage->set_place(place);
        stages.push_back(stage);
      }

      //if (!file_contents.empty())
      {
        placement3d place(0, 0, 0);
        place.size = vec3d(width, display_default_height, 0.0);
        place.align = vec3d(1.0, 0.5, 0.0);
        place.scale = vec3d(1.0, 1.0, 0.0);

        StageInterface *stage = nullptr;

        if (quintessence_file_present)
        {
           std::vector<std::string> file_contents = {};
           ::read_file(file_contents, filename);
           stage = new CodeEditor::Stage(filename);
           static_cast<CodeEditor::Stage*>(stage)->set_initial_content(file_contents);
        }
        else
        {
            stage = new Hexagon::MissingFile::Stage(filename);
        }

        stage->set_place(place);
        stages.push_back(stage);
      }

      return true;
    body_dependency_symbols:
      - Blast::FileExistenceChecker
      - Hexagon::MissingFile::Stage
      - NcursesArt::ProjectFilenameGenerator
      - std::stringstream
      - std::vector
      - std::string
      - read_file
      - placement3d
      - CodeEditor::Stage
dependencies:
  - symbol: std::vector
    headers: [ vector ]
  - symbol: std::string
    headers: [ string ]
  - symbol: std::stringstream
    headers: [ sstream ]
  - symbol: ::Action
    headers: [ Hexagon/Action.hpp ]
  - symbol: NcursesArt::ProjectFilenameGenerator
    headers: [ NcursesArt/ProjectFilenameGenerator.hpp ]
  - symbol: Hexagon::MissingFile::Stage
    headers: [ Hexagon/MissingFile/Stage.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: read_file
    headers: [ Hexagon/util.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: std::vector<StageInterface *>&
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]
