parent_classes:


  - class: ::Action
    scope: public
    init_with: '"System::Action::CreateRailsResourceLayout.hpp", ActionData()'


properties:


  - name: stages
    type: std::vector<StageInterface *>&
    constructor_arg: true
    init_with: "get_dummy_stages_ref()"
    getter: true
    setter: true
  - name: dummy_stages
    type: std::vector<StageInterface *>
    init_with: "{}"
    static: true
    getter_ref: true


functions:


  - name: execute
    virtual: true
    override: true
    type: bool
    body: |
      std::string model_filename = "app/models/truck.rb";
      std::string model_test_filename = "test/models/truck_test.rb";
      std::string routes_filename = "config/routes.rb";
      std::string controller_filename = "app/controllers/trucks_controller.rb";
      std::string controller_test_filename = "test/controllers/trucks_controller_test.rb";
      std::string view_filename = "app/views/trucks/index.html.erb";
      // model
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(model_filename);

         placement3d place(0, 0, 0);
         place.size = vec3d(400, 650, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
      }
      // model test
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(model_test_filename);

         placement3d place(100, 0, 0);
         place.size = vec3d(400, 650, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
      }
      // routes
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(routes_filename);

         placement3d place(-100, -100, 0);
         place.size = vec3d(400, 650, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
      // controller
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(controller_filename);

         placement3d place(0, -100, 0);
         place.size = vec3d(400, 650, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
      // controller test
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(controller_test_filename);

         placement3d place(100, -100, 0);
         place.size = vec3d(400, 650, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
      // view
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(view_filename);

         placement3d place(0, -100, 100);
         place.size = vec3d(400, 650, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
       return true;
    body_dependency_symbols:
     - CodeEditor::CodeEditor


dependencies:


  - symbol: ::Action
    headers: [ Hexagon/Action.hpp ]
  - symbol: std::vector<StageInterface *>&
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: CodeEditor::CodeEditor
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
