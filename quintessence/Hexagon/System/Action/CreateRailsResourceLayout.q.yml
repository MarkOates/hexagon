parent_classes:


  - class: ::Action
    scope: public
    init_with: '"System::Action::CreateRailsResourceLayout.hpp", ActionData()'


properties:


  - name: stages
    type: std::vector<StageInterface *>&
    constructor_arg: true
    init_with: "get_dummy_stages_ref()"
    getter: true
    setter: true
  - name: display_default_height
    type: int
    init_with: 1350
    constructor_arg: true
    getter: true
  - name: code_editor_width
    type: int
    init_with: 1215
    constructor_arg: true
    getter: true
  - name: model_filename
    type: std::string
    init_with: '"app/models/disc.rb"'
    constructor_arg: true
  - name: model_test_filename
    type: std::string
    init_with: '"test/models/disc_test.rb"'
    constructor_arg: true
  - name: routes_filename
    type: std::string
    init_with: '"config/routes.rb"'
    constructor_arg: true
  - name: controller_filename
    type: std::string
    init_with: '"app/controllers/discs_controller.rb"'
    constructor_arg: true
  - name: controller_test_filename
    type: std::string
    init_with: '"test/controllers/discs_controller_test.rb"'
    constructor_arg: true
  - name: view_filename
    type: std::string
    init_with: '"app/views/discs/index.html.erb"'
    constructor_arg: true
  - name: dummy_stages
    type: std::vector<StageInterface *>
    init_with: "{}"
    static: true
    getter_ref: true


functions:


  - name: place_and_load_code_editor
    private: true
    type: bool
    parameters:
      - name: stages_ptr
        type: std::vector<StageInterface *>*
        default_argument: nullptr
      - name: filename
        type: std::string
        default_argument: '""'
      - name: x
        type: float
        default_argument: 0.0f
      - name: y
        type: float
        default_argument: 0.0f
    body: |
      float code_editor_height = get_display_default_height();
      {
         std::string file_contents = php::file_get_contents(filename);

         CodeEditor::CodeEditor *code_editor = new CodeEditor::CodeEditor(filename);
         code_editor->set_initial_content(file_contents);

         placement3d place(x * code_editor_width, y * code_editor_height, 0);
         place.size = vec3d(code_editor_width, code_editor_height, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         code_editor->set_place(place);

         stages.push_back(code_editor);
      }
      return true;


  - name: execute
    virtual: true
    override: true
    type: bool
    body: |
      float code_editor_height = get_display_default_height();

      place_and_load_code_editor(&stages, model_filename, 0, 0);
      place_and_load_code_editor(&stages, model_test_filename, 1, 0);

      place_and_load_code_editor(&stages, routes_filename, -1, -1);
      //place_and_load_code_editor(&stages, view_filename, 0, -1); // should be plural
      place_and_load_code_editor(&stages, controller_filename, 0, -1);
      place_and_load_code_editor(&stages, controller_test_filename, 1, -1);

      return true;
    body_dependency_symbols:
      - CodeEditor::CodeEditor
      - php::file_get_contents


dependencies:


  - symbol: ::Action
    headers: [ Hexagon/Action.hpp ]
  - symbol: std::vector<StageInterface *>&
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>*
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: CodeEditor::CodeEditor
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
