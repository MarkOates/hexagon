parent_classes:


  - class: ::Action
    scope: public
    init_with: '"System::Action::CreateRailsResourceLayout.hpp", ActionData()'


properties:


  - name: stages
    type: std::vector<StageInterface *>&
    constructor_arg: true
    init_with: "get_dummy_stages_ref()"
    getter: true
    setter: true
  - name: display_default_height
    type: int
    init_with: 1350
    constructor_arg: true
    getter: true
  - name: code_editor_width
    type: int
    init_with: 1215
    constructor_arg: true
    getter: true
  - name: dummy_stages
    type: std::vector<StageInterface *>
    init_with: "{}"
    static: true
    getter_ref: true


functions:


  - name: execute
    virtual: true
    override: true
    type: bool
    body: |
      std::string base_directory = "/Users/markoates/Repos/disclife/";

      std::string model_filename = base_directory + "app/models/disc.rb";
      std::string model_test_filename = base_directory + "test/models/disc_test.rb";
      std::string routes_filename = base_directory + "config/routes.rb";
      std::string controller_filename = base_directory + "app/controllers/discs_controller.rb";
      std::string controller_test_filename = base_directory + "test/controllers/discs_controller_test.rb";
      std::string view_filename = base_directory + "app/views/discs/index.html.erb";

      float code_editor_height = get_display_default_height();

      // model
      {
         std::string file_contents = php::file_get_contents(model_filename);

         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(model_filename);
         model_code_editor->set_initial_content(file_contents);

         placement3d place(0, 0, 0);
         place.size = vec3d(code_editor_width, code_editor_height, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
      }
      // model test
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(model_test_filename);

         placement3d place(code_editor_width, 0, 0);
         place.size = vec3d(code_editor_width, code_editor_height, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
      }
      // routes
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(routes_filename);

         placement3d place(-code_editor_width, -code_editor_height, 0);
         place.size = vec3d(code_editor_width, code_editor_height, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
      // controller
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(controller_filename);

         placement3d place(0, -code_editor_height, 0);
         place.size = vec3d(code_editor_width, code_editor_height, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
      // controller test
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(controller_test_filename);

         placement3d place(code_editor_width, -code_editor_height, 0);
         place.size = vec3d(code_editor_width, code_editor_height, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
      // view
      {
         CodeEditor::CodeEditor *model_code_editor = new CodeEditor::CodeEditor(view_filename);

         placement3d place(0, -code_editor_height, 100);
         place.size = vec3d(code_editor_width, code_editor_height, 0);
         place.align = vec3d(0.5, 0.5, 0.0);
         place.rotation = vec3d(0.0, 0.0, 0.0);

         model_code_editor->set_place(place);

         stages.push_back(model_code_editor);
       }
       return true;
    body_dependency_symbols:
      - CodeEditor::CodeEditor
      - php::file_get_contents


dependencies:


  - symbol: ::Action
    headers: [ Hexagon/Action.hpp ]
  - symbol: std::vector<StageInterface *>&
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: CodeEditor::CodeEditor
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
