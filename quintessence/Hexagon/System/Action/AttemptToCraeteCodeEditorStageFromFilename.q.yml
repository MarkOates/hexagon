properties:
   - name: filename
     type: std::string
     init_with: "\"file.txt\""
     constructor_arg: true
   - name: display_default_height
     type: int
     init_with: 1
     constructor_arg: true
     getter: true
   - name: display_default_width
     type: int
     init_with: 1
     constructor_arg: true
     getter: true
   - name: stage_width
     type: int
     init_with: 1
     constructor_arg: true
     getter: true
   - name: stages
     type: std::vector<StageInterface *>*
     init_with: nullptr
     constructor_arg: true
functions:
   - name: execute
     type: bool
     body: |
      if (!stages)
      {
         std::stringstream error_message;

         error_message << "[Hexagon/System/Action/AttemptToCreateCodeEditorStageFromFilename error:] "
                       << "cannot \"" << __FUNCTION__ << "\" with nullptr stages";
         throw std::runtime_error(error_message.str());
      }

       std::vector<std::string> file_contents = {};
       if (!::read_file(file_contents, filename)) throw std::runtime_error("Could not open the selected file");

       //int number_of_files = get_number_of_code_editor_stages();
       //float one_third_screen_width = get_display_default_width() / 3;
       //float placement_x = one_third_screen_width*number_of_files;
       float placement_x = 0;

       placement3d place(placement_x, 0, 0);
       place.size = vec3d(get_stage_width(), get_display_default_height(), 0.0);
       place.align = vec3d(0.5, 0.5, 0.0);
       place.scale = vec3d(0.9, 0.9, 0.0);

       CodeEditor::Stage *stage = new CodeEditor::Stage(filename);// place);

       stage->set_place(place);
       stage->set_content(file_contents);
       stages->push_back(stage);

       //throw std::runtime_error("attempt_to_open_file_navigator_file not yet implemented to open a file");
     body_dependency_symbols:
       - std::stringstream
       - ::read_file
       - placement3d
       - std::vector<std::string>
       - CodeEditor::Stage
dependencies:
  - symbol: std::vector<StageInterface *>*
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: ::read_file
    headers: [ Hexagon/util.hpp ]
  - symbol: std::vector<std::string>
    headers: [ vector, string ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
