parent_classes:


  - class: ::Action
    scope: public
    init_with: "\"System::Action::AttemptToCreateCodeEditorStageFromFilename\", ActionData()"


properties:


   - name: filename
     type: std::string
     init_with: "\"file.txt\""
     constructor_arg: true
   - name: display_default_width
     type: int
     init_with: 1
     constructor_arg: true
     getter: true
   - name: display_default_height
     type: int
     init_with: 1
     constructor_arg: true
     getter: true
   - name: stage_width
     type: int
     init_with: 1
     constructor_arg: true
     getter: true
   - name: text_color
     type: ALLEGRO_COLOR
     init_with: ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f}
     constructor_arg: true
   - name: backfill_color
     type: ALLEGRO_COLOR
     init_with: ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f}
     constructor_arg: true
   - name: stages
     type: std::vector<StageInterface *>*
     init_with: nullptr
     constructor_arg: true


functions:


   - name: execute
     type: bool
     body: |
      if (!stages)
      {
         std::stringstream error_message;

         error_message << "[Hexagon/System/Action/AttemptToCreateCodeEditorStageFromFilename error:] "
                       << "cannot \"" << __FUNCTION__ << "\" with nullptr stages";
         throw std::runtime_error(error_message.str());
      }

       std::vector<std::string> file_contents = {};
       if (!::read_file(file_contents, filename))
       {
          //TODO: improve this error message
          throw std::runtime_error("Could not open the selected file");
       }

       //int number_of_files = get_number_of_code_editor_stages();
       //float one_third_screen_width = get_display_default_width() / 3;
       //float placement_x = one_third_screen_width*number_of_files;
       float placement_x = 0;

       placement3d place(placement_x, 0, 0);
       place.size = vec3d(get_stage_width(), get_display_default_height(), 0.0);
       place.align = vec3d(0.5, 0.5, 0.0);
       place.scale = vec3d(0.9, 0.9, 0.0);

       Hexagon::CodeEditor::Stage *stage = new Hexagon::CodeEditor::Stage(::CodeEditor::CodeEditor{filename});// place);

       stage->set_place(place);
       stage->set_base_font_color(text_color);
       stage->set_backfill_color(backfill_color);
       stage->get_code_editor_ref().set_content(file_contents);
       stages->push_back(stage);

       return true;
     body_dependency_symbols:
       - std::stringstream
       - ::read_file
       - placement3d
       - std::vector<std::string>
       - Hexagon::CodeEditor::Stage


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ::Action
    headers: [ Hexagon/Action.hpp ]
  - symbol: std::vector<StageInterface *>*
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: ::read_file
    headers: [ Hexagon/util.hpp ]
  - symbol: std::vector<std::string>
    headers: [ vector, string ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]

