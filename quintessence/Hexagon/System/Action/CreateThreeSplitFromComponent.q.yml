parent_classes:
  - class: ::Action
    scope: public
    init_with: "\"System::Action::CreateThreeSplitFromComponent\", ActionData()"
properties:
  - name: project_path
    type: std::string
    init_with: "\"/Users/markoates/Repos/hexagon/\""
    constructor_arg: true
    getter: true
  - name: component
    type: Blast::Project::Component
    init_with: "{}"
    constructor_arg: true
  - name: stages
    type: std::vector<StageInterface *>&
    constructor_arg: true
    init_with: "get_dummy_stages_ref()"
    getter: true
    setter: true
  - name: display_default_width
    type: int
    init_with: 2430
    constructor_arg: true
  - name: display_default_height
    type: int
    init_with: 1350
    constructor_arg: true
  - name: dummy_stages
    type: std::vector<StageInterface *>
    init_with: "{}"
    static: true
    getter_ref: true
functions:
  - name: place_stage
    private: true
    type: bool
    parameters:
      - name: filename
        type: std::string
        default_argument: "\"/foobar.txt\""
      - name: x
        type: float
        default_argument: "0.0"
      - name: align_x
        type: float
        default_argument: "0.0"
    body: |
      bool file_exists = Blast::FileExistenceChecker(filename).exists();
      float width = display_default_width/2;
      placement3d place(x, 0, 0);
      place.size = vec3d(width, display_default_height, 0.0); //al_get_display_width(display), al_get_display_height(display), 0.0);
      place.align = vec3d(align_x, 0.5, 0.0);
      place.scale = vec3d(0.9, 0.9, 0.0);

      StageInterface *stage = nullptr;

      if (file_exists)
      {
         std::string file_contents = php::file_get_contents(filename);
         CodeEditor::Stage *file_stage = new CodeEditor::Stage(filename);
         file_stage->set_initial_content(file_contents);
         stage = file_stage;
      }
      else
      {
         stage = new Hexagon::MissingFile::Stage;
      }

      stage->set_place(place);
      stages.push_back(stage);

      return true;
    body_dependency_symbols:
      - placement3d
      - Blast::FileExistenceChecker
      - Hexagon::MissingFile::Stage
  - name: generate_header_filename
    type: std::string
    body: |
      return project_path + Blast::ProjectComponentFilenameGenerator(component.get_name(), Blast::ProjectComponentFileTypes::HEADER_FILE).generate_filename();
  - name: generate_source_filename
    type: std::string
    body: |
      return project_path + Blast::ProjectComponentFilenameGenerator(component.get_name(), Blast::ProjectComponentFileTypes::SOURCE_FILE).generate_filename();
  - name: generate_test_filename
    type: std::string
    body: |
      return project_path + Blast::ProjectComponentFilenameGenerator(component.get_name(), Blast::ProjectComponentFileTypes::TEST_FILE).generate_filename();
  - name: execute
    type: bool
    body: |
      float left_anchor = -display_default_width / 2;
      float right_anchor = display_default_width / 2;

      std::string test_filename = generate_test_filename();
      std::string header_filename = generate_header_filename();
      std::string source_filename = generate_source_filename();

      place_stage(test_filename, left_anchor, 0.5);
      place_stage(source_filename, 0, 0.5);
      place_stage(header_filename, right_anchor, 0.5);

      return true;
    body_dependency_symbols:
      - CodeEditor::Stage
      - Blast::ProjectComponentFilenameGenerator
      - php::file_get_contents
dependencies:
  - symbol: ::Action
    headers: [ Hexagon/Action.hpp ]
  - symbol: Blast::Project::Component
    headers: [ Blast/Project/Component.hpp ]
  - symbol: CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: std::vector<StageInterface *>&
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
  - symbol: Blast::ProjectComponentFilenameGenerator
    headers: [ Blast/ProjectComponentFilenameGenerator.hpp ]
  - symbol: Hexagon::MissingFile::Stage
    headers: [ Hexagon/MissingFile/Stage.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
