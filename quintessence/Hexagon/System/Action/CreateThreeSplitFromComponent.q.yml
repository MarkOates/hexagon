parent_classes:


  - class: ::Action
    scope: public
    init_with: "\"System::Action::CreateThreeSplitFromComponent\", ActionData()"


properties:


  - name: project_path
    type: std::string
    init_with: "\"/Users/markoates/Repos/hexagon/\""
    constructor_arg: true
    getter: true
  - name: component
    type: Blast::Project::Component
    init_with: "{}"
    constructor_arg: true
  - name: stages
    type: std::vector<StageInterface *>&
    constructor_arg: true
    init_with: "get_dummy_stages_ref()"
    getter: true
    setter: true
  - name: stage_factory
    type: Hexagon::StageFactory*
    init_with: nullptr
    constructor_arg: true
  - name: display_default_width
    type: int
    init_with: 2430
    constructor_arg: true
  - name: display_default_height
    type: int
    init_with: 1350
    constructor_arg: true
  - name: code_editor_width
    type: int
    init_with: 1215
    constructor_arg: true
    getter: true
  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f}
    constructor_arg: true
  - name: backfill_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f}
    constructor_arg: true
  - name: dummy_stages
    type: std::vector<StageInterface *>
    init_with: "{}"
    static: true
    getter_ref: true


functions:


  - name: place_stage
    private: true
    type: bool
    parameters:
      - name: filename
        type: std::string
        default_argument: "\"/foobar.txt\""
      - name: file_category
        type: std::string
        default_argument: '"undefined"'
      - name: x
        type: float
        default_argument: "0.0"
      - name: align_x
        type: float
        default_argument: "0.0"
    guards: [ stage_factory ]
    body: |
      bool file_exists = Blast::FileExistenceChecker(filename).exists();
      float width = get_code_editor_width();
      placement3d place(x, 0, 0);
      place.size = vec3d(width, display_default_height, 0.0);
      place.align = vec3d(align_x, 0.5, 0.0);
      place.scale = vec3d(1.0, 1.0, 0.0);

      StageInterface *stage = nullptr;

      if (file_exists)
      {
         bool create_as_advanced_code_editor = false;
         if (create_as_advanced_code_editor)
         {
            // unreached branch
         }
         else
         {
            std::string file_contents = php::file_get_contents(filename);
            Hexagon::CodeEditor::Stage *file_stage =
               static_cast<Hexagon::CodeEditor::Stage*>(stage_factory->create_code_editor(filename, file_category));
            file_stage->get_code_editor_ref().set_initial_content(file_contents);
            file_stage->set_base_font_color(text_color);
            file_stage->set_backfill_color(backfill_color);
            stage = file_stage;
         }
      }
      else
      {
         stage = stage_factory->create_missing_file(filename);
      }

      stage->set_place(place);
      stages.push_back(stage);

      return true;
    body_dependency_symbols:
      - placement3d
      - Blast::FileExistenceChecker
      - Hexagon::CodeEditor::Stage


  - name: generate_header_filename
    type: std::string
    body: |
      Blast::ProjectComponentFilenameGenerator filename_generator(
              component.get_name(),
              Blast::ProjectComponentFileTypes::HEADER_FILE);
      return project_path + filename_generator.generate_filename();


  - name: generate_source_filename
    type: std::string
    body: |
      auto generator = Blast::ProjectComponentFilenameGenerator(
         component.get_name(),
         Blast::ProjectComponentFileTypes::SOURCE_FILE
      );
      return project_path + generator.generate_filename();


  - name: generate_test_filename
    type: std::string
    body: |
      auto generator = Blast::ProjectComponentFilenameGenerator(
         component.get_name(),
         Blast::ProjectComponentFileTypes::TEST_FILE
      );
      return project_path + generator.generate_filename();


  - name: execute
    type: bool
    body: |
      float left_anchor = -get_code_editor_width();
      float right_anchor = get_code_editor_width();

      std::string test_filename = generate_test_filename();
      std::string header_filename = generate_header_filename();
      std::string source_filename = generate_source_filename();

      place_stage(header_filename, "cpp_header", left_anchor, 0.5);
      place_stage(source_filename, "cpp_source", 0, 0.5);
      place_stage(test_filename, "blast_test", right_anchor, 0.5);

      return true;
    body_dependency_symbols:
      - Blast::ProjectComponentFilenameGenerator
      - php::file_get_contents


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ::Action
    headers: [ Hexagon/Action.hpp ]
  - symbol: Blast::Project::Component
    headers: [ Blast/Project/Component.hpp ]
  - symbol: Hexagon::CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: std::vector<StageInterface *>&
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
  - symbol: Blast::ProjectComponentFilenameGenerator
    headers: [ Blast/ProjectComponentFilenameGenerator.hpp ]
  - symbol: Hexagon::StageFactory*
    headers: [ Hexagon/StageFactory.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
