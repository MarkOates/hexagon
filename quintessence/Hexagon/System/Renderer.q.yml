properties:
  - name: system
    type: ::System*
    init_with: nullptr
    constructor_arg: true
  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: nullptr
    constructor_arg: true
functions:
  - name: render
    type: bool
    body: |
      if (!system)
      {
         std::stringstream error_message;
         error_message << "[System::Renderer error:] cannot render() with a nullptr system";
         throw std::runtime_error(error_message.str());
      }
      if (!display)
      {
         std::stringstream error_message;
         error_message << "[System::Renderer error:] cannot render() with a nullptr display";
         throw std::runtime_error(error_message.str());
      }

      al_clear_to_color(al_color_name("black"));

      system->camera.setup_camera_perspective(al_get_backbuffer(display));
      al_clear_depth_buffer(1000);

      for (auto &stage : system->stages)
      {
         bool is_focused = (system->get_frontmost_stage() == stage);
         ALLEGRO_FONT *font = system->font_bin[system->get_global_font_str()];
         stage->render(is_focused, display, font, al_get_text_width(font, " "), al_get_font_line_height(font));
      }

      // this next paragraph may not belong in the renderer
      for (auto &stage : system->stages)
      {
         StageInterface::type_t type = stage->get_type();
         if (type == CodeEditor::Stage::ONE_LINE_INPUT_BOX || type == CodeEditor::Stage::CODE_EDITOR)
         {
            bool this_stage_content_is_modified = static_cast<CodeEditor::Stage *>(stage)->get_content_is_modified();
            if (this_stage_content_is_modified) add_notification(NOTIFICATION_FILE_IS_UNSAVED);
         }
      }

      return true;
    body_dependency_symbols:
      - NOTIFICATION_FILE_IS_UNSAVED
      - al_color_name
      - al_clear_to_color
dependencies:
  - symbol: NOTIFICATION_FILE_IS_UNSAVED
    headers: [ Hexagon/shared_globals.hpp ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_clear_to_color
    headers: [ allegro5/allegro.h ]
  - symbol: ::System*
    headers: [ Hexagon/System/System.hpp ]
