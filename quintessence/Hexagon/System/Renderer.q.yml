properties:


  - name: system
    type: Hexagon::System::System*
    init_with: nullptr
    constructor_arg: true

  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: nullptr
    constructor_arg: true

  - name: backfill_color
    type: ALLEGRO_COLOR*
    init_with: nullptr
    constructor_arg: true
    getter: true

  - name: base_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 1, 1, 1}
    constructor_arg: true
    getter: true


functions:


  - name: render
    type: bool
    guards: [ system, display, backfill_color ]
    body: |
      //al_clear_to_color(*get_backfill_color());

      system->get_camera_ref().setup_camera_perspective(al_get_backbuffer(display));
      al_clear_depth_buffer(1000);

      global::profiler.start("all stages");

      Hexagon::StageCollectionHelper stage_collection_helper(&system->get_stages_ref());

      for (auto &stage : stage_collection_helper.get_all_stages_not_rendered_on_hud())
      {
         std::stringstream profile_timer_element_label;
         profile_timer_element_label << "Stage [" << stage->get_type_name() << "]                    " << stage;
         global::profiler.start(profile_timer_element_label.str());

         bool infer_is_focused = (system->get_frontmost_stage() == stage);

         stage->render();

         if (infer_is_focused) // for now, we're just going to do this as an experiment in
                               // assessing focused state in the UI
         {
            draw_focused_frame(stage);
         }

         global::profiler.pause(profile_timer_element_label.str());
      }
      global::profiler.pause("all stages");

      system->get_hud_ref().draw();

      return true;
    body_dependency_symbols:
      - global::profiler
      - NOTIFICATION_FILE_IS_UNSAVED
      - al_color_name
      - al_clear_to_color
      - Hexagon::CodeEditor::Stage*
      - Hexagon::AdvancedComponentNavigator::Stage*
      - Hexagon::FileNavigator::Stage*
      - Hexagon::Elements::Window
      - Hexagon::StageCollectionHelper


  - name: draw_focused_frame
    private: true
    guards: [ stage ]
    parameters:
      - name: stage
        type: StageInterface*
        default_argument: nullptr
    body: |
      placement3d place = stage->get_place();
      Hexagon::Elements::Window window(place.size.x, place.size.y);
      ALLEGRO_COLOR btc = get_base_text_color();
      ALLEGRO_COLOR focus_frame_color = ALLEGRO_COLOR{btc.r*0.3f, btc.g*0.3f, btc.b*0.3f, btc.a*0.3f};

      //window.set_outer_line_color(ALLEGRO_COLOR{0.0f, 1.0f, 1.0f, 1.0f});
      window.set_outer_line_color(focus_frame_color); //ALLEGRO_COLOR{0.3f, 0.3f, 0.3f, 0.3f});
      window.set_outer_line_opacity(0.5);
      window.set_outer_line_thickness(4.0);

      place.start_transform();
      window.draw();
      place.restore_transform();

      return;
  

dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_COLOR*
    headers: [ allegro5/allegro_color.h ]
  - symbol: global::profiler
    headers: [ Hexagon/shared_globals.hpp ]
  - symbol: NOTIFICATION_FILE_IS_UNSAVED
    headers: [ Hexagon/shared_globals.hpp ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: StageInterface*
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_clear_to_color
    headers: [ allegro5/allegro.h ]
  - symbol: Hexagon::System::System*
    headers: [ Hexagon/System/System.hpp ]
  - symbol: Hexagon::CodeEditor::Stage*
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: Hexagon::AdvancedComponentNavigator::Stage*
    headers: [ Hexagon/AdvancedComponentNavigator/Stage.hpp ]
  - symbol: Hexagon::FileNavigator::Stage*
    headers: [ Hexagon/FileNavigator/Stage.hpp ]
  - symbol: Hexagon::Elements::Window
    headers: [ Hexagon/Elements/Window.hpp ]
  - symbol: Hexagon::StageCollectionHelper
    headers: [ Hexagon/StageCollectionHelper.hpp ]


