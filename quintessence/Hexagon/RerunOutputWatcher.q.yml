parent_classes:
  - class: StageInterface
    scope: public
    init_with: "StageInterface::RERUN_OUTPUT_WATCHER"
properties:
  - name: command
    type: std::string
    init_with: "\"make\""
    getter: true
  - name: watch_pattern
    type: std::string
    init_with: "\"**.*.q.yml\""
    getter: true
  - name: output
    type: std::string
    init_with: "\"[no content]\""
    getter: true
functions:
  - name: dummy_ALLEGRO_EVENT
    type: ALLEGRO_EVENT&
    static: true
    body: |
      static ALLEGRO_EVENT ev;
      return ev;
  - name: append_to_output
    type: void
    parameters:
      - name: content_to_append
        type: std::string
        default_argument: "\"\""
    body: |
      output += content_to_append;
  - name: render
    type: void
    virtual: true
    override: true
    parameters:
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: cell_width
        type: int
        default_argument: 60
      - name: cell_height
        type: int
        default_argument: 20
    body: |
       static ALLEGRO_FONT *font_font = al_create_builtin_font();
       if (!font_font) throw std::runtime_error("could not load font font");
       al_draw_text(font_font, al_color_name("yellow"), 0, 0, 0, "+ RerunOutputWatcher");

       int y_spacing = 20;
       int x_col = 130;

       // draw the command
       al_draw_text(font_font, al_color_name("yellow"), 0, y_spacing * 1, 0, "command: ");
       al_draw_text(font_font, al_color_name("aliceblue"), x_col, y_spacing * 1, 0, get_command().c_str());

       // draw the command
       al_draw_text(font_font, al_color_name("yellow"), 0, y_spacing * 2, 0, "watch_pattern: ");
       al_draw_text(font_font, al_color_name("aliceblue"), x_col, y_spacing * 2, 0, get_watch_pattern().c_str());

       // draw the output
       al_draw_text(font_font, al_color_name("white"), 0, y_spacing * 2, 0, get_output().c_str());

       return;
  - name: process_local_event
    type: void
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: "\"\""
      - name: action_data
        type: ActionData
        override_default_argument_requirement: true
        default_argument: "{}"
    body: |
      return;
  - name: process_event
    type: void
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: RerunOutputWatcher::dummy_ALLEGRO_EVENT()
    body: |
      return;
  - name: save_file
    type: bool
    virtual: true
    override: true
    body: |
      return true;
function_body_symbol_dependencies:
  - al_color_name
dependencies:
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ 'Blast/ShellCommandExecutorWithCallback.hpp' ]
  - symbol: ALLEGRO_EVENT&
    headers: [ 'allegro5/allegro.h' ]
  - symbol: ActionData
    headers: [ 'Hexagon/ActionData.hpp' ]
  - symbol: al_color_name
    headers: [ 'allegro5/allegro_color.h' ]
  - symbol: ALLEGRO_FONT*
    headers: [ 'allegro5/allegro_font.h' ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ 'allegro5/allegro.h' ]
  - symbol: StageInterface
    headers: [ 'Hexagon/StageInterface.hpp' ]
