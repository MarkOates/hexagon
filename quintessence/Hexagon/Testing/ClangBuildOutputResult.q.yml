properties:


  - name: message_line
    type: std::string
    init_with: '"[unset-message]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: body
    type: std::string
    init_with: '"[unset-body]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: filename
    type: std::string
    init_with: '"[unset-filename]"'
    constructor_arg: true
    getter: true
    setter: true

  - name: type
    type: std::string
    init_with: '"unknown"'
    constructor_arg: true
    getter: true
    setter: true

  - name: line_num
    type: int
    init_with: -1
    constructor_arg: true
    getter: true
    setter: true

  - name: column_num
    type: int
    init_with: -1
    constructor_arg: true
    getter: true
    setter: true

  - name: message
    type: std::string
    init_with: '"unknown"'
    constructor_arg: true
    getter: true
    setter: true

  - name: on_test_dump_line_num
    type: int
    init_with: -1
    constructor_arg: true
    getter: true
    setter: true

  - name: test_dump_line_num
    type: int
    init_with: -1
    constructor_arg: true
    getter: true
    setter: true
    

functions:


  - name: build_from_message_line
    type: Hexagon::Testing::ClangBuildOutputResult
    static: true
    parameters:
      - name: line
        type: std::string
        default_argument: '"[unset-line]"'
    body: |
      Hexagon::Testing::ClangBuildOutputResult result;
      result.message_line = line;

      // TODO: validate line is valid
      Blast::StringSplitter splitter(line, ':');
      std::vector<std::string> tokens = splitter.split();

      if (tokens.size() < 4)
      {
         std::stringstream error_message;
         error_message << "Hexagon::Testing::ClangBuildOutputResult error: "
                       << "Expecting more than 4 tokens (elements separated by ':' character).";
         throw std::runtime_error(error_message.str());
      }
      else
      {
         result.filename = tokens[0];
         result.line_num = atoi(tokens[1].c_str());
         result.column_num = atoi(tokens[2].c_str());
         result.type = Blast::String::Trimmer(tokens[3]).trim();
         size_t message_start_pos = tokens[0].size() + 1
                                  + tokens[1].size() + 1
                                  + tokens[2].size() + 1
                                  + tokens[3].size() + 2;
         result.message = line.substr(message_start_pos);
      }

      return result;
    body_dependency_symbols:
      - std::stringstream
      - Blast::StringSplitter
      - Blast::String::Trimmer
      - atoi



dependencies:


  - symbol: Hexagon::Testing::ClangBuildOutputResult
    headers: [ Hexagon/Testing/ClangBuildOutputResult.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Blast::String::Trimmer
    headers: [ Blast/String/Trimmer.hpp ]
  - symbol: atoi
    headers: [ cstdlib ]


