properties:


  - name: clang_build_run_output
    type: std::string
    init_with: '"[unset-clang_build_run_output]"'
    constructor_arg: true

  - name: warnings_errors_and_notes
    type: std::vector<Hexagon::Testing::ClangBuildOutputResult>
    init_with: '{}'
    getter: true

  - name: warnings_errors_and_notes_parsed
    type: bool
    init_with: false
    private: true

  - name: error_messages_during_parsing
    type: std::vector<std::string>
    init_with: '{}'
    getter: true

  - name: lines
    type: std::vector<std::string>
    init_with: '{}'
    private: true

  - name: lines_parsed
    type: bool
    init_with: false
    private: true

  - name: num_warnings_errors_generated_line
    type: std::string
    init_with: '""'
    getter: true

  - name: num_warnings_errors_generated_line_parsed
    type: bool
    init_with: false
    private: true

  - name: NUM_WARNINGS_ERRORS_GENERATED_REGEX
    type: std::string
    init_with: '"[0-9]+ (?:warning[s]?|error[s]?) generated\\."'
    getter: true
    const: true
    static: true

  - name: WARNING_OR_ERROR_REGEX
    type: std::string
    init_with: '"[TODO]"'
    getter: true
    const: true
    static: true

  - name: parsed
    type: bool
    init_with: false
    getter: true


functions:


  - name: parse
    type: void
    body: |
      if (parsed) return;
      parse_split_lines();
      parse_num_warnings_errors_generated_line();
      parse_warnings_errors_and_notes();
      parsed = true;
      return;
    body_dependency_symbols:
      - Blast::StringSplitter


  - name: discard_irrelevant_lines
    type: std::vector<std::string>
    body: |
      // TODO in FUTURE
      return {};


  - name: parse_split_lines
    body: |
      if (lines_parsed) return;
      Blast::StringSplitter splitter(clang_build_run_output, '\n');
      lines = splitter.split();
      return;


  - name: parse_warnings_errors_and_notes
    body: |
      if (warnings_errors_and_notes_parsed) return;
      warnings_errors_and_notes_parsed = true;

      // TODO
      bool body_accumulation_started = false;
      Hexagon::Testing::ClangBuildOutputResult accumulated_parsed_output_result;

      for (int line_i=0; line_i<lines.size(); line_i++)
      {
         std::string &this_line = lines[line_i];
         std::string regex = "([a-zA-Z0-9/_\\.]+):([0-9]+):([0-9]+): (error|note|warning): (.+)";

         RegexMatcher matcher(this_line, regex);
         std::vector<std::pair<int, int>> match_info = matcher.get_match_info();
         if (!match_info.empty())
         {
            if (match_info.size() != 1)
            {
               std::cout << "Weird error - expecting just 1 match in a line but there were several." << std::endl;
            }
            //else if (match_found)
            //{
               //std::cout << "Weird error - found another match but one has already been found." << std::endl;
            //}
            else
            {
               Hexagon::Testing::ClangBuildOutputResult parsed_output_result =
                  Hexagon::Testing::ClangBuildOutputResult::build_from_message_line(this_line);
               parsed_output_result.set_body("");
               //parsed_output_result.set_parsed_from_test_dump_line_num(line_i);
               //parsed_output_result.set_body(this_line);

               if (parsed_output_result.get_type() != "note")
               {
                  warnings_errors_and_notes.push_back(parsed_output_result);
                  parsed_output_result.set_parsed_from_test_dump_line_num(line_i);
                  parsed_output_result.set_body(this_line);
               }

               body_accumulation_started = true;
            }
            //std::cout << "# " << this_line << std::endl;
         }
         else
         {
            if (body_accumulation_started)
            {
               std::string new_body = warnings_errors_and_notes.back().get_body() + "\n" + this_line;
               warnings_errors_and_notes.back().set_body(new_body);
            }
            //std::cout << ". " << this_line << std::endl;
         }
      }

      return;


  - name: parse_num_warnings_errors_generated_line
    body: |
      if (num_warnings_errors_generated_line_parsed) return;
      num_warnings_errors_generated_line_parsed = true;

      bool match_found = false;
      for (int line_i=0; line_i<lines.size(); line_i++)
      {
         std::string &this_line = lines[line_i];
         RegexMatcher matcher(this_line, NUM_WARNINGS_ERRORS_GENERATED_REGEX);
         std::vector<std::pair<int, int>> match_info = matcher.get_match_info();
         if (!match_info.empty())
         {
            if (match_info.size() != 1)
            {
               std::cout << "Weird error - expecting just 1 match in a line but there were several." << std::endl;
            }
            else if (match_found)
            {
               std::cout << "Weird error - found another match but one has already been found." << std::endl;
            }
            else
            {
               match_found = true;
               num_warnings_errors_generated_line = this_line;
            }
            //std::cout << "# " << this_line << std::endl;
         }
         else
         {
            //std::cout << ". " << this_line << std::endl;
         }
      }

      return;
    body_dependency_symbols:
      - Hexagon::RegexMatcher
      - std::cout


dependencies:


  - symbol: std::vector<Hexagon::Testing::ClangBuildOutputResult>
    headers: [ vector, Hexagon/Testing/ClangBuildOutputResult.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Hexagon::RegexMatcher
    headers: [ Hexagon/RegexMatcher.hpp ]



