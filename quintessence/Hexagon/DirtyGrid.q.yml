properties:


  - name: dirty_cells
    type: std::set<std::pair<int, int>>
    init_with: '{}'
    getter: true


functions:


  - name: mark_as_dirty
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      dirty_cells.insert(std::pair<int, int>{x, y});
      return;


  - name: mark_all_as_dirty
    parameters:
      - name: lines
        type: std::vector<std::string>*
        default_argument: '{}'
    guards: [ lines ]
    body: |
      type: std::vector<std::string>& local_lines_ref = *lines;
      for (int l=0; l<local_lines_ref.size(); l++)
      {
         mark_row_as_dirty(l, 0, local_lines_ref[l].length());
      }
      return;


  - name: mark_row_as_dirty
    parameters:
      - name: row
        type: int
        default_argument: 0
      - name: start
        type: int
        default_argument: 0
      - name: length
        type: int
        default_argument: 0
    body: |
      for (int x=start; x<(start + length); x++)
      {
         dirty_cells.insert(std::pair<int, int>{x, row});
      }
      return;


  - name: incorporate
    parameters:
      - name: other_dirty_grid
        type: Hexagon::DirtyGrid*
        default_argument: 'nullptr'
    guards: [ other_dirty_grid ]
    body: |
      dirty_cells.insert(other_dirty_grid->dirty_cells.begin(), other_dirty_grid->dirty_cells.end());
      return;


  - name: build_vector
    type: std::vector<std::pair<int, int>>
    body: |
      std::vector<std::pair<int, int>> result;
      result.reserve(dirty_cells.size());
      for (auto it=dirty_cells.begin(); it!=dirty_cells.end(); )
      {
         result.push_back(std::move(dirty_cells.extract(it++).value()));
      }
      return result;
    body_dependency_symbols:
      - std::vector<std::pair<int, int>>


  - name: clear
    body: |
      dirty_cells.clear();
      return;


dependencies:


  - symbol: Hexagon::DirtyGrid*
    headers: []
  - symbol: std::vector<std::string>*
    headers: [ vector, string ]
  - symbol: std::set<std::pair<int, int>>
    headers: [ set, utility ]
  - symbol: std::vector<std::pair<int, int>>
    headers: [ vector, utility ]

