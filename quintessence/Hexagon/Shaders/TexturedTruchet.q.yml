parent_classes:


  - class: Hexagon::Shaders::Base
    scope: private
    init_with: "obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    type: void
    body: |
      if (!initialized) Hexagon::Shaders::Base::initialize();
      initialized = true;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      Hexagon::Shaders::Base::activate();


  - name: deactivate
    type: void
    guards: [ initialized ]
    body: |
      Hexagon::Shaders::Base::deactivate();


  - name: set_flat_color
    parameters:
      - name: flat_color
        type: ALLEGRO_COLOR
        default_argument: "{}"
    body: |
      Shader:set_vec3("tint", flat_color.r, flat_color.g, flat_color.b);
      Shader::set_float("tint_intensity", 1.0);


  - name: set_texture_width
    parameters:
      - name: width
        type: int
        default_argument: 1
    body: |
      Shader::set_int("texture_width", width);


  - name: set_texture_height
    parameters:
      - name: height
        type: int
        default_argument: 1
    body: |
      Shader::set_int("texture_height", height);


  - name: set_nyan_cat_texture
    parameters:
      - name: nyan_cat_texture
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
    body: |
      Shader::set_sampler("nyan_cat_texture", nyan_cat_texture, 1);


  - name: set_time
    parameters:
      - name: time
        type: float
        default_argument: 1
    body: |
      Shader::set_float("time", time);


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        uniform int texture_width;
        uniform int texture_height;
        uniform float time;

        void main()
        {
           varying_color = al_color;
           varying_texcoord = al_texcoord;
           gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        uniform sampler2D al_tex;
        uniform sampler2D nyan_cat_texture;
        uniform float tint_intensity;
        uniform vec3 tint;
        varying vec4 varying_color;
        varying vec2 varying_texcoord; // 0 ... n number of pixels
        uniform int texture_width;
        uniform int texture_height;
        uniform float time;

        float Hash21(vec2 p) {
           p = fract(p*vec2(234.34, 435.345));
           p += dot(p, p+34.23);
           return fract(p.x*p.y);
        }

        void main()
        {
           vec2 resolution = vec2(texture_width, texture_height);
           vec2 uv = (varying_texcoord*resolution.xy) / resolution.y;

           vec3 col = vec3(0.);

           //uv += time * .2;
           uv *= 3.;
           vec2 gv = fract(uv) - 0.5;
           vec2 id = floor(uv);

           float n = Hash21(id); // random number between 0 and 1
           float width = .2;

           // https://www.youtube.com/watch?v=2R7h76GoIJM

           if (n<.5) gv.x *= -1.;
           float d = abs(abs(gv.x + gv.y)-.5);

           vec2 cUv = gv-sign(gv.x+gv.y+.001)*.5;
           d = length(cUv);
           float mask = smoothstep(.01, -.01, abs(d - .5)-width);

           float angle = atan(cUv.x, cUv.y); // -pi to pi
           float checker = mod(id.x+id.y, 2.)*2.-1.;
           float flow = sin(time + checker * angle * 10.);

           float x = fract(angle/1.57);
           float y = (d-(.5-width))/(2.*width);
           y = abs(y-.5)*2.;
           vec2 tUv = vec2(x, y);
           col +=  texture2D(nyan_cat_texture, tUv).rgb*mask;
           //col.rb +=  tUv*mask;
           //col += y*mask;
           //col += n;

           //col += checker;
           //if (gv.x > .48 || gv.y > .48) col = vec3(1,0,0);

           gl_FragColor = vec4(col, 1.);
        }
      )DELIM";
      return source;


dependencies:


  - symbol: Hexagon::Shaders::Base
    headers: [ Hexagon/Shaders/Base.hpp ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]

  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]

