parent_classes:


  - class: Hexagon::Shaders::Base
    scope: private
    init_with: "obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    type: void
    body: |
      if (!initialized) Hexagon::Shaders::Base::initialize();
      initialized = true;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      Hexagon::Shaders::Base::activate();


  - name: set_flat_color
    parameters:
      - name: flat_color
        type: ALLEGRO_COLOR
        default_argument: "{}"
    body: |
      Shader:set_vec3("tint", flat_color.r, flat_color.g, flat_color.b);
      Shader::set_float("tint_intensity", 1.0);


  - name: set_texture_width
    parameters:
      - name: width
        type: int
        default_argument: 1
    body: |
      Shader::set_int("texture_width", width);


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;

        void main()
        {
           varying_color = al_color;
           varying_texcoord = al_texcoord;
           gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        uniform sampler2D al_tex;
        uniform float tint_intensity;
        uniform vec3 tint;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        float texture_width;
        float texture_height;
        //float texelSize;

        void main()
        {
           vec4 tmp = texture2D(al_tex, varying_texcoord);
           float inverse_tint_intensity = 1.0 - tint_intensity;
           tmp.r = (tmp.r * inverse_tint_intensity + tint.r * tint_intensity) * tmp.a;
           tmp.g = (tmp.g * inverse_tint_intensity + tint.g * tint_intensity) * tmp.a;
           tmp.b = (tmp.b * inverse_tint_intensity + tint.b * tint_intensity) * tmp.a;
           tmp.a = tmp.a;

           //ivec2 textureSize2d = textureSize(al_tex,0);

           vec2 uv = varying_texcoord.xy / 1.0;
           uv -= 0.5;
           uv.x *= varying_texcoord.x/varying_texcoord.y;
           float d = length(uv);
           float c = d;

           if (d < .3) c = 1.; else c = 0.;

           //gl_FragColor = vec4(uv.x, uv.y, 0, 1.);
           gl_FragColor = vec4(vec3(c), 1.);
        }
      )DELIM";
      return source;


dependencies:


  - symbol: Hexagon::Shaders::Base
    headers: [ Hexagon/Shaders/Base.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]

