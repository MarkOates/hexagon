parent_classes:


  - class: Hexagon::Shaders::Base
    scope: private
    init_with: "obtain_vertex_source(), obtain_fragment_source()"


properties:


  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    type: void
    body: |
      if (!initialized) Hexagon::Shaders::Base::initialize();
      initialized = true;


  - name: activate
    type: void
    guards: [ initialized ]
    body: |
      Hexagon::Shaders::Base::activate();


  - name: deactivate
    type: void
    guards: [ initialized ]
    body: |
      Hexagon::Shaders::Base::deactivate();


  - name: set_flat_color
    parameters:
      - name: flat_color
        type: ALLEGRO_COLOR
        default_argument: "{}"
    body: |
      Shader:set_vec3("tint", flat_color.r, flat_color.g, flat_color.b);
      set_float("tint_intensity", 1.0);


  - name: set_texture_width
    parameters:
      - name: width
        type: int
        default_argument: 1
    body: |
      set_int("texture_width", width);


  - name: set_texture_height
    parameters:
      - name: height
        type: int
        default_argument: 1
    body: |
      set_int("texture_height", height);


  - name: set_nyan_cat_texture
    parameters:
      - name: nyan_cat_texture
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
    body: |
      set_sampler("nyan_cat_texture", nyan_cat_texture, 1);


  - name: set_time
    parameters:
      - name: time
        type: float
        default_argument: 1
    body: |
      set_float("time", time);


  - name: obtain_vertex_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        attribute vec4 al_pos;
        attribute vec4 al_color;
        attribute vec2 al_texcoord;
        uniform mat4 al_projview_matrix;
        varying vec4 varying_color;
        varying vec2 varying_texcoord;
        uniform int texture_width;
        uniform int texture_height;
        uniform float time;

        void main()
        {
           varying_color = al_color;
           varying_texcoord = al_texcoord;
           gl_Position = al_projview_matrix * al_pos;
        }
      )DELIM";
      return source;


  - name: obtain_fragment_source
    type: std::string
    static: true
    private: true
    body: |
      static const std::string source = R"DELIM(
        uniform sampler2D al_tex;
        uniform sampler2D nyan_cat_texture;
        uniform float tint_intensity;
        uniform vec3 tint;
        varying vec4 varying_color;
        varying vec2 varying_texcoord; // 0 ... n number of pixels
        uniform int texture_width;
        uniform int texture_height;
        uniform float time;

        float HexDist(vec2 p)
        {
           p = abs(p);
           float c = dot(p, normalize(vec2(1,1.73)));
           c = max(c, p.x);
           return c;
        }

        vec4 HexCoords(vec2 uv)
        {
           vec2 r = vec2(1, 1.73);
           vec2 h = r*.5;
           vec2 a = mod(uv, r)-h;
           vec2 b = mod(uv-h, r)-h;

           vec2 gv;
           if (length(a) < length(b))
              gv = a;
           else
              gv = b;

           float x = atan(gv.x, gv.y);
           float y = 0.5-HexDist(gv);
           vec2 id = uv-gv;
           return vec4(x, y, id.x, id.y);
        }

        void main()
        {
           // https://www.youtube.com/watch?v=VmrIDyYiJBA


           vec2 resolution = vec2(texture_width, texture_height);
           vec2 uv = ((varying_texcoord - 0.5) * resolution.xy) / resolution.y;
           vec3 col = vec3(0.);


           uv *= 5.;
           //uv *= 32.;

           vec4 hc = HexCoords(uv);
           float c = smoothstep(.055, .06, hc.y*sin(hc.z*hc.w+time));

           col += c;


           gl_FragColor = vec4(col, 1.);
        }
      )DELIM";
      return source;


dependencies:


  - symbol: Hexagon::Shaders::Base
    headers: [ Hexagon/Shaders/Base.hpp ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]

  - symbol: ALLEGRO_BITMAP
    headers: [ allegro5/allegro.h ]

