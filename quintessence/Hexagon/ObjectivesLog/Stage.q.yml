parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "StageInterface::OBJECTIVES_LOG"


properties:


  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: objectives_log
    type: Hexagon::ObjectivesLog::ObjectivesLog*
    init_with: nullptr
    getter_ref: true
    constructor_arg: true

  - name: cursor_pos
    type: int
    init_with: 0


functions:


  - name: render
    virtual: true
    override: true
    guards: [ font_bin, objectives_log ]
    body: |
      placement3d place = get_place();
      std::vector<Hexagon::ObjectivesLog::Objective> &objectives = objectives_log->get_objectives_ref();
      float objectives_width = 700;
      float objectives_height = 100;
      float spacing = 4;
      float y_cursor = 0;
      int objective_item_num = 0;
      ALLEGRO_COLOR cursor_box_color = ALLEGRO_COLOR{0, 1, 1, 1};
      float cursor_box_thickness = 4.0;
      float cursor_box_roundness = 4.0;

      place.start_transform();
      ALLEGRO_TRANSFORM list_offset_transform;
      al_copy_transform(&list_offset_transform, al_get_current_transform());
      al_use_transform(&list_offset_transform);

      for (auto &objective : objectives)
      {
         bool cursor_is_over_current_objective = (objective_item_num == cursor_pos);
         Hexagon::ObjectivesLog::ObjectiveRenderer objective_renderer(
            font_bin,
            &objective,
            objectives_width,
            objectives_height
         );
         objective_renderer.render();

         if (cursor_is_over_current_objective)
         {
            al_draw_rounded_rectangle(
               0,
               0,
               objectives_width,
               objectives_height,
               cursor_box_roundness,
               cursor_box_roundness,
               cursor_box_color,
               cursor_box_thickness
            );
         }

         al_translate_transform(&list_offset_transform, 0, objectives_height + spacing);
         al_use_transform(&list_offset_transform);
         objective_item_num++;
      }

      place.restore_transform();
      return;
    body_dependency_symbols:
      - Hexagon::ObjectivesLog::ObjectiveRenderer
      - al_draw_rectangle


  - name: move_cursor_up
    type: void
    body: |
      cursor_pos--;
      if (cursor_pos < 0) cursor_pos = infer_num_list_items() - 1;
      return;


  - name: move_cursor_down
    type: void
    body: |
      cursor_pos++;
      if (cursor_pos >= infer_num_list_items()) cursor_pos = 0;
      return;


  - name: infer_num_list_items
    type: int
    guards: [ objectives_log ]
    body: |
      return objectives_log->get_objectives_ref().size();


  - name: process_local_event
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      return;


  - name: process_event
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      return;


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::ObjectivesLog::ObjectiveRenderer
    headers: [ Hexagon/ObjectivesLog/ObjectiveRenderer.hpp ]
  - symbol: Hexagon::ObjectivesLog::ObjectivesLog*
    headers: [ Hexagon/ObjectivesLog/ObjectivesLog.hpp ]
  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]

  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::ObjectivesLog::ObjectivesLog
    headers: [ Hexagon/ObjectivesLog/ObjectivesLog.hpp ]


