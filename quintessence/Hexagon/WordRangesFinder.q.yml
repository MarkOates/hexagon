properties:


  - name: line_of_text
    type: std::string
    init_with: '"empty"'
    constructor_arg: true

  - name: cursor_pos
    type: int
    init_with: 0
    constructor_arg: true


functions:


  - name: find_ranges
    type: std::pair<int, int>
    body: |
      if (cursor_pos < 0) return std::pair<int, int>(-1, -1);
      if (cursor_pos >= line_of_text.length()) return std::pair<int, int>(-1, -1);

      return find_word_char_ranges();


  - name: find_word_char_ranges
    type: std::pair<int, int>
    body: |
      const std::string word_matching_chars = "_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

      if (word_matching_chars.find(line_of_text[cursor_pos]) == std::string::npos)
      {
         return std::pair<int, int>(-1, -1);
      }

      std::size_t start_pos = line_of_text.find_last_not_of(word_matching_chars, cursor_pos) + 1;
      std::size_t end_pos = line_of_text.find_first_not_of(word_matching_chars, cursor_pos);

      if (end_pos == std::string::npos) end_pos = (int)line_of_text.length();

      return std::pair<int, int>(start_pos, end_pos - start_pos);


  - name: find_whitespace_char_ranges
    type: std::pair<int, int>
    body: |
      if (cursor_pos < 0) return std::pair<int, int>(-1, -1);
      if (cursor_pos >= line_of_text.length()) return std::pair<int, int>(-1, -1);

      const std::string word_matching_chars = " \f\n\r\t\v"; // chars matching the isupper() function from c++ standard

      if (word_matching_chars.find(line_of_text[cursor_pos]) == std::string::npos)
      {
         return std::pair<int, int>(-1, -1);
      }

      std::size_t start_pos = line_of_text.find_last_not_of(word_matching_chars, cursor_pos) + 1;
      std::size_t end_pos = line_of_text.find_first_not_of(word_matching_chars, cursor_pos);

      if (end_pos == std::string::npos) end_pos = (int)line_of_text.length();

      return std::pair<int, int>(start_pos, end_pos - start_pos);


  - name: is_valid
    type: bool
    parameters:
      - name: word_range
        type: std::pair<int, int>
        default_argument: '{0, 0}'
    body: |
      return word_range != std::pair<int, int>(-1, -1);


dependencies:


  - symbol: std::pair<int, int>
    headers: [ utility ]
