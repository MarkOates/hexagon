parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: 'DRAWING_BOX'


properties:


  - name: initialized
    type: bool
    init_with: false
    getter: true
  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: width
    type: int
    init_with: 800
    constructor_arg: true
    getter: true
  - name: height
    type: int
    init_with: 600
    constructor_arg: true
    getter: true
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
  - name: surface
    type: ALLEGRO_BITMAP*
    init_with: nullptr
  - name: stroking
    type: bool
    init_with: false
    setter: true
    getter: true
  - name: pointer_x
    type: int
    init_with: 0
    setter: true
  - name: pointer_y
    type: int
    init_with: 0
    setter: true
  - name: events_dictionary
    type: std::map<std::string, std::function<bool(Hexagon::UI::DrawingBox&)>>
    init_with: Hexagon::UI::DrawingBox::build_default_function_mapping()
    getter_ref: true
    constructor_arg: true
  - name: SAVE_SURFACE_TO_DESKTOP_WITH_AUTOGENERATED_NAME
    static: true
    type: std::string
    init_with: '"SAVE_SURFACE_TO_DESKTOP_WITH_AUTOGENERATED_NAME"'


functions:


  - name: initialize
    guards: [ (!get_initialized()), al_is_system_installed() ]
    body: |
      surface = al_create_bitmap(get_width(), get_height());
      ALLEGRO_STATE previous_render_state;
      al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(surface);
      al_clear_to_color(ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f});
      al_restore_state(&previous_render_state);
      initialized = true;
      return;


  - name: render
    override: true
    guards: [ get_initialized() ]
    body: |
      placement3d &place = get_place();
      place.start_transform();

      Hexagon::Elements::Window window(get_width(), get_height());
      window.set_box_fill_color(ALLEGRO_COLOR{1.0f, 1.0f, 0.0f, 1.0f});
      window.set_box_opacity(0.1);
      window.set_outer_line_color(ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f});
      window.set_outer_line_opacity(0.2);
      window.set_outer_line_thickness(2.0);
      window.draw();

      al_draw_bitmap(surface, 0, 0, 0);

      draw_crosshair();

      place.restore_transform();

      ALLEGRO_FONT *title_font = obtain_eurostile_title_font();
      std::string title_text = "DRAWING MODE";
      al_draw_text(title_font, al_color_name("white"), 100, 50, ALLEGRO_ALIGN_LEFT, title_text.c_str());

      return;
    body_dependency_symbols:
      - Hexagon::Elements::Window


  - name: process_event
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      switch(event.type)
      {
      case ALLEGRO_EVENT_KEY_CHAR:
        switch(event.keyboard.keycode)
        {
        case ALLEGRO_KEY_PAD_PLUS:
          process_local_event(SAVE_SURFACE_TO_DESKTOP_WITH_AUTOGENERATED_NAME);
          break;
        }
        break;
      case ALLEGRO_EVENT_MOUSE_AXES:
        if (get_stroking())
        {
           float mouse_position_x = event.mouse.x;
           float mouse_position_y = event.mouse.y;
           float distance_x = event.mouse.dx;
           float distance_y = event.mouse.dy;


           //ALLEGRO_COLOR stroke_color = al_color_name("aliceblue");
           ALLEGRO_COLOR stroke_color = ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f};

           ALLEGRO_STATE previous_render_state;
           al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);

           al_set_target_bitmap(surface);
           al_draw_line(pointer_x, pointer_y, mouse_position_x, mouse_position_y, stroke_color, 2.0f);

           al_restore_state(&previous_render_state);
        }

        set_pointer_x(event.mouse.x);
        set_pointer_y(event.mouse.y);
        break;
      case ALLEGRO_EVENT_MOUSE_BUTTON_DOWN:
        set_stroking(true);
        break;
      case ALLEGRO_EVENT_MOUSE_BUTTON_UP:
        set_stroking(false);
        break;
      }
      return;


  - name: process_local_event
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: "\"\""
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      std::map<std::string, std::function<bool(Hexagon::UI::DrawingBox&)>>::iterator it =
         events_dictionary.find(event_name);
      if (it == events_dictionary.end())
      {
         std::stringstream error_message;
         error_message << "Hexagon::UI::DrawingBox::process_local_event: error: "
                       << "No local event named \"" << event_name << "\" exists.";
         throw std::runtime_error(error_message.str());
      }
      else
      {
         std::stringstream log_message;
         log_message << "Hexagon::UI::DrawingBox::" << event_name;
         std::cout << log_message.str() << std::endl;
         events_dictionary[event_name](*this);
      }

      return;


  - name: obtain_eurostile_title_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("EurostileExtendedBlack-aka-ExtendedBold.ttf 42");


  - name: draw_crosshair
    private: true
    type: void
    guards: [ al_is_primitives_addon_initialized() ]
    body: |
      float x = pointer_x;
      float y = pointer_y;
      float size = 16;
      ALLEGRO_COLOR color = al_color_name("red");

      float half_size = size * 0.5;
      al_draw_line(x, y-half_size, x, y+half_size, color, 3.0);
      al_draw_line(x-half_size, y, x+half_size, y, color, 3.0);
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: destroy
    override: true
    type: void
    body: |
      if (surface) al_destroy_bitmap(surface);


  - name: build_default_function_mapping
    private: true
    static: true
    type: std::map<std::string, std::function<bool(Hexagon::UI::DrawingBox&)>>
    body: |
      std::map<std::string, std::function<bool(Hexagon::UI::DrawingBox&)>> default_function_mapping = {
         {
            Hexagon::UI::DrawingBox::SAVE_SURFACE_TO_DESKTOP_WITH_AUTOGENERATED_NAME,
            &Hexagon::UI::DrawingBox::save_surface_to_desktop_with_autogenerated_name,
         }
      };
      return default_function_mapping;


  - name: save_surface_to_desktop_with_autogenerated_name
    type: bool
    private: true
    guards: [ get_initialized(), al_is_image_addon_initialized() ]
    body: |
      std::string filename = "/Users/markoates/Desktop/drawing_box_surface-";
      filename += random_string(16) + ".png";

      std::cout << filename << std::endl;

      al_save_bitmap(filename.c_str(), surface);

      return true;
    body_dependency_symbols:
      - random_string
      - al_save_bitmap
      - al_is_image_addon_initialized


dependencies:

  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::Elements::ListMenu
    headers: [ Hexagon/Elements/ListMenu.hpp ]
  - symbol: ActionData
    headers: [ 'Hexagon/ActionData.hpp' ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: Hexagon::Elements::Window
    headers: [ Hexagon/Elements/Window.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_line
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::map<std::string, std::function<bool(Hexagon::UI::DrawingBox&)>>
    headers: [ map, string, functional ]
  - symbol: random_string
    headers: [ allegro_flare/useful.h ]
  - symbol: al_save_bitmap
    headers: [ allegro5/allegro.h ]
  - symbol: al_is_image_addon_initialized
    headers: [ allegro5/allegro_image.h ]

