parent_classes:


  - class: StageInterface
    scope: public
    init_with: StageInterface::CHAT_GPT_CHAT


properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    getter: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    getter: true
    setter: true

  - name: log_view
    type: Hexagon::ChatGPTIntegration::Chat::LogView
    init_with: ''

  - name: input_box
    type: Hexagon::ChatGPTIntegration::Chat::InputBox
    init_with: ''

  - name: input_box_placement
    type: AllegroFlare::Placement2D
    init_with: ''

  - name: log_source_filename
    type: std::string
    init_with: '"/Users/markoates/Repos/ChatGPT/log.txt"'
    getter: true
    setter: true

  - name: conversation
    type: Hexagon::ChatCPTIntegration::Conversation
    init_with: ''

  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true

  - name: input_buffer
    type: std::string
    init_with: '""'
    getter: true
    getter_ref: true
    setter: true

  - name: view_mode
    type: uint32_t
    init_with: VIEW_MODE_UNDEFINED

  - name: initialized
    type: bool
    init_with: false

  - name: VIEW_MODE_UNDEFINED
    type: uint32_t
    init_with: 0
    constexpr: true
    static: true
    const: true

  - name: VIEW_MODE_LOG
    type: uint32_t
    init_with: 1
    constexpr: true
    static: true
    const: true

  - name: VIEW_MODE_CONVERSATION
    type: uint32_t
    init_with: 2
    constexpr: true
    static: true
    const: true


functions:


  - name: initialize
    guards: [ (!initialized) ]
    body: |
      get_place().size = {900, 1200};
      log_view.set_source_filename(log_source_filename);

      input_box_placement.size = { get_place().size.x, 300 };
      input_box_placement.align = { 0, 0 };
      input_box_placement.position = { get_place().size.x + 10, get_place().size.y-input_box_placement.size.y };
      //input_box.insert_lines("");
      input_box.get_text_editor_ref().insert_lines({""}); // need to insert a blank line so that we can add chars to it
      //input_box.insert_string("Hello, this is placholder text for the chat input box.");

      view_mode = VIEW_MODE_CONVERSATION;

      initialized = true;
      return;


  - name: clear_input_text_box
    body: |
      input_box.clear();
      input_box.get_text_editor_ref().insert_lines({""}); // need to insert a blank line so that we can add chars to it


  - name: toggle_view_mode
    body: |
      if (view_mode == VIEW_MODE_LOG) view_mode = VIEW_MODE_CONVERSATION;
      else if (view_mode == VIEW_MODE_CONVERSATION) view_mode = VIEW_MODE_LOG;
      return;


  - name: render
    virtual: true
    override: true
    guards: [ initialized ]
    body: |

      ALLEGRO_FONT *log_dump_font = obtain_log_dump_font();
      float font_line_height = al_get_font_line_height(log_dump_font);
      ALLEGRO_COLOR log_dump_text_color = ALLEGRO_COLOR{0.9, 0.93, 1.0, 1.0};
      float width = 700;

      get_place().start_transform();


      // draw the messages

      if (view_mode == VIEW_MODE_LOG)
      {
         // draw the log
         Hexagon::ChatGPTIntegration::Chat::LogView log_view(log_source_filename);
         std::string log_view_text = log_view.get_log_text();
         al_draw_multiline_text(log_dump_font, log_dump_text_color, 0, 0, width, font_line_height, ALLEGRO_ALIGN_LEFT,
            log_view_text.c_str()
         );
      }
      else if (view_mode == VIEW_MODE_CONVERSATION)
      {
         // draw the conversation
         // TODO: convert from raw log to messages
         conversation.load_from_log_text_file(log_source_filename);
         conversation.set_conversation_id("25370edb-6c25-42a6-81ee-76acd77be211");

         Hexagon::ChatGPTIntegration::Chat::ConversationView conversation_view(
            bitmap_bin,
            font_bin,
            &conversation,
            get_place().size.x, // width
            get_place().size.y  // height
         );
         conversation_view.set_num_messages_to_show(7);
         conversation_view.set_skip_empty_messages(true);
         conversation_view.render();
      }


      // draw the input box

      std::string input_box_text = input_box.get_text();
      Hexagon::AdvancedCodeEditor::Cursor cursor = input_box.get_cursor();
      ALLEGRO_FONT *input_box_font = obtain_input_box_font();
      float input_box_font_line_height = al_get_font_line_height(input_box_font);
      float input_box_x_padding = 100;
      float input_box_width = get_place().size.x - input_box_x_padding * 2;
      float input_box_rectangle_width = get_place().size.x - (input_box_x_padding * 0.5) * 2;
      float input_box_x = input_box_x_padding * 0.5;
      float input_box_height = 200; // TODO: fix this

      input_box_placement.start_transform();
      //Hexagon::Elements::Window window(width, 200);
      //window.draw();

      // draw the fill rounded rectangle

      //float input_box_hx_padding = input_box_x_padding * 0.5;
      //float input_box_rectangle_width = 
      al_draw_filled_rounded_rectangle(
         input_box_x,
         0,
         input_box_x+input_box_width,
         input_box_height,
         5.0,
         5.0,
         ALLEGRO_COLOR{0, 0, 0, 1}
      );

      // draw the text

      al_draw_multiline_text(
         input_box_font,
         log_dump_text_color,
         input_box_x_padding,
         0,
         input_box_width,
         input_box_font_line_height,
         ALLEGRO_ALIGN_LEFT,
         //"This is placeholder text"
         input_box_text.c_str()
      );
      input_box_placement.restore_transform();

      // TODO:
      // renderer.render();
      get_place().restore_transform();
      return;
    body_dependency_symbols:
      - Hexagon::AdvancedCodeEditor::Cursor
      - Hexagon::ChatGPTIntegration::Chat::ConversationView
      - Hexagon::Elements::Window


  - name: submit_input_box_and_clear
    body: |
      std::string input_box_text = input_box.get_text();
      std::string filtered_text = Blast::String::Trimmer(input_box_text).trim();
      if (filtered_text.empty())
      {
         std::cout << "Hexagon::ChatGPTIntegration::Chat::Stage Cannot submit input message, box is empty" << std::endl;
         return;
      }

      std::string tty_location = "/dev/ttys001"; // NOTE: this could vary
      std::string message = filtered_text;
      std::string conversation_id = conversation.get_conversation_id();
      std::string parent_id = conversation.get_last_parent_id();

      Hexagon::ChatGPTIntegration::SubmitTTYMessageToChat submit_tty_message_to_chat(
         tty_location,
         filtered_text,
         conversation_id,
         parent_id
      );
      submit_tty_message_to_chat.submit();

      clear_input_text_box();

      return;
    body_dependency_symbols:
      - al_draw_rounded_rectangle
      - Blast::String::Trimmer
      - Hexagon::ChatGPTIntegration::SubmitTTYMessageToChat


  - name: process_local_event
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      //Hexagon::AdvancedCodeEditor::EventController event_controller(this, build_local_events_dictionary());
      //event_controller.process_local_event(event_name, action_data);
      return;
       //body_dependency_symbols:
         //- Hexagon::AdvancedCodeEditor::EventController
    body_dependency_symbols: []


  - name: process_event
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      switch(event.type)
      {
         case ALLEGRO_EVENT_KEY_DOWN:
         break;

         case ALLEGRO_EVENT_KEY_UP:
         break;

         case ALLEGRO_EVENT_KEY_CHAR: {
            bool shift = event.keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT;
            bool ctrl = event.keyboard.modifiers & ALLEGRO_KEYMOD_CTRL;
            bool command = event.keyboard.modifiers & ALLEGRO_KEYMOD_COMMAND;
            bool alt = event.keyboard.modifiers & ALLEGRO_KEYMOD_ALT;
            //std::cout << "CHAR EVENT: " << (char)(event.keyboard.unichar) << std::endl;
            //std::cout << "text: " << input_box.get_text() << std::endl;

            if (event.keyboard.keycode == ALLEGRO_KEY_BACKSPACE)
            {
               input_box.move_cursor_left();
               input_box.delete_character();
               return;
            }

            if (event.keyboard.keycode == ALLEGRO_KEY_TAB)
            {
               toggle_view_mode();
               return;
            }

            if (event.keyboard.keycode == ALLEGRO_KEY_ENTER && shift == true)
            {
               submit_input_box_and_clear();
               //input_box.move_cursor_left();
               //input_box.delete_character();
               return;
            }

            if (command == true)
            {
               switch (event.keyboard.keycode)
               {
                  case ALLEGRO_KEY_1:
                    copy_message_text_from_message_n_from_the_last_to_clipboard(0);
                  break;

                  case ALLEGRO_KEY_2:
                    copy_message_text_from_message_n_from_the_last_to_clipboard(1);
                  break;

                  case ALLEGRO_KEY_3:
                    copy_message_text_from_message_n_from_the_last_to_clipboard(2);
                  break;

                  case ALLEGRO_KEY_4:
                    copy_message_text_from_message_n_from_the_last_to_clipboard(3);
                  break;

                  case ALLEGRO_KEY_5:
                    copy_message_text_from_message_n_from_the_last_to_clipboard(4);
                  break;

                  case ALLEGRO_KEY_6:
                    copy_message_text_from_message_n_from_the_last_to_clipboard(5);
                  break;
               }
               return;
            }

            //std::vector<std::string> mapped_events =
               //keyboard_command_mapping.get_mapping(event.keyboard.keycode, shift, ctrl, alt, command);
            //for (auto &mapped_event : mapped_events) process_local_event(mapped_event);

            bool is_permitted_char_to_append = true;
            //if (stage->is_in_insert_mode())
            //{
               //if (mapped_events.empty()) // TODO: I'm not sure what the purpose of this section is
               if (is_permitted_char_to_append)
               {
                  char character = (char)(event.keyboard.unichar);
                  input_buffer = " ";
                  input_buffer[0] = character;
                  //stage->get_input_buffer_ref() = " ";
                  //stage->get_input_buffer_ref()[0] = character;
                  input_box.insert_string(input_buffer);
                  input_box.move_cursor_right();
               }
               return;
            //}
            }
         break;
      }
      return;
    body_dependency_symbols: []


  - name: get_nth_from_last_message
    type: Hexagon::ChatCPTIntegration::Messages::Base*
    parameters:
      - name: nth_from_last_position
        type: uint32_t
        default_argument: 0
    body: |
      // TODO: move this function into 
      if (nth_from_last_position >= conversation.get_messages().size()) return nullptr;
      return conversation.get_messages()[(conversation.get_messages().size()-1) - nth_from_last_position];
    body_dependency_symbols:
      - Hexagon::ClipboardData


  - name: copy_message_text_from_message_n_from_the_last_to_clipboard
    parameters:
      - name: nth_from_last_position
        type: uint32_t
        default_argument: 0
    body: |
      Hexagon::ChatCPTIntegration::Messages::Base* message = get_nth_from_last_message(nth_from_last_position);

      std::string text_to_copy;
      bool is_copyable = false;

      if (!message)
      {
         std::cout << "[Hexagon::ChatGPTIntegration::Chat::Stage]: warning: could not copy from the "
                   << nth_from_last_position << "th from last message because it does not exist."
                   << std::endl;
      }

      if (message->is_type(Hexagon::ChatCPTIntegration::Messages::Text::TYPE))
      {
         Hexagon::ChatCPTIntegration::Messages::Text* as_text_message = 
            static_cast<Hexagon::ChatCPTIntegration::Messages::Text*>(message);
         text_to_copy = as_text_message->get_body();
         is_copyable = true;
      }
      else
      {
         std::cout << "[Hexagon::ChatGPTIntegration::Chat::Stage]: warning: could not copy text from the "
                   << nth_from_last_position << "th from last message."
                   << std::endl;
      }

      if (is_copyable)
      {
         ClipboardData clipboard_data; // <-- NOTE: this ClipboardData class should be moved into some kind of namespace
         clipboard_data.store(text_to_copy);
         std::cout << "[Hexagon::ChatGPTIntegration::Chat::Stage]: info: copied text from the "
                   << nth_from_last_position << "th from last message."
                   << std::endl;
      }
      return;
    body_dependency_symbols:
      - Hexagon::ClipboardData
      - Hexagon::ChatCPTIntegration::Messages::Text


  - name: destroy
    virtual: true
    override: true
    body: |
      //if (surface_render) al_destroy_bitmap(surface_render);
      initialized = false;
      return;


  - name: obtain_log_dump_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      float scale = 1.45;
      int font_size = -12 * scale;
      std::stringstream ident;
      ident << "Inter-Medium.ttf " << (int)(font_size * scale);
      return font_bin->auto_get(ident.str());


  - name: obtain_input_box_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      float scale = 1.45;
      int font_size = -12 * scale;
      std::stringstream ident;
      ident << "consolas.ttf " << (int)(font_size * scale);
      return font_bin->auto_get(ident.str());


dependencies:


  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::ChatGPTIntegration::Chat::LogView
    headers: [ Hexagon/ChatGPTIntegration/Chat/LogView.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Cursor
    headers: [ Hexagon/AdvancedCodeEditor/Cursor.hpp ]
  - symbol: Hexagon::ChatGPTIntegration::Chat::InputBox
    headers: [ Hexagon/ChatGPTIntegration/Chat/InputBox.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: Hexagon::Elements::Window
    headers: [ Hexagon/Elements/Window.hpp ]
  - symbol: Blast::String::Trimmer
    headers: [ Blast/String/Trimmer.hpp ]
  - symbol: Hexagon::ChatGPTIntegration::SubmitTTYMessageToChat
    headers: [ Hexagon/ChatGPTIntegration/SubmitTTYMessageToChat.hpp ]
  - symbol: Hexagon::ChatCPTIntegration::Conversation
    headers: [ Hexagon/ChatCPTIntegration/Conversation.hpp ]
  - symbol: Hexagon::ChatGPTIntegration::Chat::ConversationView
    headers: [ Hexagon/ChatGPTIntegration/Chat/ConversationView.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: Hexagon::ClipboardData
    headers: [ Hexagon/ClipboardData.hpp ]
  - symbol: Hexagon::ChatCPTIntegration::Messages::Base
    headers: [ Hexagon/ChatCPTIntegration/Messages/Base.hpp ]
  - symbol: Hexagon::ChatCPTIntegration::Messages::Text
    headers: [ Hexagon/ChatCPTIntegration/Messages/Text.hpp ]
  - symbol: al_draw_filled_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]


