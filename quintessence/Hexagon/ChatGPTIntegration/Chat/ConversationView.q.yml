properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: conversation
    type: Hexagon::ChatCPTIntegration::Conversation*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: width
    type: int
    init_with: 700
    constructor_arg: true
    getter: true
    setter: true

  - name: height
    type: int
    init_with: 900
    constructor_arg: true
    getter: true
    setter: true

  - name: num_messages_to_show
    type: int32_t
    init_with: 3
    getter: true
    setter: true

  - name: skip_empty_messages
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: multiline_text_line_number
    type: int
    init_with: 0
    static: true


functions:


  - name: multiline_text_draw_callback
    type: bool
    static: true
    parameters:
      - name: line_num
        type: int
        default_argument: 0
      - name: line
        type: const char*
        default_argument: nullptr
      - name: size
        type: int
        default_argument: 0
      - name: extra
        type: void*
        default_argument: nullptr
    body: |
      multiline_text_line_number = line_num;
      return true;


  - name: count_num_lines_will_render
    type: int
    parameters:
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: max_width
        type: float
        default_argument: 0.0f
      - name: text
        type: std::string
        default_argument: '"[unset-text]"'
    body: |
      if (text.empty()) return 0;

      multiline_text_line_number = 0;
      al_do_multiline_text(font, max_width, text.c_str(), multiline_text_draw_callback, nullptr);

      // multiline_text_line_number is now modified, and should now be set to the number of lines drawn
      return multiline_text_line_number + 1;


  - name: render
    guards: [ font_bin ]
    body: |
      ALLEGRO_FONT *log_dump_font = obtain_log_dump_font();
      ALLEGRO_COLOR log_dump_text_color = ALLEGRO_COLOR{0.9, 0.93, 1.0, 1.0};
      float font_line_height = al_get_font_line_height(log_dump_font);
      float frame_width = width;
      float text_padding_left = 90;
      float text_padding_right = 40;
      float text_width = frame_width - (text_padding_left + text_padding_right);
      float cursor_y = 0;
      float message_height = 0;
      float vertical_padding = 20;

      if (!conversation)
      {
         // TODO: render a no-conversation text
      }
      std::vector<Hexagon::ChatCPTIntegration::Messages::Base*> messages =
         conversation->get_last_n_messages(num_messages_to_show);
      for (auto &message : messages)
      {
         if (message->is_type(Hexagon::ChatCPTIntegration::Messages::Text::TYPE))
         {
            Hexagon::ChatCPTIntegration::Messages::Text* as_text_message = 
               static_cast<Hexagon::ChatCPTIntegration::Messages::Text*>(message);
            Hexagon::ChatGPTIntegration::Author* author = conversation->find_author_by_id(message->get_author_id());
            
            std::string message_body = as_text_message->get_body();
            ALLEGRO_COLOR background_color = (author)
                                           ? author->get_display_background_color()
                                           : ALLEGRO_COLOR{0.1, 0.1, 0.12, 0.12};

            // count the number of lines that will render, and calculate the message height
            int num_lines_that_will_render = count_num_lines_will_render(log_dump_font, text_width, message_body);
            message_height = num_lines_that_will_render * font_line_height;
            float full_message_height = vertical_padding*2+message_height;

            // draw the backfill
            al_draw_filled_rectangle(0, cursor_y, frame_width, cursor_y+full_message_height, background_color);

            // draw the text (while incrementing the cursor_y variable)
            cursor_y += vertical_padding;
            al_draw_multiline_text(
               log_dump_font,
               log_dump_text_color,
               text_padding_left,
               cursor_y,
               text_width,
               font_line_height,
               ALLEGRO_ALIGN_LEFT,
               message_body.c_str()
            );
            cursor_y += message_height;
            cursor_y += vertical_padding;
         }
         else
         {
            // TODO: render an "unknown message type" text
         }

         // draw a horizontal dividing line separating the messages
         al_draw_line(0, cursor_y, frame_width, cursor_y, ALLEGRO_COLOR{0.1, 0.1, 0.1, 0.1}, 1.0);
      }
      return;
    body_dependency_symbols:
      - Hexagon::ChatCPTIntegration::Messages::Text
      - al_draw_line


  - name: obtain_log_dump_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      float scale = 1.45;
      int font_size = -12 * scale;
      std::stringstream ident;
      ident << "Inter-Medium.ttf " << (int)(font_size * scale);
      return font_bin->auto_get(ident.str());


  - name: obtain_input_box_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      float scale = 1.45;
      int font_size = -12 * scale;
      std::stringstream ident;
      ident << "consolas.ttf " << (int)(font_size * scale);
      return font_bin->auto_get(ident.str());


dependencies:


  - symbol: Hexagon::ChatCPTIntegration::Conversation
    headers: [ Hexagon/ChatCPTIntegration/Conversation.hpp ]
  - symbol: Hexagon::ChatCPTIntegration::Messages::Text
    headers: [ Hexagon/ChatCPTIntegration/Messages/Text.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_line
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]


