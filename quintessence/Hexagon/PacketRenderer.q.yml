properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: packet
    type: Hexagon::Packet*
    init_with: nullptr
    constructor_arg: true

  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true

  - name: width
    type: float
    init_with: 1.0
    constructor_arg: true

  - name: height
    type: float
    init_with: 1.0
    constructor_arg: true


functions:


  - name: render
    guards: [ font_bin, packet, font, al_is_primitives_addon_initialized() ]
    body: |
      render_window();

      placement2d text_scaler(0, 0, 0, 0);
      float text_scale = 2.0;
      text_scaler.scale.x = text_scaler.scale.y = 1.0 / text_scale;
      text_scaler.start_transform();
      render_text();
      text_scaler.restore_transform();
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized
      - allegro_flare::placement2d


  - name: box_fill_color
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{0.5f, 0.5f, 0.5f, 1.0f};


  - name: box_fill_opacity
    type: float
    body: return 0.1f;


  - name: box_outline_color
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f};


  - name: box_outline_opacity
    type: float
    body: return 0.2f;


  - name: color_good
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{0.066, 0.394, 0.4023, 1.0};


  - name: color_failure
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{1.0, 0.0, 0.0, 1.0};


  - name: color_approaching_failure
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{0.957, 0.46, 0.05, 1.0};


  - name: color_warning
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{1.0, 1.0, 0, 1.0};


  - name: color_neutral
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{0.26, 0.26, 0.26, 1.0};


  - name: text_color
    type: ALLEGRO_COLOR
    body: return ALLEGRO_COLOR{0.5, 0.5, 0.5, 0.5};


  - name: render_window
    private: true
    body: |
      Hexagon::Elements::Window window(width, height);

      window.set_box_fill_color(box_fill_color());
      window.set_box_opacity(box_fill_opacity());
      window.set_cell_padding(10);

      window.set_outer_line_color(box_outline_color());
      window.set_outer_line_opacity(box_outline_opacity());
      window.set_outer_line_thickness(1.0);

      ALLEGRO_COLOR top_left_little_bar_color = generate_top_left_little_bar_color();

      window.set_header_bar_height(height);
      window.set_top_left_little_bar_color(top_left_little_bar_color);
      window.set_top_left_little_bar_width(6.0f);

      window.draw();
      return;
    body_dependency_symbols:
      - Hexagon::Elements::Window


  - name: render_text
    private: true
    body: |
      float text_scale = 2.0;
      //ALLEGRO_COLOR text_color = ALLEGRO_COLOR{0.5, 0.5, 0.5, 0.5};

      std::vector<std::tuple<std::string, std::string>> table = {
         { "SEARCHES", std::to_string(packet->get_searches_count()) },
         { "SAVES",    std::to_string(packet->get_saves_count()) },
         { "SCORE",    std::to_string(packet->calculate_score()) },
      };

      ALLEGRO_FONT *font = obtain_table_text_font();
      int line_number = 0;
      float row1_x = 22 * text_scale;
      float row2_x = 105 * text_scale;
      float first_row_y = 20 * text_scale;
      int line_height = al_get_font_line_height(font) * 1.2;
      for (auto &row : table)
      {
         std::string row_label = std::get<0>(row);
         std::string row_value = std::get<1>(row);
         float row_y = first_row_y + line_height * line_number;

         // draw label
         al_draw_text(font, text_color(), row1_x, row_y, ALLEGRO_ALIGN_LEFT, row_label.c_str());

         // draw data
         al_draw_text(font, text_color(), row2_x, row_y, ALLEGRO_ALIGN_RIGHT, row_value.c_str());

         line_number++;
      }

      return;
    body_dependency_symbols:
      - std::vector<std::tuple<std::string, std::string>>
      - al_draw_textf
      - ALLEGRO_COLOR
      - al_get_font_line_height


  - name: generate_top_left_little_bar_color
    type: ALLEGRO_COLOR
    body: |
      int packet_score = packet->calculate_score();
      if (packet_score <= 10) return color_good();
      if (packet_score >= 100) return color_failure();
      if (packet_score >= 50) return color_approaching_failure();
      if (packet_score >= 20) return color_warning();
      return color_neutral();


  - name: obtain_table_text_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin->auto_get("Purista Medium.otf -28");


dependencies:


  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: Hexagon::Packet*
    headers: [ Hexagon/Packet.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: Hexagon::Elements::Window
    headers: [ Hexagon/Elements/Window.hpp ]
  - symbol: al_draw_textf
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_font_line_height
    headers: [ allegro5/allegro_font.h ]
  - symbol: std::vector<std::tuple<std::string, std::string>>
    headers: [ vector, tuple, string ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: allegro_flare::placement2d
    headers: [ allegro_flare/placement2d.h ]


