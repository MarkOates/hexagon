properties:


  - name: config
    type: Hexagon::System::Config*
    init_with: nullptr
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: hud_render_surface_projection_width
    type: float
    init_with: 1920
    getter: true

  - name: hud_render_surface_projection_height
    type: float
    init_with: 1080
    getter: true


functions:


  - name: obtain_base_text_color
    type: ALLEGRO_COLOR
    guards: [ config ]
    body: |
      return config->get_base_text_color();


  - name: obtain_regex_temp_filename
    type: std::string
    guards: [ config ]
    body: |
      return config->get_regex_temp_filename();


  - name: obtain_base_backfill_color
    type: ALLEGRO_COLOR
    guards: [ config ]
    body: |
      return config->get_backfill_color();


  - name: obtain_component_navigator_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      //return font_bin->auto_get("Menlo-Regular.ttf -18");
      return font_bin->auto_get("Purista Medium.otf -18");


  - name: obtain_file_navigator_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("consolas.ttf -18");


  - name: obtain_global_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Menlo-Regular.ttf -20");


  - name: obtain_git_commit_message_box_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Purista Medium.otf -22");


  - name: obtain_display_default_width
    type: int
    guards: [ config ]
    body: |
      return config->get_initial_display_width();


  - name: obtain_display_default_height
    type: int
    guards: [ config ]
    body: |
      return config->get_initial_display_height();


  - name: obtain_dark_mode
    type: bool
    guards: [ config ]
    body: |
      return config->is_dark_mode();


  - name: create_notification
    type: StageInterface*
    parameters:
      - name: body_text
        type: std::string
        default_argument: '""'
    body: |
      Hexagon::Notifications::Stage *stage = new Hexagon::Notifications::Stage(body_text);
      stage->set_render_on_hud(true);
      return stage;
    body_dependency_symbols:
      - Hexagon::Notifications::Stage


  - name: create_file_navigator
    type: StageInterface*
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '"/Users/markoates/Repos/hexagon/"'
    body: |
      std::string directory_to_start = project_directory;

      ALLEGRO_FONT *font = obtain_file_navigator_font();
      Hexagon::FileNavigator::Stage *file_navigator
         = new Hexagon::FileNavigator::Stage(directory_to_start);
      file_navigator->process_local_event("refresh_list"); // TODO: similar to another comment existing in this file
                                                           // at the time of this writing
      file_navigator->set_place(build_file_navigator_initial_place());
      file_navigator->set_render_on_hud(true);

      // properties previously assigned at render time:
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      file_navigator->set_display(display);
      file_navigator->set_font(font);
      file_navigator->set_cell_width(cell_width);
      file_navigator->set_cell_height(cell_height);

      return file_navigator;
    body_dependency_symbols:
       - Hexagon::FileNavigator::Stage


  - name: create_class_brief_menu
    type: StageInterface*
    parameters:
      - name: title
        type: std::string
        default_argument: '"Untitled Menu"'
      - name: items
        type: std::vector<std::tuple<std::string, std::string>>
        default_argument: '{{"Foo", "foo"}, {"Bar", "bar"}, {"Baz", "baz"}}'
    body: |
      Hexagon::UI::LittleMenu *little_menu = new Hexagon::UI::LittleMenu(font_bin, title, items);
      little_menu->initialize();
      little_menu->set_render_on_hud(true);
      little_menu->set_place(build_centered_on_hud_initial_place(0, 300));
      return little_menu;
    body_dependency_symbols:
       - Hexagon::UI::LittleMenu


  - name: create_component_relations_navigator
    parameters:
      - name: focused_component_name
        type: std::string
        default_argument: '""'
      - name: current_project_directory
        type: std::string
        default_argument: '""'
      - name: simplify_relatives_names
        type: bool
        default_argument: true
    type: StageInterface*
    body: |
      Blast::Project::Component self_component(focused_component_name, current_project_directory);

      Hexagon::ComponentRelationsNavigator::ComponentRelations component_relations(self_component);

      std::vector<std::tuple<std::string, std::string>> dependents_menu_items = {};
      std::vector<std::tuple<std::string, std::string>> relatives_menu_items = {};
      std::vector<std::tuple<std::string, std::string>> dependencies_menu_items = {};

      for (auto &relatives_menu_item : component_relations.build_relatives_list())
      {
         std::string relatives_menu_item_label = relatives_menu_item;
         if (simplify_relatives_names)
         {
            std::vector<std::string> relatives_menu_item_label_fragments =
               Blast::StringSplitter(relatives_menu_item, '/').split();
            if (relatives_menu_item_label_fragments.size() >= 2)
            {
               relatives_menu_item_label =
                  relatives_menu_item_label_fragments[relatives_menu_item_label_fragments.size()-2]
                  + "/" + relatives_menu_item_label_fragments.back();
            }
            else if (relatives_menu_item_label_fragments.size() == 1)
            {
               relatives_menu_item_label = relatives_menu_item_label_fragments.back();
            }
         }

         relatives_menu_items.push_back({relatives_menu_item_label, relatives_menu_item});
      }

      for (auto &dependents_menu_item : component_relations.build_dependents_list())
      {
         dependents_menu_items.push_back({dependents_menu_item, dependents_menu_item});
      }

      for (auto &dependencies_menu_item : component_relations.build_dependencies_list())
      {
         dependencies_menu_items.push_back({dependencies_menu_item, dependencies_menu_item});
      }

      Hexagon::ComponentRelationsNavigator::Stage *component_relations_navigator =
         new Hexagon::ComponentRelationsNavigator::Stage(
            font_bin,
            dependents_menu_items,
            relatives_menu_items,
            dependencies_menu_items
      );

      component_relations_navigator->initialize();
      component_relations_navigator->set_render_on_hud(true);
      placement3d place = build_centered_on_hud_initial_place(0, 0);
      place.position.y -= 100;
      place.scale.x = place.scale.y = 0.75;
      component_relations_navigator->set_place(place);

      return component_relations_navigator;
    body_dependency_symbols:
       - Hexagon::ComponentRelationsNavigator::Stage
       - Blast::StringSplitter
       - Hexagon::ComponentRelationsNavigator::ComponentRelations
       - std::vector<std::tuple<std::string, std::string>>


  - name: create_fancy
    type: StageInterface*
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      int width = get_hud_render_surface_projection_width();
      int height = get_hud_render_surface_projection_height();

      Hexagon::Fancy::Stage *fancy_stage = new Hexagon::Fancy::Stage(font_bin);
      //fancy_stage->initialize();

      fancy_stage->set_render_on_hud(true);

      return fancy_stage;
    body_dependency_symbols:
       - Hexagon::Fancy::Stage


  - name: create_drawing_box
    type: StageInterface*
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();

      //int width = al_get_display_width(display);
      int width = get_hud_render_surface_projection_width();
      //int height = al_get_display_height(display);
      int height = get_hud_render_surface_projection_height();

      Hexagon::UI::DrawingBox *drawing_box = new Hexagon::UI::DrawingBox(font_bin, width, height);
      drawing_box->initialize();

      drawing_box->set_render_on_hud(true);
      //drawing_box->set_place(build_centered_on_hud_initial_place(width, height));
      //drawing_box->set_place(build_centered_on_hud_initial_place(width, height));

      return drawing_box;
    body_dependency_symbols:
       - Hexagon::UI::DrawingBox


  - name: create_missing_file
    type: StageInterface*
    parameters:
      - name: filename
        type: std::string
        default_argument: '""'
    body: |
      Hexagon::MissingFile::Stage *missing_file_stage = new Hexagon::MissingFile::Stage(font_bin, filename);

      ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      missing_file_stage->set_display(display);
      missing_file_stage->set_font(font);
      missing_file_stage->set_cell_width(cell_width);
      missing_file_stage->set_cell_height(cell_height);

      return missing_file_stage;
    body_dependency_symbols:
       - StageInterface*
       - Hexagon::MissingFile::Stage


  - name: create_advanced_code_editor
    type: StageInterface*
    parameters:
      - name: filename
        type: std::string
        default_argument: '"untitled.txt"'
      - name: num_columns
        type: int
        default_argument: 123
      - name: num_rows
        type: int
        default_argument: 70
    body: |
      Hexagon::AdvancedCodeEditor::Stage *advanced_code_editor_stage =
         new Hexagon::AdvancedCodeEditor::Stage(font_bin, num_columns, num_rows);
      advanced_code_editor_stage->set_on_color(obtain_base_text_color()); // TODO: these should be able to be set
                                                                          // after initialization
      if (!obtain_dark_mode())
      {
         //ALLEGRO_COLOR syntax_highlight_color = ALLEGRO_COLOR{0.75f, 0.96f, 1.0f, 1.0f};
         //ALLEGRO_COLOR on_color = ALLEGRO_COLOR{1.0f, 1.0f, 0.0f, 1.0f};
         //ALLEGRO_COLOR comment_color = ALLEGRO_COLOR{0.5f, 0.5f, 0.5f, 0.5f};
         //ALLEGRO_COLOR clear_color = ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f};

         ALLEGRO_COLOR on_color = ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 1.0f};
         ALLEGRO_COLOR syntax_highlight_color =
            AllegroFlare::color::mix(on_color, ALLEGRO_COLOR{0.5f, 0.75f, 1.0f, 1.0f}, 0.56);
         ALLEGRO_COLOR comment_color = ALLEGRO_COLOR{0.2, 0.21, 0.28, 0.5f}; //AllegroFlare::color::color(on_color, 0.5);
         ALLEGRO_COLOR clear_color = ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f};

         advanced_code_editor_stage->set_syntax_highlight_color(syntax_highlight_color);
         advanced_code_editor_stage->set_on_color(on_color);
         advanced_code_editor_stage->set_comment_color(comment_color);
         advanced_code_editor_stage->set_clear_color(clear_color);

         ALLEGRO_COLOR base_backfill_color = obtain_base_backfill_color();
         ALLEGRO_COLOR &bbc = base_backfill_color;
         ALLEGRO_COLOR inv_base_backfill_color = ALLEGRO_COLOR{1.0f - bbc.r, 1.0f - bbc.g, 1.0f - bbc.b, 1.0f};

         ALLEGRO_COLOR null_space_color = AllegroFlare::color::color(inv_base_backfill_color, 0.05);
         ALLEGRO_COLOR backfill_color = AllegroFlare::color::color(inv_base_backfill_color, 0.025);
         advanced_code_editor_stage->set_null_space_color(null_space_color);
         advanced_code_editor_stage->set_backfill_color(backfill_color);
      }

      advanced_code_editor_stage->initialize();

      std::string file_contents = php::file_get_contents(filename);
      bool is_symlink = Blast::Project::SymlinkChecker(filename).is_symlink();
      advanced_code_editor_stage->set_represents_symlink(is_symlink);
      advanced_code_editor_stage->set_filename(filename);
      advanced_code_editor_stage->set_content(file_contents);
      advanced_code_editor_stage->set_show_line_too_long(true);

      //advanced_code_editor_stage->set_on_color(obtain_base_text_color());
      //advanced_code_editor_stage->set_backfill_color(obtain_base_backfill_color());

      return advanced_code_editor_stage;
    body_dependency_symbols:
       - php::file_get_contents
       - AllegroFlare::color::mix
       - StageInterface*
       - Hexagon::AdvancedCodeEditor::Stage


  - name: create_code_editor
    type: StageInterface*
    parameters:
      - name: filename
        type: std::string
        default_argument: '""'
      - name: file_category
        type: std::string
        default_argument: '"undefined"'
    body: |
      Hexagon::CodeEditor::Stage *code_editor_stage = new Hexagon::CodeEditor::Stage(
         ::CodeEditor::CodeEditor{filename, file_category}
      );

      // properties previously assigned at render time:
      ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      bool is_symlink = Blast::Project::SymlinkChecker(filename).is_symlink();

      code_editor_stage->set_represents_a_symlink(is_symlink);
      code_editor_stage->set_display(display);
      code_editor_stage->set_font(font);
      code_editor_stage->set_font_bin(font_bin);
      code_editor_stage->set_cell_width(cell_width);
      code_editor_stage->set_cell_height(cell_height);

      return code_editor_stage;
    body_dependency_symbols:
       - StageInterface*
       - Hexagon::CodeEditor::Stage
       - Blast::Project::SymlinkChecker


  - name: create_delete_multiplex_menu
    type: StageInterface*
    parameters:
      - name: advanced_code_editor_stage
        type: Hexagon::AdvancedCodeEditor::Stage*
        default_argument: nullptr
      - name: system
        type: Hexagon::System::System*
        default_argument: nullptr
    body: |
      Hexagon::MultiplexMenu::MultiplexMenu delete_multiplex_menu = build_full_multiplex_menu();

      Hexagon::MultiplexMenu::Stage *stage = new Hexagon::MultiplexMenu::Stage(
         font_bin,
         advanced_code_editor_stage,
         system,
         delete_multiplex_menu
      );

      stage->open_page("start");
      stage->open_page("page_delete");

      stage->set_place(build_multiplex_menu_initial_place());
      stage->set_render_on_hud(true);
      return stage;
    body_dependency_symbols:
       - Hexagon::MultiplexMenu::Stage
       - Hexagon::MultiplexMenu::MultiplexMenuPage


  - name: create_change_multiplex_menu
    type: StageInterface*
    parameters:
      - name: advanced_code_editor_stage
        type: Hexagon::AdvancedCodeEditor::Stage*
        default_argument: nullptr
      - name: system
        type: Hexagon::System::System*
        default_argument: nullptr
    body: |
      Hexagon::MultiplexMenu::MultiplexMenu delete_multiplex_menu = build_full_multiplex_menu();

      Hexagon::MultiplexMenu::Stage *stage = new Hexagon::MultiplexMenu::Stage(
         font_bin,
         advanced_code_editor_stage,
         system,
         delete_multiplex_menu
      );

      stage->open_page("start");
      stage->open_page("page_change");

      stage->set_place(build_multiplex_menu_initial_place());
      stage->set_render_on_hud(true);
      return stage;
    body_dependency_symbols:
       - Hexagon::MultiplexMenu::Stage
       - Hexagon::MultiplexMenu::MultiplexMenuPage


  - name: create_goto_multiplex_menu
    type: StageInterface*
    parameters:
      - name: advanced_code_editor_stage
        type: Hexagon::AdvancedCodeEditor::Stage*
        default_argument: nullptr
      - name: system
        type: Hexagon::System::System*
        default_argument: nullptr
    body: |
      Hexagon::MultiplexMenu::MultiplexMenu delete_multiplex_menu = build_full_multiplex_menu();

      Hexagon::MultiplexMenu::Stage *stage = new Hexagon::MultiplexMenu::Stage(
         font_bin,
         advanced_code_editor_stage,
         system,
         delete_multiplex_menu
      );

      stage->open_page("start");
      stage->open_page("page_goto");

      stage->set_place(build_multiplex_menu_initial_place());
      stage->set_render_on_hud(true);
      return stage;
    body_dependency_symbols:
       - Hexagon::MultiplexMenu::Stage
       - Hexagon::MultiplexMenu::MultiplexMenuPage


  - name: create_regex_input_box_modal
    type: StageInterface*
    body: |
      // TODO: extract this one line input box from CodeEditor
      //Hexagon::CodeEditor::Stage *stage = new Hexagon::CodeEditor::Stage({
      //      obtain_regex_temp_filename(),
      //      "input_box",
      //      ::CodeEditor::CodeEditor::INSERT,
      //      StageInterface::ONE_LINE_INPUT_BOX
      //   });
      Hexagon::OneLineInputBox::Stage *stage = new Hexagon::OneLineInputBox::Stage({
            obtain_regex_temp_filename(),
            "input_box",
            ::CodeEditor::CodeEditor::INSERT,
            StageInterface::ONE_LINE_INPUT_BOX
         });
      stage->set_place(build_regex_input_box_initial_place());
      stage->set_font(obtain_global_font());
      stage->set_render_on_hud(true);
      stage->get_code_editor_ref().set_initial_content(std::vector<std::string>{ "" });

      // properties previously assigned at render time:
      ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      stage->set_display(display);
      stage->set_cell_width(cell_width);
      stage->set_cell_height(cell_height);

      return stage;
    body_dependency_symbols:
      - Hexagon::CodeEditor::Stage
      - Hexagon::OneLineInputBox::Stage


  - name: create_git_commit_message_box
    type: StageInterface*
    body: |
      Hexagon::GitCommitMessageInputBox::Stage *stage = new Hexagon::GitCommitMessageInputBox::Stage(
         {
            obtain_regex_temp_filename(),
            "git_commit_message_input_box",
            ::CodeEditor::CodeEditor::INSERT,
            StageInterface::GIT_COMMIT_MESSAGE_INPUT_BOX
         });

      stage->set_place(build_git_commit_message_input_box_initial_place());
      stage->set_font(obtain_git_commit_message_box_font());
      stage->set_render_on_hud(true);
      stage->get_code_editor_ref().set_initial_content(std::vector<std::string>{ "" });

      // properties previously assigned at render time:
      ALLEGRO_DISPLAY *display = get_current_display();
      ALLEGRO_FONT *font = obtain_git_commit_message_box_font();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      stage->set_display(display);
      stage->set_font(font);
      stage->set_cell_width(cell_width);
      stage->set_cell_height(cell_height);

      return stage;
    body_dependency_symbols:
      - Hexagon::GitCommitMessageInputBox::Stage


  - name: create_advanced_component_navigator
    type: StageInterface*
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '"/Users/markoates/Repos/hexagon/"'
      - name: initial_search_text
        type: std::string
        default_argument: '""'
    guards: [ font_bin ]
    body: |
      Hexagon::AdvancedComponentNavigator::Stage *result =
         new Hexagon::AdvancedComponentNavigator::Stage(project_directory);

      result->process_local_event("refresh_list"); // TODO: find a test technique for this,
                                                   // I feel like this event should not be run real-time
                                                   // it's blocking and requests from the filesystem so
                                                   // this refresh should be part of an operation that
                                                   // happens after the creation, or something like that
      result->set_font_bin(font_bin);
      result->set_render_on_hud(false);
      result->set_base_text_color(obtain_base_text_color());
      result->set_base_backfill_color(obtain_base_backfill_color());

      bool stage_is_on_hud = true;
      if (stage_is_on_hud)
      {
         result->set_render_on_hud(true);
         result->set_place(build_centered_on_hud_initial_place(600, 700));
      }
      else
      {
         result->set_render_on_hud(false);
         result->set_place(build_centered_in_world_initial_place(600, 700));
      }

    
      // properties previously assigned at render time:
      ALLEGRO_DISPLAY *display = get_current_display();
      ALLEGRO_FONT *font = obtain_component_navigator_font();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      result->set_display(display);
      result->set_font(font);
      result->set_cell_width(cell_width);
      result->set_cell_height(cell_height);

      if (!initial_search_text.empty())
      {
         result->get_component_ref().set_search_text(initial_search_text);
         result->get_component_ref().refresh_list();
      }

      return result;
    body_dependency_symbols:
      - Hexagon::AdvancedComponentNavigator::Stage
      - al_get_text_width
      - al_font_line_height


  - name: create_project_navigator
    type: StageInterface*
    guards: [ font_bin ]
    parameters:
      - name: project_menu_items
        type: std::vector<std::tuple<std::string, std::string>>
        default_argument: '{}'
    body: |
      Hexagon::ProjectNavigator *result = new Hexagon::ProjectNavigator(font_bin);

      //result->set_font_bin(font_bin);
      result->set_render_on_hud(true);
      //result->set_base_text_color(obtain_base_text_color());
      //result->set_base_backfill_color(obtain_base_backfill_color());
      result->set_place(build_centered_on_hud_initial_place(600, 700));

      if (project_menu_items.empty())
      {
         std::vector<std::tuple<std::string, std::string>> default_project_menu_items =
            Hexagon::ProjectNavigator::build_placeholder_menu_items();
         project_menu_items = default_project_menu_items;
      }

      result->set_menu_items(project_menu_items);
      result->initialize();

      //ALLEGRO_DISPLAY *display = get_current_display();
      //ALLEGRO_FONT *font = obtain_component_navigator_font();
      //int cell_width = al_get_text_width(font, " ");
      //int cell_height = al_get_font_line_height(font);

      //result->set_display(display);
      //result->set_font(font);
      //result->set_cell_width(cell_width);
      //result->set_cell_height(cell_height);

      return result;
    body_dependency_symbols:
      - Hexagon::ProjectNavigator
      - std::vector<std::tuple<std::string, std::string>>


  - name: get_current_display
    xprivate: true
    type: ALLEGRO_DISPLAY*
    guards: [ al_is_system_installed(), al_get_current_display() ]
    body: |
      return al_get_current_display();
    body_dependency_symbols:
      - al_get_current_display


  - name: build_centered_on_hud_initial_place
    xprivate: true
    type: placement3d
    parameters:
      - name: width
        type: float
        default_argument: 0
      - name: height
        type: float
        default_argument: 0
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      float surface_width = get_hud_render_surface_projection_width();
      float surface_height = get_hud_render_surface_projection_height();
      placement3d result;
      //result.position = vec3d(get_display_width(display)/2, al_get_display_height(display)/2, 0);
      result.position = vec3d(surface_width/2, surface_height/2, 0);
      result.size = vec3d(width, height, 0);
      result.align = vec3d(0.5, 0.5, 0.5);
      result.scale = vec3d(1.0, 1.0, 1.0);
      result.rotation = vec3d(0.0, 0.0, 0.0);
      return result;


  - name: build_centered_in_world_initial_place
    xprivate: true
    type: placement3d
    parameters:
      - name: width
        type: float
        default_argument: 0
      - name: height
        type: float
        default_argument: 0
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      float surface_width = 0; //get_hud_render_surface_projection_width();
      float surface_height = 0; //get_hud_render_surface_projection_height();
      placement3d result;
      //result.position = vec3d(get_display_width(display)/2, al_get_display_height(display)/2, 0);
      result.position = vec3d(surface_width/2, surface_height/2, 0);
      result.size = vec3d(width, height, 0);
      result.align = vec3d(0.5, 0.5, 0.5);
      result.scale = vec3d(1.0, 1.0, 1.0);
      result.rotation = vec3d(0.0, 0.0, 0.0);
      return result;


  - name: build_file_navigator_initial_place
    private: true
    type: placement3d
    body: |
      float surface_width = get_hud_render_surface_projection_width();
      float surface_height = get_hud_render_surface_projection_height();
      placement3d result;
      //result.position = vec3d(get_display_width(display)/2, al_get_display_height(display)/2, 0);
      result.position = vec3d(surface_width/2, surface_height/2, 0);
      ALLEGRO_DISPLAY *display = get_current_display();
      result.size = vec3d(500, 600, 0);
      result.align = vec3d(0.5, 0.5, 0);
      result.scale = vec3d(0.8, 0.8, 1.0);
      result.rotation = vec3d(0.0, 0.0, 0.0);
      return result;


  - name: build_multiplex_menu_initial_place
    private: true
    type: placement3d
    body: |
      float surface_width = get_hud_render_surface_projection_width();
      float surface_height = get_hud_render_surface_projection_height();
      float height = al_get_font_line_height(obtain_git_commit_message_box_font());

      //ALLEGRO_DISPLAY *display = get_current_display();
      //int surface_width = al_get_display_width(display);
      //int surface_height = al_get_display_height(display);
      placement3d place(surface_width*0.5f, surface_height*0.5f + 20, 0.0);
      place.size = vec3d(680, height, 0.0);
      place.scale = vec3d(0.5, 0.5, 1.0);
      place.rotation = vec3d(0.0, 0.0, 0.0);
      return place;


  - name: build_git_commit_message_input_box_initial_place
    private: true
    type: placement3d
    body: |
      float surface_width = get_hud_render_surface_projection_width();
      float surface_height = get_hud_render_surface_projection_height();
      float height = al_get_font_line_height(obtain_git_commit_message_box_font());

      //ALLEGRO_DISPLAY *display = get_current_display();
      //int surface_width = al_get_display_width(display);
      //int surface_height = al_get_display_height(display);
      placement3d place(surface_width*0.5f, surface_height*0.5f + 20, 0.0);
      place.size = vec3d(680, height, 0.0);
      place.scale = vec3d(1.2, 1.2, 1.0);
      place.rotation = vec3d(0.0, 0.0, 0.0);
      return place;


  - name: build_regex_input_box_initial_place
    private: true
    type: placement3d
    body: |
      float surface_width = get_hud_render_surface_projection_width();
      float surface_height = get_hud_render_surface_projection_height();
      //ALLEGRO_DISPLAY *display = get_current_display();
      //int surface_width = al_get_display_width(display);
      //int surface_height = al_get_display_height(display);
      placement3d place(surface_width*0.5f, surface_height*0.5f, 0.0);
      place.size = vec3d(400, 25, 0.0);
      place.scale = vec3d(1.5, 1.5, 1.0);
      place.rotation = vec3d(0.0, 0.0, 0.0);
      return place;


  - name: build_full_multiplex_menu
    type: Hexagon::MultiplexMenu::MultiplexMenu
    body: |
      Hexagon::MultiplexMenu::MultiplexMenuPage start_page(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_D}, "Delete >", { "open_page:page_delete" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_C}, "Change >", { "open_page:page_change" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_G}, "Go to >", { "open_page:page_goto" } ),
      });

      Hexagon::MultiplexMenu::MultiplexMenuPage page_change(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_A}, "Around >", { "open_page:page_change_around" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_I}, "Inside >", { "open_page:page_change_inside" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_W}, "To next word", {
               "delete_to_next_word_or_end_of_line",
               "set_to_insert_mode",
            }),
      });

      Hexagon::MultiplexMenu::MultiplexMenuPage page_delete(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_A}, "Around >", { "open_page:page_delete_around" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_I}, "Inside >", { "open_page:page_delete_inside" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_W}, "To next word", { "delete_to_next_word_or_end_of_line" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_D}, "Line", { "delete_line" } ),
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_4, true}, "To end of line", { "delete_to_end_of_line" } ),
      });

      Hexagon::MultiplexMenu::MultiplexMenuPage page_delete_around(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_W}, "Word", { "delete_word_under_cursor" } ),
      });

      Hexagon::MultiplexMenu::MultiplexMenuPage page_delete_inside(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_W}, "Word", { "delete_word_under_cursor" } ),
      });

      Hexagon::MultiplexMenu::MultiplexMenuPage page_change_around(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_W}, "Word", {
               "delete_word_under_cursor",
               "set_to_insert_mode",
            }),
      });

      Hexagon::MultiplexMenu::MultiplexMenuPage page_change_inside(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_W}, "Word", {
               "delete_word_under_cursor",
               "set_to_insert_mode",
            }),
      });

      Hexagon::MultiplexMenu::MultiplexMenuPage page_goto(
      {
         Hexagon::MultiplexMenu::MenuItem({ALLEGRO_KEY_G}, "Top of file", {
               "cursor_move_to_start_of_file",
               "first_row_offset_adjust_so_cursor_is_vertically_centered",
            }),
      });

      std::map<std::string, Hexagon::MultiplexMenu::MultiplexMenuPage> dictionary =
      {
         { "start", start_page },

         { "page_delete", page_delete },
         { "page_delete_around", page_delete_around },
         { "page_delete_inside", page_delete_inside },

         { "page_change", page_change },
         { "page_change_around", page_change_around },
         { "page_change_inside", page_change_inside },

         { "page_goto", page_goto },
      };

      // TODO: validate menu commands are valid commands for the advanced_code_editor_stage

      Hexagon::MultiplexMenu::MultiplexMenu full_multiplex_menu(dictionary);
      return full_multiplex_menu;
    body_dependency_symbols:
       - Hexagon::MultiplexMenu::MultiplexMenuPage
    


dependencies:


  - symbol: AllegroFlare::color::mix
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: Hexagon::ObjectivesLog::Stage
    headers: [ Hexagon/ObjectivesLog/Stage.hpp ]
  - symbol: Hexagon::MultiplexMenu::Stage
    headers: [ Hexagon/MultiplexMenu/Stage.hpp ]
  - symbol: Hexagon::MultiplexMenu::MultiplexMenu
    headers: [ Hexagon/MultiplexMenu/MultiplexMenu.hpp ]
  - symbol: Hexagon::MultiplexMenu::MultiplexMenuPage
    headers: [ Hexagon/MultiplexMenu/MultiplexMenuPage.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Blast::Project::SymlinkChecker
    headers: [ Blast/Project/SymlinkChecker.hpp ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
  - symbol: Blast::Project::Component
    headers: [ Blast/Project/Component.hpp ]
  - symbol: Hexagon::System::System*
    headers: [ Hexagon/System/System.hpp ]
  - symbol: Hexagon::Fancy::Stage
    headers: [ Hexagon/Fancy/Stage.hpp ]
  - symbol: Hexagon::MissingFile::Stage
    headers: [ Hexagon/MissingFile/Stage.hpp ]
  - symbol: Hexagon::FileNavigator::Stage
    headers: [ Hexagon/FileNavigator/Stage.hpp ]
  - symbol: Hexagon::CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: Hexagon::OneLineInputBox::Stage
    headers: [ Hexagon/OneLineInputBox/Stage.hpp ]
  - symbol: Hexagon::GitCommitMessageInputBox::Stage
    headers: [ Hexagon/GitCommitMessageInputBox/Stage.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Stage*
    headers: [ Hexagon/AdvancedCodeEditor/Stage.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Stage
    headers: [ Hexagon/AdvancedCodeEditor/Stage.hpp ]
  - symbol: Hexagon::AdvancedComponentNavigator::Stage
    headers: [ Hexagon/AdvancedComponentNavigator/Stage.hpp ]
  - symbol: Hexagon::ProjectNavigator
    headers: [ Hexagon/ProjectNavigator.hpp ]
  - symbol: std::vector<std::tuple<std::string, std::string>>
    headers: [ vector, tuple, string ]
  - symbol: Hexagon::Notifications::Stage
    headers: [ Hexagon/Notifications/Stage.hpp ]
  - symbol: Hexagon::UI::LittleMenu
    headers: [ Hexagon/UI/LittleMenu.hpp ]
  - symbol: Hexagon::ComponentRelationsNavigator::Stage
    headers: [ Hexagon/ComponentRelationsNavigator/Stage.hpp ]
  - symbol: Hexagon::ComponentRelationsNavigator::ComponentRelations
    headers: [ Hexagon/ComponentRelationsNavigator/ComponentRelations.hpp ]
  - symbol: Hexagon::UI::DrawingBox
    headers: [ Hexagon/UI/DrawingBox.hpp ]
  - symbol: StageInterface*
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::System::Config*
    headers: [ Hexagon/System/Config.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_current_display
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_text_width
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_font_line_height
    headers: [ allegro5/allegro_font.h ]
  - symbol: std::vector<std::tuple<std::string, std::string>>
    headers: [ vector, tuple, string ]

  - symbol: ALLEGRO_DISPLAY
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::System::Config
    headers: [ Hexagon/System/Config.hpp ]
  - symbol: Hexagon::System::System
    headers: [ Hexagon/System/System.hpp ]
  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]

