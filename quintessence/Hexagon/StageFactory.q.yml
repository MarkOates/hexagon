properties:


  - name: config
    type: Hexagon::System::Config*
    init_with: nullptr
    constructor_arg: true
  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true


functions:


  - name: obtain_default_navigator_directory
    type: std::string
    guards: [ config ]
    body: |
      return config->get_default_navigator_directory();


  - name: obtain_base_text_color
    type: ALLEGRO_COLOR
    guards: [ config ]
    body: |
      return config->get_base_text_color();


  - name: obtain_regex_temp_filename
    type: std::string
    guards: [ config ]
    body: |
      return config->get_regex_temp_filename();


  - name: obtain_base_backfill_color
    type: ALLEGRO_COLOR
    guards: [ config ]
    body: |
      return config->get_backfill_color();


  - name: obtain_component_navigator_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Menlo-Regular.ttf -18");


  - name: obtain_file_navigator_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("consolas.ttf -18");


  - name: obtain_global_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Menlo-Regular.ttf -20");


  - name: obtain_git_commit_message_box_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Purista Medium.otf -22");


  - name: obtain_display_default_width
    type: int
    guards: [ config ]
    body: |
      return config->get_initial_display_width();


  - name: obtain_display_default_height
    type: int
    guards: [ config ]
    body: |
      return config->get_initial_display_height();


  - name: create
    type: StageInterface*
    body: |
      return nullptr;


  - name: create_file_navigator
    type: StageInterface*
    parameters:
      - name: directory
        type: std::string
        default_argument: '""'
    body: |
      std::string directory_to_start = directory.empty() ? obtain_default_navigator_directory() : directory;

      ALLEGRO_FONT *font = obtain_file_navigator_font();
      Hexagon::FileNavigator::Stage *file_navigator
         = new Hexagon::FileNavigator::Stage(directory_to_start);
      file_navigator->process_local_event("refresh_list"); // TODO: similar to another comment existing in this file
                                                           // at the time of this writing
      file_navigator->set_place(build_file_navigator_initial_place());
      file_navigator->set_render_on_hud(true);

      // properties previously assigned at render time:
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      file_navigator->set_display(display);
      file_navigator->set_font(font);
      file_navigator->set_cell_width(cell_width);
      file_navigator->set_cell_height(cell_height);

      return file_navigator;
    body_dependency_symbols:
       - Hexagon::FileNavigator::Stage


  - name: create_little_menu
    type: StageInterface*
    body: |
      Hexagon::UI::LittleMenu *little_menu = new Hexagon::UI::LittleMenu(font_bin);
      little_menu->set_render_on_hud(true);
      little_menu->set_place(build_centered_on_hud_initial_place(400, 300));
      return little_menu;
    body_dependency_symbols:
       - Hexagon::UI::LittleMenu


  - name: create_drawing_box
    type: StageInterface*
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();

      int width = al_get_display_width(display) - 200;
      int height = al_get_display_height(display) -200;

      Hexagon::UI::DrawingBox *drawing_box = new Hexagon::UI::DrawingBox(font_bin, width, height);
      drawing_box->initialize();

      drawing_box->set_render_on_hud(true);
      drawing_box->set_place(build_centered_on_hud_initial_place(width, height));

      return drawing_box;
    body_dependency_symbols:
       - Hexagon::UI::DrawingBox


  - name: create_missing_file
    type: StageInterface*
    parameters:
      - name: filename
        type: std::string
        default_argument: '""'
    body: |
      Hexagon::MissingFile::Stage *missing_file_stage = new Hexagon::MissingFile::Stage(filename);

      ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      missing_file_stage->set_display(display);
      missing_file_stage->set_font(font);
      missing_file_stage->set_cell_width(cell_width);
      missing_file_stage->set_cell_height(cell_height);

      return missing_file_stage;
    body_dependency_symbols:
       - StageInterface*
       - Hexagon::MissingFile::Stage


  - name: create_advanced_code_editor
    type: StageInterface*
    parameters:
      - name: filename
        type: std::string
        default_argument: '"untitled.txt"'
      - name: num_columns
        type: int
        default_argument: 123
      - name: num_rows
        type: int
        default_argument: 70
    body: |
      Hexagon::AdvancedCodeEditor::Stage *advanced_code_editor_stage =
         new Hexagon::AdvancedCodeEditor::Stage(font_bin, num_columns, num_rows);

      advanced_code_editor_stage->initialize();

      std::string file_contents = php::file_get_contents(filename);
      advanced_code_editor_stage->set_filename(filename);
      advanced_code_editor_stage->set_content(file_contents);
      //advanced_code_editor_stage->set_base_font_color(text_color);
      //advanced_code_editor_stage->set_backfill_color(backfill_color);

      return advanced_code_editor_stage;
    body_dependency_symbols:
       - php::file_get_contents
       - StageInterface*
       - Hexagon::AdvancedCodeEditor::Stage


  - name: create_code_editor
    type: StageInterface*
    parameters:
      - name: filename
        type: std::string
        default_argument: '""'
      - name: file_category
        type: std::string
        default_argument: '"undefined"'
    body: |
      Hexagon::CodeEditor::Stage *code_editor_stage = new Hexagon::CodeEditor::Stage(
         ::CodeEditor::CodeEditor{filename, file_category}
      );

      // properties previously assigned at render time:
      ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      code_editor_stage->set_display(display);
      code_editor_stage->set_font(font);
      code_editor_stage->set_cell_width(cell_width);
      code_editor_stage->set_cell_height(cell_height);

      return code_editor_stage;
    body_dependency_symbols:
       - StageInterface*
       - Hexagon::CodeEditor::Stage


  - name: create_regex_input_box_modal
    type: StageInterface*
    body: |
      // TODO: extract this one line input box from CodeEditor
      Hexagon::CodeEditor::Stage *stage = new Hexagon::CodeEditor::Stage({
            obtain_regex_temp_filename(),
            "input_box",
            ::CodeEditor::CodeEditor::INSERT,
            StageInterface::ONE_LINE_INPUT_BOX
         });
      stage->set_place(build_regex_input_box_initial_place());
      stage->set_font(obtain_global_font());
      stage->set_render_on_hud(true);
      stage->get_code_editor_ref().set_initial_content(std::vector<std::string>{ "" });

      // properties previously assigned at render time:
      ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_DISPLAY *display = get_current_display();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      stage->set_display(display);
      stage->set_cell_width(cell_width);
      stage->set_cell_height(cell_height);

      return stage;
    body_dependency_symbols:
      - Hexagon::CodeEditor::Stage


  - name: create_git_commit_message_box
    type: StageInterface*
    body: |
      Hexagon::CodeEditor::Stage *stage = new Hexagon::CodeEditor::Stage(
         {
            obtain_regex_temp_filename(),
            "git_commit_message_input_box",
            ::CodeEditor::CodeEditor::INSERT,
            StageInterface::GIT_COMMIT_MESSAGE_INPUT_BOX
         });

      stage->set_place(build_git_commit_message_input_box_initial_place());
      stage->set_font(obtain_git_commit_message_box_font());
      stage->set_render_on_hud(true);
      stage->get_code_editor_ref().set_initial_content(std::vector<std::string>{ "" });

      // properties previously assigned at render time:
      ALLEGRO_DISPLAY *display = get_current_display();
      ALLEGRO_FONT *font = obtain_git_commit_message_box_font();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      stage->set_display(display);
      stage->set_font(font);
      stage->set_cell_width(cell_width);
      stage->set_cell_height(cell_height);

      return stage;
    body_dependency_symbols:
      - Hexagon::CodeEditor::Stage


  - name: create_advanced_component_navigator
    type: StageInterface*
    body: |
      Hexagon::AdvancedComponentNavigator::Stage *result =
         new Hexagon::AdvancedComponentNavigator::Stage(obtain_default_navigator_directory());

      result->process_local_event("refresh_list"); // TODO: find a test technique for this,
                                                   // I feel like this event should not be run real-time
                                                   // it's blocking and requests from the filesystem so
                                                   // this refresh should be part of an operation that
                                                   // happens after the creation, or something like that
      result->set_render_on_hud(true);
      result->set_base_text_color(obtain_base_text_color());
      result->set_base_backfill_color(obtain_base_backfill_color());
      result->set_place(build_component_navigator_initial_place());

      // properties previously assigned at render time:
      ALLEGRO_DISPLAY *display = get_current_display();
      ALLEGRO_FONT *font = obtain_component_navigator_font();
      int cell_width = al_get_text_width(font, " ");
      int cell_height = al_get_font_line_height(font);

      result->set_display(display);
      result->set_font(font);
      result->set_cell_width(cell_width);
      result->set_cell_height(cell_height);

      return result;
    body_dependency_symbols:
      - Hexagon::AdvancedComponentNavigator::Stage
      - al_get_text_width
      - al_font_line_height


  - name: get_current_display
    private: true
    type: ALLEGRO_DISPLAY*
    guards: [ al_is_system_installed(), al_get_current_display() ]
    body: |
      return al_get_current_display();
    body_dependency_symbols:
      - al_get_current_display


  - name: build_centered_on_hud_initial_place
    private: true
    type: placement3d
    parameters:
      - name: width
        type: float
        default_argument: 0
      - name: height
        type: float
        default_argument: 0
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      placement3d result;
      result.position = vec3d(al_get_display_width(display)/2, al_get_display_height(display)/2, 0);
      result.size = vec3d(width, height, 0);
      result.align = vec3d(0.5, 0.5, 0.5);
      result.scale = vec3d(1.0, 1.0, 1.0);
      result.rotation = vec3d(0.0, 0.0, 0.0);
      return result;


  - name: build_component_navigator_initial_place
    private: true
    type: placement3d
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      placement3d result;
      result.position = vec3d(al_get_display_width(display)/2, al_get_display_height(display)/2, 0);
      result.size = vec3d(800, 700, 0);
      result.align = vec3d(0.5, 0.5, 0.5);
      result.scale = vec3d(1.0, 1.0, 1.0);
      result.rotation = vec3d(0.0, 0.0, 0.0);
      return result;


  - name: build_file_navigator_initial_place
    private: true
    type: placement3d
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      placement3d result;
      result.position = vec3d(al_get_display_width(display)/2, al_get_display_height(display)/2, 0);
      result.size = vec3d(500, 600, 0);
      result.align = vec3d(0.5, 0.5, 0);
      result.scale = vec3d(0.8, 0.8, 1.0);
      result.rotation = vec3d(0.0, 0.0, 0.0);
      return result;


  - name: build_git_commit_message_input_box_initial_place
    private: true
    type: placement3d
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      int surface_width = al_get_display_width(display);
      int surface_height = al_get_display_height(display);
      placement3d place(surface_width*0.5f, surface_height*0.5f, 0.0);
      place.size = vec3d(600, 25, 0.0);
      place.scale = vec3d(1.5, 1.5, 1.0);
      place.rotation = vec3d(0.0, 0.0, 0.0);
      return place;


  - name: build_regex_input_box_initial_place
    private: true
    type: placement3d
    body: |
      ALLEGRO_DISPLAY *display = get_current_display();
      int surface_width = al_get_display_width(display);
      int surface_height = al_get_display_height(display);
      placement3d place(surface_width*0.5f, surface_height*0.5f, 0.0);
      place.size = vec3d(300, 25, 0.0);
      place.scale = vec3d(1.5, 1.5, 1.0);
      place.rotation = vec3d(0.0, 0.0, 0.0);
      return place;


dependencies:


  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
  - symbol: Hexagon::MissingFile::Stage
    headers: [ Hexagon/MissingFile/Stage.hpp ]
  - symbol: Hexagon::FileNavigator::Stage
    headers: [ Hexagon/FileNavigator/Stage.hpp ]
  - symbol: Hexagon::CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Stage
    headers: [ Hexagon/AdvancedCodeEditor/Stage.hpp ]
  - symbol: Hexagon::AdvancedComponentNavigator::Stage
    headers: [ Hexagon/AdvancedComponentNavigator/Stage.hpp ]
  - symbol: Hexagon::UI::LittleMenu
    headers: [ Hexagon/UI/LittleMenu.hpp ]
  - symbol: Hexagon::UI::DrawingBox
    headers: [ Hexagon/UI/DrawingBox.hpp ]
  - symbol: StageInterface*
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::System::Config*
    headers: [ Hexagon/System/Config.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_current_display
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_text_width
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_font_line_height
    headers: [ allegro5/allegro_font.h ]

