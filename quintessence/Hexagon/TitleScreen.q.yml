properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: main_menu
    type: Hexagon::Elements::ListMenu
    init_with: '{}'
  - name: initialized
    type: bool
    init_with: false
    getter: true


functions:


  - name: initialize
    body: |
      main_menu = Hexagon::Elements::ListMenu(font_bin, "Projects", {
         { "Hexagon", "/Users/markoates/Repos/hexagon/" },
         { "Blast", "/Users/markoates/Repos/blast/" },
         { "LightracerMax", "/Users/markoates/Repos/lightracer-max/" },
         { "NcursesArt", "/Users/markoates/Repos/ncurses_art/" },
         { "Solitare", "/Users/markoates/Repos/Solitare/" },
         { "AllegroFlare", "/Users/markoates/Repos/allegro_flare/" },
      });
      initialized = true;
      return;


  - name: main_menu_cursor_move_up
    type: bool
    body: |
       return main_menu.move_cursor_up();


  - name: main_menu_cursor_move_down
    type: bool
    body: |
       return main_menu.move_cursor_down();


  - name: main_menu_get_current_list_item_identifier
    type: std::string
    body: |
       return main_menu.get_current_list_item_identifier();


  - name: draw_hexagon_logo_and_wait_for_keypress
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - font_bin
      - al_get_target_bitmap()
      - get_initialized()
    body: |
       AllegroFlare::Profiler profiler;

       float logo_radius = 64;
       int display_width = al_get_bitmap_width(al_get_target_bitmap());
       int display_height = al_get_bitmap_height(al_get_target_bitmap());
       ALLEGRO_COLOR hexagon_red = al_color_html("#bc2d48");
       Hexagon::Shaders::TiledHexagonMotionEffect shader;
       shader.initialize();

       std::string logo_font_identifier = "Expansiva_bold.otf 23";
       ALLEGRO_FONT *expansiva_font = font_bin->auto_get(logo_font_identifier);

       std::string detail_text_font_identifier = "Exan-Regular.ttf 16";
       //"Purista Medium.otf 16";
       ALLEGRO_FONT *purista_font = font_bin->auto_get(detail_text_font_identifier);

       al_install_keyboard();

       ALLEGRO_EVENT_QUEUE *primary_event_queue;
       primary_event_queue = al_create_event_queue();
       al_register_event_source(primary_event_queue, al_get_keyboard_event_source());

       ALLEGRO_TIMER *primary_timer = al_create_timer(1.0/60);
       al_register_event_source(primary_event_queue, al_get_timer_event_source(primary_timer));
       al_start_timer(primary_timer);

       ALLEGRO_BITMAP *dummy_bitmap = al_create_bitmap(display_width, display_height);

       // wait for keypress
       bool abort_program = false;
       bool draw_motion_effect = true;
       while (!abort_program)
       {
          ALLEGRO_EVENT event;
          al_wait_for_event(primary_event_queue, &event);

          switch(event.type)
          {
          case ALLEGRO_EVENT_KEY_DOWN:
             {
                switch (event.keyboard.keycode)
                {
                case ALLEGRO_KEY_M:
                   // disable shader
                   draw_motion_effect = false;

                   // open dialog box
                   break;
                case ALLEGRO_KEY_J:
                   main_menu_cursor_move_down();
                   break;
                case ALLEGRO_KEY_K:
                   main_menu_cursor_move_up();
                   break;
                case ALLEGRO_KEY_ENTER:
                   append_project_path_to_config_file();
                   abort_program = true;
                   break;
                default:
                   abort_program = true;
                   break;
                }
             }
             break;
          case ALLEGRO_EVENT_TIMER:
             {
                profiler.emit("primary_timer logic started");

                al_clear_to_color(ALLEGRO_COLOR{0, 0, 0, 1});

                if (draw_motion_effect)
                {
                   shader.activate();
                   shader.set_texture_width(al_get_bitmap_width(dummy_bitmap));
                   shader.set_texture_height(al_get_bitmap_height(dummy_bitmap));
                   shader.set_time(al_get_time());

                   al_draw_bitmap(dummy_bitmap, 0, 0, 0);

                   shader.deactivate();
                }

                Hexagon::Logo logo(
                  display_width/2,
                  display_height/2,
                  logo_radius,
                  expansiva_font,
                  hexagon_red,
                  2.25);
                logo.render();

                std::string allegro_version_string = build_allegro_version_string();
                al_draw_text(purista_font, hexagon_red,
                   display_width/2, display_height/2 + logo_radius * 2.0, ALLEGRO_ALIGN_CENTER,
                   allegro_version_string.c_str());

                draw_menu();

                render_profiler_graph(&profiler, purista_font);

                profiler.emit("primary_timer logic ended");
                profiler.emit("al_flip_display logic started");
                al_flip_display();
                profiler.emit("al_flip_display logic ended");

                bool drop_backed_up_primary_timer_events = true;
                if (drop_backed_up_primary_timer_events)
                {
                   ALLEGRO_EVENT next_event;
                   while (al_peek_next_event(primary_event_queue, &next_event)
                        && next_event.type == ALLEGRO_EVENT_TIMER
                        && next_event.timer.source == primary_timer)
                     al_drop_next_event(primary_event_queue);
                }
             }
             break;
          default:
             break;
          }
       }

       al_destroy_bitmap(dummy_bitmap);
       al_stop_timer(primary_timer);
       al_destroy_event_queue(primary_event_queue);
       al_destroy_timer(primary_timer);

       return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - AllegroFlare::Profiler
      - Hexagon::Logo
      - ALLEGRO_FONT*
      - Hexagon::Shaders::TiledHexagonMotionEffect


  - name: draw_menu
    guards: [ font_bin ]
    body: |
      int display_width = al_get_bitmap_width(al_get_target_bitmap());
      int display_height = al_get_bitmap_height(al_get_target_bitmap());

      placement3d place(display_width/2 + 300, display_height/2, 0);
      place.start_transform();
      main_menu.render();
      place.restore_transform();
      return;
    body_dependency_symbols:
      - placement3d
      - Hexagon::Elements::ListMenu


  - name: render_profiler_graph
    parameters:
      - name: profiler
        type: AllegroFlare::Profiler*
        default_argument: nullptr
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
    guards: [ profiler, font ]
    body: |
      std::list<std::string> event_bucket_names = profiler->get_event_bucket_names();
      int line_height = 20;
      ALLEGRO_COLOR hexagon_red = al_color_html("#bc2d48");
      std::vector<std::vector<std::string>> data2d = {};
      for (auto &event_bucket_name : event_bucket_names)
      {
         int past_two_events_duration =
            profiler->get_event_bucket_duration_between_last_two_samples(event_bucket_name);
         std::string event_bucket_num_samples = std::to_string(past_two_events_duration);
         event_bucket_num_samples = std::to_string(profiler->get_event_bucket_num_samples(event_bucket_name));

         data2d.push_back(
            {
               event_bucket_name,
               event_bucket_num_samples,
               std::to_string(past_two_events_duration),
            }
         );
      }
      Hexagon::Elements::DataTable data_table(font, 300, line_height, data2d);
      data_table.render();
      return;
    body_dependency_symbols:
      - Hexagon::Elements::DataTable


  - name: build_allegro_version_string
    type: std::string
    body: |
      uint32_t version = al_get_allegro_version();
      int major = version >> 24;
      int minor = (version >> 16) & 255;
      int revision = (version >> 8) & 255;
      int release = version & 255;

      std::stringstream result;
      result << "Allegro v" << major << "-" << minor << "-" << revision << " r" << release;
      return result.str();
    body_dependency_symbols:
      - al_get_allegro_version
      - std::stringstream


  - name: append_project_path_to_config_file
    body: |
      std::string config_filename = "/Users/markoates/Repos/hexagon/bin/programs/data/config/hexagon.boot.cfg";
      std::string current_menu_selection_path_text = main_menu_get_current_list_item_identifier();

      std::ofstream outfile;
      outfile.open(config_filename, std::ios_base::app); // append instead of overwrite
      outfile << std::endl << "default_navigator_directory = " << current_menu_selection_path_text;

      return;
    body_dependency_symbols:
      - std::ofstream


dependencies:


  - symbol: std::ofstream
    headers: [ fstream ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: Hexagon::Logo
    headers: [ Hexagon/Logo.hpp ]
  - symbol: AllegroFlare::Profiler
    headers: [ AllegroFlare/Profiler.hpp ]
  - symbol: AllegroFlare::Profiler*
    headers: [ AllegroFlare/Profiler.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::Elements::DataTable
    headers: [ Hexagon/Elements/DataTable.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_get_allegro_version
    headers: [ allegro5/allegro.h ]
  - symbol: Hexagon::Elements::ListMenu
    headers: [ Hexagon/Elements/ListMenu.hpp ]
  - symbol: Hexagon::Shaders::TiledHexagonMotionEffect
    headers: [ Hexagon/Shaders/TiledHexagonMotionEffect.hpp ]

