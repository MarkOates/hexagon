parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "code_editor.get_type()"


properties:


  - name: code_editor
    type: ::CodeEditor::CodeEditor
    init_with: '::CodeEditor::CodeEditor{}'
    constructor_arg: true
    getter: true
    getter_ref: true
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true


functions:


  - name: render
    is_override: true
    parameters:
      - name: is_focused
        type: bool
        default_argument: true
      - name: display
        type: ALLEGRO_DISPLAY*
        default_argument: nullptr
      - name: font
        type: ALLEGRO_FONT*
        default_argument: nullptr
      - name: cell_width
        type: int
        default_argument: 10
      - name: cell_height
        type: int
        default_argument: 20
    body: |
      //place = this->place;

      if (code_editor.get_type() == ONE_LINE_INPUT_BOX)
      {
         ALLEGRO_COLOR outline_and_text_color = al_color_name("dodgerblue");
         float width = get_place().size.x;
         float height = get_place().size.y;
         //std::string top_left_text = "ESC: Close";
         std::string bottom_right_text = "search";
         ALLEGRO_COLOR backfill_color = al_color_name("black");

         Hexagon::OneLineInputBox::Renderer renderer(
            font,
            outline_and_text_color,
            backfill_color,
            width,
            height,
            cell_width,
            cell_height,
            code_editor.get_lines_ref(),
            code_editor.selections,
            code_editor.get_cursor_x(),
            code_editor.get_cursor_y(),
            get_place(),
            code_editor.get_first_line_number(),
            (code_editor.get_mode() == ::CodeEditor::CodeEditor::EDIT) // in_edit_mode
         );

         //renderer.set_top_left_text(top_left_text);
         renderer.set_bottom_right_text(bottom_right_text);

         renderer.render();
      }
      else if (code_editor.get_type() == GIT_COMMIT_MESSAGE_INPUT_BOX)
      {
         ALLEGRO_COLOR outline_and_text_color = al_color_name("salmon");
         float width = get_place().size.x;
         float height = get_place().size.y;
         //std::string top_left_text = "ESC: Close";
         std::string bottom_right_text = "commit and push";
         ALLEGRO_COLOR backfill_color = al_color_name("black");

         Hexagon::OneLineInputBox::Renderer renderer(
            font,
            outline_and_text_color,
            backfill_color,
            width,
            height,
            cell_width,
            cell_height,
            code_editor.get_lines_ref(),
            code_editor.selections,
            code_editor.get_cursor_x(),
            code_editor.get_cursor_y(),
            get_place(),
            code_editor.get_first_line_number(),
            (code_editor.get_mode() == ::CodeEditor::CodeEditor::EDIT) // in_edit_mode
         );

         //renderer.set_top_left_text(top_left_text);
         renderer.set_bottom_right_text(bottom_right_text);

         renderer.render();
      }
      else
      {
         bool draw_line_numbers = true;
         ALLEGRO_FONT *code_font = font;
         ALLEGRO_FONT *overlay_font = font;
         ALLEGRO_COLOR base_font_color = al_color_name("white");
         ALLEGRO_COLOR backfill_color = al_color_name("black");
         float backfill_opacity = 0.8f;

         ::CodeEditor::Renderer renderer(
            draw_line_numbers,
            is_focused,
            this,
            code_font,
            display,
            cell_width,
            cell_height,
            base_font_color,
            backfill_color,
            backfill_opacity
         );
         renderer.render();

         if (code_editor.get_draw_info_overlay())
         {
            placement3d &place = get_place();
            std::string file_category_label
               = Hexagon::CodeEditor::FileCategoryDecorator(code_editor.get_file_category()).label();
            std::string text_to_render = file_category_label;
            ALLEGRO_COLOR backfill_color = al_color_name("black");
            float backfill_opacity = 0.8f;

            place.start_transform();
            Hexagon::Elements::StageInfoOverlay stage_info_overlay(
               overlay_font,
               &backfill_color,
               backfill_opacity,
               &place
            );
            //if (!is_focused) text_to_render = this.get_filename();
            stage_info_overlay.set_text(text_to_render);
            stage_info_overlay.render();
            place.restore_transform();
         }
      }

      return;
    body_dependency_symbols:
      - al_color_name
      - Hexagon::OneLineInputBox::Renderer
      - CodeEditor::Renderer
      - Hexagon::Elements::StageInfoOverlay
      - Hexagon::CodeEditor::FileCategoryDecorator


  - name: process_local_event
    is_override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    guard: [ code_editor ]
    body: return;
      ::CodeEditor::EventController stage_event_controller(this);
      stage_event_controller.process_local_event(event_name, action_data);
      return;
    body_dependency_symbols:
      - ::CodeEditor::EventController


  - name: process_event
    is_override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    guard: [ code_editor ]
    body: |
      ::CodeEditor::EventController stage_event_controller(this);
      stage_event_controller.process_event(event);
      return;
    body_dependency_symbols:
      - ::CodeEditor::EventController


dependencies:
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: ::CodeEditor::CodeEditor
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
  - symbol: ::CodeEditor::EventController
    headers: [ Hexagon/CodeEditor/EventController.hpp ]
  - symbol: Hexagon::OneLineInputBox::Renderer
    headers: [ Hexagon/OneLineInputBox/Renderer.hpp ]
  - symbol: Hexagon::Elements::StageInfoOverlay
    headers: [ Hexagon/Elements/StageInfoOverlay.hpp ]
  - symbol: CodeEditor::Renderer
    headers: [ Hexagon/CodeEditor/Renderer.hpp ]
  - symbol: al_color_html
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: Hexagon::CodeEditor::FileCategoryDecorator
    headers: [ Hexagon/CodeEditor/FileCategoryDecorator.hpp ]

