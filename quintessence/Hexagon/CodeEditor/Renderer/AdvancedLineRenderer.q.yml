properties:
  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true
  - name: font_color
    type: ALLEGRO_COLOR*
    init_with: nullptr
    constructor_arg: true
  - name: x
    type: float
    init_with: 0.0f
    constructor_arg: true
  - name: y
    type: float
    init_with: 0.0f
    constructor_arg: true
  - name: line
    constructor_arg: true
functions:
  - name: build_tokens
    type: std::vector<std::pair<std::string, ALLEGRO_COLOR>>
    private: true
    body: |
      std::vector<std::pair<std::string, ALLEGRO_COLOR>> tokens;
      ALLEGRO_COLOR comment_color = AllegroFlare::color::color(
         AllegroFlare::color::mix(*font_color, al_color_name("dodgerblue"), 0.35f),
         0.35f);


      std::string regex = "";
      {
         //std::string comments_not_inside_quotes_regex = "([\"'])(?:\\?+.)*?\1";
         std::string basic_comment_regex = "//.*";
         //std::string attempt = "";

         regex = basic_comment_regex;
      }

      RegexMatcher regex_matcher(line, regex);

      std::vector<std::pair<int, int>> match_info = regex_matcher.get_match_info();

      if (match_info.empty())
      {
         tokens = { { line, *font_color } };
      }
      else if (match_info.size() == 1)
      {
         //throw std::runtime_error("single match");
         int string_end = match_info[0].first;
         std::string uncommented_substr = line.substr(0, string_end);
         std::string commented_substr = line.substr(string_end);
         tokens = {
            { uncommented_substr, *font_color },
            { commented_substr, comment_color },
         };
      }
      else if (match_info.size() > 1)
      {
         throw std::runtime_error("multi match");
         //ALLEGRO_COLOR error_color = al_color_name("saddlebrown");
         ALLEGRO_COLOR error_color = al_color_name("red");
         tokens = { { line, error_color } };
      }

      //tokens = { { line, *font_color } };
      return tokens;
  - name: render_tokens
    type: void
    private: true
    parameters:
      - name: tokens
        type: std::vector<std::pair<std::string, ALLEGRO_COLOR>>
        default_argument: "{}"
      - name: cell_width
        type: float
        default_argument: 1.0f
    body: |
      float x_pos = 0;
      for (auto &token : tokens)
      {
         std::string &text = std::get<0>(token);
         ALLEGRO_COLOR color = std::get<1>(token);

         al_draw_text(font, color, x + x_pos, y, ALLEGRO_ALIGN_LEFT, text.c_str());

         x_pos += (text.length() * cell_width);
      }
    body_dependency_symbols:
      - al_draw_text
      - std::get
  - name: render
    type: void
    body: |
      if (!font)
      {
         std::stringstream error_message;
         error_message << "[Hexagon/Powerbar/Renderer/AdvancedLineRenderer error:] cannot \""
                       << __FUNCTION__ << "\" with a nullptr font";
         throw std::runtime_error(error_message.str());
      }
      if (!font_color)
      {
         std::stringstream error_message;
         error_message << "[Hexagon/Powerbar/Renderer/AdvancedLineRenderer error:] cannot \""
                       << __FUNCTION__ << "\" with a nullptr font_color";
         throw std::runtime_error(error_message.str());
      }

      float cell_width = al_get_text_width(font, " ");
      std::vector<std::pair<std::string, ALLEGRO_COLOR>> tokens = build_tokens();
      render_tokens(tokens, cell_width);

      return;

    body_dependency_symbols:
      - RegexMatcher
      - al_get_text_width
      - AllegroFlare::color::color
      - std::stringstream
      - al_color_name
      - ALLEGRO_ALIGN_LEFT
      - std::vector<std::pair<std::string, ALLEGRO_COLOR>>
dependencies:
  - symbol: al_get_text_width
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::color::color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: RegexMatcher
    headers: [ Hexagon/RegexMatcher.hpp ]
  - symbol: std::get
    headers: [ utility ]
  - symbol: std::vector<std::pair<std::string, ALLEGRO_COLOR>>
    headers: [ vector, utility, string, allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_ALIGN_LEFT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR*
    headers: [ allegro5/allegro.h ]
