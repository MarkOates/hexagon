properties:

  - name: color
    type: ALLEGRO_COLOR
    init_with: 'ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f}'
    constructor_arg: true
    getter: true
  - name: x
    type: float
    init_with: 0
    constructor_arg: true
  - name: y
    type: float
    init_with: 0
    constructor_arg: true
  - name: width
    type: float
    init_with: 1
    constructor_arg: true
  - name: height
    type: float
    init_with: 1
    constructor_arg: true
  - name: mode
    type: ::CodeEditor::CodeEditor::mode_t
    init_with: ::CodeEditor::CodeEditor::EDIT
    constructor_arg: true
  - name: focus
    type: bool
    init_with: true
    constructor_arg: true

functions:

  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_primitives_addon_initialized(), al_get_target_bitmap() ]
    body: |
      float cursor_x = x;
      float _cursor_x = x;
      float _cursor_y = y;
      float _cell_width = width;
      float cell_height = height;
      ALLEGRO_COLOR cursor_color = al_color_name("chartreuse");
      float cursor_outset = 2.0;
      float cursor_thickness = 3.0;

      float x = 0;
      float y = 0;
      float x2 = 1;
      float y2 = 1;

      ALLEGRO_COLOR halo_color = cursor_color;

      //al_draw_line(x, y, x, y2, cursor_color, cursor_thickness);

      switch(mode)
      {
      case ::CodeEditor::CodeEditor::EDIT:
        {
           x = cursor_x*_cell_width - cursor_outset;
           y = _cursor_y*cell_height - cursor_outset;
           x2 = cursor_x*_cell_width + _cell_width + cursor_outset;
           y2 = _cursor_y*cell_height + cell_height;
           al_draw_rounded_rectangle(x, y, x2, y2, 2.0, 2.0, cursor_color, cursor_thickness);
        }
        break;
      case ::CodeEditor::CodeEditor::INSERT:
        {
           x = cursor_x*_cell_width;
           y = _cursor_y*cell_height;
           x2 = cursor_x*_cell_width;
           y2 = _cursor_y*cell_height + cell_height;
           al_draw_line(x, y, x2, y2, cursor_color, cursor_thickness);
        }
        break;
      default:
        throw std::runtime_error("Hexagon/CodeEditor/CursorRenderer: unsupported CodeEditor::mode_t");
        break;
      }

      if (focus)
      {
         int max_outset = 23;
         //int max_outset = 1;
         for (int outset=1; outset<max_outset; outset++)
         {
           float color_opacity = (1.0 - (float)outset / max_outset) * 0.25;
           ALLEGRO_COLOR col = color::color(halo_color, color_opacity);
           al_draw_rounded_rectangle(
             x - outset,
             y - outset,
             x2 + outset,
             y2 + outset,
             2.0, 2.0, col, cursor_thickness);
         }
      }
    body_dependency_symbols:
      - ALLEGRO_COLOR
      - al_color_name
      - al_draw_rectangle
      - ::CodeEditor::CodeEditor::EDIT
      - ::CodeEditor::CodeEditor::INSERT
      - color::color

dependencies:

  - symbol: ::CodeEditor::CodeEditor::mode_t
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
  - symbol: ::CodeEditor::CodeEditor::EDIT
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
  - symbol: ::CodeEditor::CodeEditor::INSERT
    headers: [ Hexagon/CodeEditor/CodeEditor.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: color::color
    headers: [ allegro_flare/color.h ]

