properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: page
    type: Hexagon::MultiplexMenu::MultiplexMenuPage*
    init_with: nullptr
    constructor_arg: true

  - name: is_active
    type: bool
    init_with: false
    constructor_arg: true

  - name: width
    type: int
    init_with: 320
    constructor_arg: true

  - name: height
    type: int
    init_with: 400
    constructor_arg: true

  - name: padding
    type: float
    init_with: 14.0f
    getter: true


functions:


  - name: render
    guards: [ al_is_system_installed(), al_is_font_addon_initialized(), font_bin ]
    body: |
      float menu_item_spacing_y = 66;

      render_frame();

      if (!page)
      {
         // render the "invalid" page
         ALLEGRO_FONT *font = obtain_font();
         std::string page_text = "Not a valid page";
         al_draw_text(font, ALLEGRO_COLOR{1, 0, 0, 1}, 0, 0, ALLEGRO_ALIGN_LEFT, page_text.c_str());
         return;
      }

      int i = 0;
      for (auto &menu_item : page->get_items_ref())
      {
         int x = 0;
         int y = menu_item_spacing_y*i;
         Hexagon::KeyboardCommandKey keyboard_command_key = menu_item.get_keyboard_command_key();
         std::string input_text = convert_key_input_to_string(
               keyboard_command_key.get_al_keycode(),
               keyboard_command_key.get_ctrl(),
               keyboard_command_key.get_alt(),
               keyboard_command_key.get_command(),
               keyboard_command_key.get_shift()
            );

         std::string label = menu_item.get_label();
         bool opens_menu = true;
         std::string state = "no_state";

         render_menu_item(x, y, input_text, label, opens_menu, state);

         i++;
      }

      return;


  - name: render_menu_item
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: input
        type: std::string
        default_argument: '"[no-input-defined]"'
      - name: label
        type: std::string
        default_argument: '"Unlabeled"'
      - name: opens_menu
        type: bool
        default_argument: false
      - name: state
        type: std::string
        default_argument: '"no_state"'
    body: |
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.8};
      ALLEGRO_COLOR input_backfill_color = ALLEGRO_COLOR{0.25, 0.25, 0.25, 1.0};
      float frame_opacity = 0.4f;
      ALLEGRO_COLOR frame_color = AllegroFlare::color::color(al_color_name("dodgerblue"), frame_opacity);
      float text_opacity = 0.95f;
      ALLEGRO_COLOR text_color = AllegroFlare::color::color(al_color_name("white"), text_opacity);

      ALLEGRO_FONT *font = obtain_font();
      ALLEGRO_FONT *keyboard_key_font = obtain_keyboard_key_font();
      float padding_x = 20;
      float padding_y = 12;
      float input_text_length = al_get_text_width(keyboard_key_font, input.c_str());
      float label_text_length = al_get_text_width(font, label.c_str());
      float roundness = 6.0;
      float height = al_get_font_line_height(font) + padding_y * 2;
      float width = label_text_length + input_text_length + padding_x * 3;
      float frame_thickness = 2.0;

      //if (opens_menu) label = "= " + label;

      // draw the surrounding box
      al_draw_filled_rounded_rectangle(x, y, x+width, y+height, roundness, roundness, backfill_color);

      // draw the input key
      al_draw_filled_rounded_rectangle(
         x+10,
         y+10,
         x+10+padding_x+input_text_length,
         y-10+height,
         roundness,
         roundness,
         input_backfill_color
      );
      al_draw_text(keyboard_key_font, text_color, x+padding_x, y+padding_y+5, ALLEGRO_ALIGN_LEFT, input.c_str());

      // draw the label text
      al_draw_text(font, text_color, x+padding_x + input_text_length + 20, y+padding_y, ALLEGRO_ALIGN_LEFT, label.c_str());

      // draw the border
      if (state == "activated")
      {
         frame_color = ALLEGRO_COLOR{1, 1, 1, 1};
         frame_thickness = 4.0f;
         al_draw_rounded_rectangle(
            x+frame_thickness*2,
            y+frame_thickness*2,
            x+width-frame_thickness*2,
            y+height-frame_thickness*2,
            roundness,
            roundness,
            frame_color,
            frame_thickness
         );
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::color
      - al_draw_filled_rectangle
      - al_draw_text
      - al_color_name


  - name: convert_key_input_to_string
    type: std::string
    static: true
    parameters:
      - name: al_keycode
        type: int
        default_argument: 0
      - name: ctrl
        type: bool
        default_argument: false
      - name: alt
        type: bool
        default_argument: false
      - name: command
        type: bool
        default_argument: false
      - name: shift
        type: bool
        default_argument: false
    guards: [ al_is_system_installed(), al_is_keyboard_installed() ]
    body: |
      // TODO: Review if the guards are even needed here
      std::vector<std::string> result_tokens;

      if (ctrl) result_tokens.push_back("Ctrl");
      if (alt) result_tokens.push_back("Alt");
      if (shift) result_tokens.push_back("Shift");
      if (command) result_tokens.push_back("Command");
      result_tokens.push_back(al_keycode_to_name(al_keycode));

      Blast::StringJoiner joiner(result_tokens, "+");

      return joiner.join();
    body_dependency_symbols:
      - Blast::StringJoiner
      - al_keycode_to_name


  - name: render_frame
    body: |
      Hexagon::Elements::ColorKit color_kit;
      //bool is_active = true;
      //ALLEGRO_FONT *font = obtain_list_item_font();
      //ALLEGRO_FONT *title_font = obtain_title_font();
      ALLEGRO_COLOR color = color_kit.pure_white_blue();
      //ALLEGRO_COLOR{1, 0, 0, 1};
      //ALLEGRO_COLOR off_color = ALLEGRO_COLOR{0, 0, 0, 1};
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0, 0, 0, 0.9};
      ALLEGRO_COLOR inactive_but_selected_color = al_color_html("4e2f1a"); //build_inactive_color();
      //float width = get_width();
      //float height = 300;
      //int line_height = al_get_font_line_height(font) * 1.2;
      //int line_num = 0;
      //float height = line_height * (list_items.size() + 1);
      //int title_font_line_height = al_get_font_line_height(title_font) * 1.2;
      float padding_hack = 10.0f;
      ALLEGRO_COLOR frame_color = is_active ? color : inactive_but_selected_color;

      // draw backfill
      //al_draw_filled_rectangle(-padding_hack, -padding_hack, width+padding_hack, height+padding_hack, backfill_color);

      float place_size_x = width;
      float place_size_y = height;

      // draw frame
      //if (get_active())
      {
         float outer_roundness = 16;
         float inner_roundness = 6;
         //float padding = 6;
         float padding = get_padding();
         al_draw_filled_rounded_rectangle(
            0-padding*2,
            0-padding*2,
            place_size_x+padding*2,
            place_size_y+padding*2,
            outer_roundness,
            outer_roundness,
            backfill_color);
         al_draw_rounded_rectangle(
            0-padding,
            0-padding,
            place_size_x+padding,
            place_size_y+padding,
            inner_roundness,
            inner_roundness,
            frame_color,
            5.0);

         //al_draw_rectangle(-padding_hack, -padding_hack, width+padding_hack, height+padding_hack, color, 2.0);
         //al_draw_rectangle(
         //   -padding_hack,
         //   -padding_hack,
         //   width+padding_hack,
         //   height+padding_hack,
         //   color,
         //   2.0);
      }
    body_dependency_symbols:
      - Hexagon::Elements::ColorKit


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Purista Medium.otf -38");


  - name: obtain_keyboard_key_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("consolas.ttf -30");


dependencies:


  - symbol: Hexagon::MultiplexMenu::MultiplexMenuPage*
    headers: [ Hexagon/MultiplexMenu/MultiplexMenu.hpp ]
  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]
  - symbol: al_keycode_to_name
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: Hexagon::Elements::ColorKit
    headers: [ Hexagon/Elements/ColorKit.hpp ]

  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::MultiplexMenu::MultiplexMenuPage
    headers: [ Hexagon/MultiplexMenu/MultiplexMenuPage.hpp ]

