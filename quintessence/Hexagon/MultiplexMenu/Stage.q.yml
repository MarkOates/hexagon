parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "StageInterface::MULTIPLEX_MENU"


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: stage_to_send_messages_to
    type: StageInterface*
    init_with: nullptr
    constructor_arg: true

  - name: multiplex_menu
    type: Hexagon::MultiplexMenu::MultiplexMenu
    init_with: '{}'
    constructor_arg: true
    getter_ref: true

  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true


functions:


  - name: render
    virtual: true
    override: true
    body: |
      placement3d &place = get_place();
      place.start_transform();

      Hexagon::MultiplexMenu::Renderer renderer(font_bin, &multiplex_menu);
      renderer.render();

      place.restore_transform();
      return;
    body_dependency_symbols:
      - Hexagon::MultiplexMenu::Renderer


  - name: send_message_to_stage
    private: true
    parameters:
      - name: message
        type: std::string
        default_argument: '"[message-identifier-set]"'
    guards: [ stage_to_send_messages_to ]
    body: |
      stage_to_send_messages_to->process_local_event(message);
      return;


  - name: process_local_event
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      return;


  - name: process_event
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      switch(event.type)
      {
      case ALLEGRO_EVENT_KEY_DOWN:
         break;
      case ALLEGRO_EVENT_KEY_UP:
         break;
      case ALLEGRO_EVENT_KEY_CHAR:
         int al_keycode = event.keyboard.keycode;
         bool shift = event.keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT;
         bool ctrl = event.keyboard.modifiers & ALLEGRO_KEYMOD_CTRL;
         bool command = event.keyboard.modifiers & ALLEGRO_KEYMOD_COMMAND;
         bool alt = event.keyboard.modifiers & ALLEGRO_KEYMOD_ALT;
 
         // TODO
         // right now, pressing the A key will send "delete_word_under_cursor" to the stage
         //if (event.keyboard.keycode == ALLEGRO_KEY_A) send_message_to_stage("delete_word_under_cursor");
         
         // build an object representing this current keyboard command
         Hexagon::KeyboardCommandKey this_keyboard_command;
         this_keyboard_command.set_al_keycode(al_keycode);
         this_keyboard_command.set_ctrl(ctrl);
         this_keyboard_command.set_command(command);
         this_keyboard_command.set_alt(alt);
         this_keyboard_command.set_shift(shift);
         
         Hexagon::MultiplexMenu::MenuItem* menu_item_matching_key =
            find_menu_item_by_keyboard_command_key_on_current_page(this_keyboard_command);
         
         if (menu_item_matching_key)
         {
            std::string command = menu_item_matching_key->get_value();
            std::cout << "Found key combo on current page of multiplex menu. The command is \""
                      << command << "\"" << std::endl;
            //bool value_opens_another_page = false; // TODO evaluate this command
            if (infer_menu_item_value_is_instruction_to_open_page(command))
            {
               std::string page_name_to_open = extract_menu_item_value_page_name_to_open(command);
               multiplex_menu.open_page(page_name_to_open);
            }
            else
            {
               send_message_to_stage(command);
            }
         }

         break;
      }
      return;


  - name: infer_menu_item_value_is_instruction_to_open_page
    type: bool
    private: true
    parameters:
      - name: menu_item_value
        type: std::string
        default_argument: '"[unset-menu_item_value]"'
    body: |
      std::string magic_open_page_header = "open_page";
      Blast::StringSplitter splitter(menu_item_value, ':');
      std::vector<std::string> tokens = splitter.split();
      if (tokens.size() >= 2 && tokens[0] == magic_open_page_header) return true;
      return false;
    body_dependency_symbols:
      - Blast::StringSplitter


  - name: extract_menu_item_value_page_name_to_open
    type: std::string
    private: true
    parameters:
      - name: menu_item_value
        type: std::string
        default_argument: '"[unset-menu_item_value]"'
    body: |
      std::string magic_open_page_header = "open_page";
      Blast::StringSplitter splitter(menu_item_value, ':');
      std::vector<std::string> tokens = splitter.split();
      if (tokens.size() >= 2 && tokens[0] == magic_open_page_header && !tokens[1].empty()) return tokens[1];
      return "[invalid-value-from-extract_menu_item_value_page_name_to_open]";
    body_dependency_symbols:
      - Blast::StringSplitter


  - name: open_page
    parameters:
      - name: page_name
        type: std::string
        default_argument: '"[unset-page_name]"'
    body: |
      multiplex_menu.open_page(page_name);
      return;
        

  - name: find_menu_item_by_keyboard_command_key_on_current_page
    type: Hexagon::MultiplexMenu::MenuItem*
    private: true
    parameters:
      - name: keyboard_command_key
        type: Hexagon::KeyboardCommandKey
        default_argument: '{}'
    body: |
      Hexagon::MultiplexMenu::MultiplexMenuPage *page = multiplex_menu.infer_current_page();
      if (!page) return nullptr;
      return page->find_item_by_keyboard_command_key(keyboard_command_key);
    body_dependency_symbols:
      - Hexagon::MultiplexMenu::MultiplexMenuPage


dependencies:


  - symbol: Hexagon::KeyboardCommandKey
    headers: [ Hexagon/KeyboardCommandKey.hpp ]
  - symbol: Hexagon::MultiplexMenu::MultiplexMenuPage
    headers: [ Hexagon/MultiplexMenu/MultiplexMenuPage.hpp ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: Hexagon::MultiplexMenu::MultiplexMenu
    headers: [ Hexagon/MultiplexMenu/MultiplexMenu.hpp ]
  - symbol: StageInterface*
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::MultiplexMenu::MultiplexMenu
    headers: [ Hexagon/MultiplexMenu/MultiplexMenu.hpp ]
  - symbol: Hexagon::MultiplexMenu::MenuItem*
    headers: [ Hexagon/MultiplexMenu/MenuItem.hpp ]
  - symbol: Hexagon::MultiplexMenu::Renderer
    headers: [ Hexagon/MultiplexMenu/Renderer.hpp ]
  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: KeyboardCommandMapper
    headers: [ AllegroFlare/KeyboardCommandMapper.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]


