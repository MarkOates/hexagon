parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "StageInterface::MULTIPLEX_MENU"


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true

  - name: stage
    type: StageInterface*
    init_with: nullptr
    constructor_arg: true

  - name: items
    type: std::vector<std::tuple<std::string, std::string, std::string, std::string>>
    init_with: '{}'
    constructor_arg: true

  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true


functions:


  - name: render
    virtual: true
    override: true
    body: |
      placement3d &place = get_place();
      place.start_transform();

      Hexagon::MultiplexMenu::Renderer renderer(font_bin);
      renderer.render();

      place.restore_transform();
      return;
    body_dependency_symbols:
      - Hexagon::MultiplexMenu::Renderer


  - name: send_message_to_stage
    private: true
    parameters:
      - name: message
        type: std::string
        default_argument: '"[message-identifier-set]"'
    guards: [ stage ]
    body: |
      stage->process_local_event(message);
      return;


  - name: process_local_event
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      return;


  - name: process_event
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      switch(event.type)
      {
      case ALLEGRO_EVENT_KEY_DOWN:
         break;
      case ALLEGRO_EVENT_KEY_UP:
         break;
      case ALLEGRO_EVENT_KEY_CHAR:
         bool shift = event.keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT;
         bool ctrl = event.keyboard.modifiers & ALLEGRO_KEYMOD_CTRL;
         bool command = event.keyboard.modifiers & ALLEGRO_KEYMOD_COMMAND;
         bool alt = event.keyboard.modifiers & ALLEGRO_KEYMOD_ALT;
 
         // TODO
         // right now, pressing the A key will send "delete_word_under_cursor" to the stage
         if (event.keyboard.keycode == ALLEGRO_KEY_A) send_message_to_stage("delete_word_under_cursor");

         break;
      }
      return;


dependencies:


  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: std::vector<std::tuple<std::string, std::string, std::string, std::string>>
    headers: [ vector, tuple, string ]
  - symbol: StageInterface*
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::MultiplexMenu::MultiplexMenu
    headers: [ Hexagon/MultiplexMenu/MultiplexMenu.hpp ]
  - symbol: Hexagon::MultiplexMenu::Renderer
    headers: [ Hexagon/MultiplexMenu/Renderer.hpp ]
  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]

