properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true


functions:


  - name: render
    type: void
    guards: [ al_is_system_installed(), al_is_font_addon_initialized() ]
    body: |
      float spacing_y = 80;

      //std::map<std::tuple<int, bool, bool, bool, bool>, std::vector<std::string>> mapping;
      std::vector<std::tuple<int, bool, bool, bool, bool>>;
      //std key;
      
      render_menu_item();
      return;


  - name: convert_key_input_to_string
    type: std::string
    static: true
    parameters:
      - name: al_keycode
        type: int
        default_argument: 0
      - name: ctrl
        type: bool
        default_argument: false
      - name: alt
        type: bool
        default_argument: false
      - name: command
        type: bool
        default_argument: false
      - name: shift
        type: bool
        default_argument: false
    guards: [ al_is_system_installed(), al_is_keyboard_installed() ]
    body: |
      std::vector<std::string> result_tokens;

      if (shift) result_tokens.push_back("Shift");
      if (ctrl) result_tokens.push_back("Ctrl");
      if (alt) result_tokens.push_back("Alt");
      if (command) result_tokens.push_back("Command");
      result_tokens.push_back(al_keycode_to_name(al_keycode));

      Blast::StringJoiner joiner(result_tokens, "+");

      return joiner.join();
    body_dependency_symbols:
      - Blast::StringJoiner
      - al_keycode_to_name


  - name: render_menu_item
    private: true
    parameters:
      - name: x
        type: float
        default_argument: 0
      - name: y
        type: float
        default_argument: 0
      - name: input
        type: std::string
        default_argument: '"^H"'
      - name: label
        type: std::string
        default_argument: '"Unlabeled"'
      - name: opens_menu
        type: bool
        default_argument: false
    body: |
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0.0, 0.0, 0.0, 0.8};
      float frame_opacity = 0.4f;
      ALLEGRO_COLOR frame_color = AllegroFlare::color::color(al_color_name("dodgerblue"), frame_opacity);
      float text_opacity = 0.6f;
      ALLEGRO_COLOR text_color = AllegroFlare::color::color(al_color_name("white"), text_opacity);
      ALLEGRO_FONT *font = obtain_font();
      float padding_x = 20;
      float padding_y = 12;
      float input_text_length = al_get_text_width(font, input.c_str());
      float label_text_length = al_get_text_width(font, label.c_str());
      float roundness = 6.0;
      float height = al_get_font_line_height(font) + padding_y * 2;
      float width = label_text_length + input_text_length + padding_x * 4;
      float frame_thickness = 2.0;

      if (opens_menu) label = "= " + label;

      al_draw_filled_rounded_rectangle(x, y, width, height, roundness, roundness, backfill_color);
      al_draw_text(font, text_color, x+padding_x, y+padding_y, ALLEGRO_ALIGN_LEFT, input.c_str());
      al_draw_text(font, text_color, x+padding_x + input_text_length + 20, y+padding_y, ALLEGRO_ALIGN_LEFT, label.c_str());
      al_draw_rounded_rectangle(
         x+frame_thickness*2,
         y+frame_thickness*2,
         width-frame_thickness*2,
         height-frame_thickness*2,
         roundness,
         roundness,
         frame_color,
         frame_thickness
      );

      return;
    body_dependency_symbols:
      - AllegroFlare::color
      - al_draw_filled_rectangle
      - al_draw_text
      - al_color_name


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Purista Medium.otf -38");


dependencies:


  - symbol: Blast::StringJoiner
    headers: [ Blast/StringJoiner.hpp ]
  - symbol: al_keycode_to_name
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]

