properties:


  - name: TYPE
    type: char*
    static: true
    init_with: '"Base"'
    constexpr: true

  - name: type
    type: std::string
    init_with: TYPE
    constructor_arg: true
    getter: true

  - name: build_stages
    type: std::vector<Hexagon::BuildSystem::BuildStages::Base*>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: started_at
    type: std::chrono::system_clock::time_point
    init_with: ''
    getter: true
    setter: true

  - name: ended_at
    type: std::chrono::system_clock::time_point
    init_with: ''
    getter: true
    setter: true

  - name: status
    type: std::string
    init_with: STATUS_WAITING_TO_START
    getter: true
    setter: true

  - name: STATUS_WAITING_TO_START
    type: char*
    static: true
    init_with: '"waiting_to_started"'
    constexpr: true

  - name: STATUS_RUNNING
    type: char*
    static: true
    init_with: '"running"'
    constexpr: true

  - name: STATUS_FINISHED
    type: char*
    static: true
    init_with: '"finished"'
    constexpr: true

  - name: STATUS_ERROR
    type: char*
    static: true
    init_with: '"error"'
    constexpr: true


functions:


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


  - name: run
    body: |
      started_at = std::chrono::system_clock::now();

      // set all the statuses to STATUS_NOT_STARTED
      for (auto &build_stage : build_stages)
      {
         build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_WAITING_TO_START);
      }

      // run the stages one-by-one, or halt when one fails
      for (auto &build_stage : build_stages)
      {
         build_stage->set_started_at(std::chrono::system_clock::now());
         build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_RUNNING);
         try
         {
            bool executed_without_failure = build_stage->execute();
            if (executed_without_failure)
            {
               build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_SUCCEEDED);
            }
            else
            {
               build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_FAILED);
               status = STATUS_ERROR;
            }
         }
         catch (const std::exception& e)
         {
            std::cout << "There was an error during the execution of build stage." << std::endl;
            build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_ERROR);
            status = STATUS_ERROR;
         }
         build_stage->set_ended_at(std::chrono::system_clock::now());

         if (status == STATUS_ERROR)
         {
            ended_at = std::chrono::system_clock::now();
            return;
         }
      }

      // set the status to STATUS_FINISHED when all the stages are completed (without error)
      status = STATUS_FINISHED;
      ended_at = std::chrono::system_clock::now();
      return;
    body_dependency_symbols:
      - std::cout


  - name: build_stage_executor
    static: true
    parameters:
      - name: build_stage
        type: Hexagon::BuildSystem::BuildStages::Base*
        default_argument: nullptr
    body: |
      build_stage->set_started_at(std::chrono::system_clock::now());
      build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_RUNNING);
      try
      {
         bool executed_without_failure = build_stage->execute();
         if (executed_without_failure)
         {
            build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_SUCCEEDED);
         }
         else
         {
            build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_FAILED);
         }
      }
      catch (const std::exception& e)
      {
         std::cout << "There was an error during the execution of build stage." << std::endl;
         build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_ERROR);
      }
      build_stage->set_ended_at(std::chrono::system_clock::now());
      return;


  - name: run_all_in_parallel
    body: |
      started_at = std::chrono::system_clock::now();

      // set statuses of all stages to WAITING_TO_START

      // TODO: work out a nice way for the build_stages to be validated and distributed across threads
      // Right now, this funtion is hard-coded to build exactly 3 build stages in parallel.
      std::thread thread1(build_stage_executor, build_stages[0]);
      std::thread thread2(build_stage_executor, build_stages[1]);
      std::thread thread3(build_stage_executor, build_stages[2]);

      thread1.join();
      thread2.join();
      thread3.join();

      //TODO: check for error status

      status = STATUS_FINISHED;
      ended_at = std::chrono::system_clock::now();
      return;
    body_dependency_symbols:
      - std::thread


  - name: infer_duration_seconds
    type: double
    body: |
      std::chrono::duration<double> elapsed_seconds = ended_at - started_at;
      return elapsed_seconds.count();


dependencies:


  - symbol: std::thread
    headers: [ thread ]
  - symbol: std::chrono::system_clock::time_point
    headers: [ chrono ]
  - symbol: Hexagon::BuildSystem::BuildStages::Base
    headers: [ Hexagon/BuildSystem/BuildStages/Base.hpp ]


