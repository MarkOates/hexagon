properties:


  - name: TYPE
    type: char*
    static: true
    init_with: '"Base"'
    constexpr: true

  - name: type
    type: std::string
    init_with: TYPE
    constructor_arg: true
    getter: true

  - name: build_stages
    type: std::vector<Hexagon::BuildSystem::BuildStages::Base*>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: started_at
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: ended_at
    type: float
    init_with: 0
    getter: true
    setter: true

  - name: status
    type: std::string
    init_with: STATUS_NOT_STARTED
    getter: true
    setter: true

  - name: STATUS_NOT_STARTED
    type: char*
    static: true
    init_with: '"not_started"'
    constexpr: true

  - name: STATUS_RUNNING
    type: char*
    static: true
    init_with: '"running"'
    constexpr: true

  - name: STATUS_FINISHED
    type: char*
    static: true
    init_with: '"finished"'
    constexpr: true

  - name: STATUS_ERROR
    type: char*
    static: true
    init_with: '"error"'
    constexpr: true


functions:


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


  - name: run
    body: |
      // set all the statuses to STATUS_NOT_STARTED
      for (auto &build_stage : build_stages)
      {
         build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_NOT_STARTED);
      }

      // run the stages one-by-one, or halt when one fails
      for (auto &build_stage : build_stages)
      {
         build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_RUNNING);
         try
         {
            build_stage->execute();
            build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_FINISHED);
         }
         catch (const std::exception& e)
         {
            std::cout << "There was an error during the execution of build stage." << std::endl;
            build_stage->set_status(Hexagon::BuildSystem::BuildStages::Base::STATUS_ERROR);

            status = STATUS_ERROR;
            return;
         }
      }

      // set the status to STATUS_FINISHED when all the stages are completed (without error)
      status = STATUS_FINISHED;
      return;
    body_dependency_symbols:
      - std::cout



dependencies:


  - symbol: std::vector<std::vector<std::string>>
    headers: [ vector, string ]
  - symbol: std::vector<Hexagon::BuildSystem::BuildStages::Base*>
    headers: [ vector, Hexagon/BuildSystem/BuildStages/Base.hpp ]
  - symbol: char*
    headers: [ ]

  - symbol: Hexagon::BuildSystem::BuildStages::Base
    headers: [ Hexagon/BuildSystem/BuildStages/Base.hpp ]

