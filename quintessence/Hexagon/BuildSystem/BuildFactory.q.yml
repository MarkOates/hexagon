properties:


  - name: build_stage_factory
    type: Hexagon::BuildSystem::BuildStageFactory
    init_with: '{}'


functions:


  - name: create_placeholder_build
    type: Hexagon::BuildSystem::Builds::Base*
    body: |
      Hexagon::BuildSystem::Builds::Base *build = new Hexagon::BuildSystem::Builds::Base;
      build->set_build_stages({
         build_stage_factory.create_shell_command_build_stage(),
         build_stage_factory.create_shell_command_build_stage("echo \"Having a good day?\""),
      });
      return build;
    body_dependency_symbols:
      - Hexagon::BuildSystem::BuildStageFactory


  - name: create_make_quintessence_build
    type: Hexagon::BuildSystem::Builds::Base*
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '"/Users/markoates/Repos/TestProjectDeleteMe"'
    body: |
      std::stringstream build_stage_shell_command;
      build_stage_shell_command << "(cd " << project_directory << " && make quintessence)";

      Hexagon::BuildSystem::Builds::Base *build = new Hexagon::BuildSystem::Builds::Base;
      build->set_build_stages({
         build_stage_factory.create_shell_command_build_stage(build_stage_shell_command.str()),
      });
      return build;
    body_dependency_symbols:
      - std::stringstream
      - Hexagon::BuildSystem::BuildStageFactory


dependencies:


  - symbol: Hexagon::BuildSystem::Builds::Base*
    headers: [ Hexagon/BuildSystem/Builds/Base.hpp ]
  - symbol: Hexagon::BuildSystem::BuildStageFactory
    headers: [ Hexagon/BuildSystem/BuildStageFactory.hpp ]

  - symbol: Hexagon::BuildSystem::Builds::Base
    headers: [ Hexagon/BuildSystem/Builds/Base.hpp ]

