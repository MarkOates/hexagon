properties:


  - name: TYPE
    type: char*
    static: true
    init_with: '"Base"'
    constexpr: true

  - name: type
    type: std::string
    init_with: TYPE
    constructor_arg: true
    getter: true

  - name: build
    type: Hexagon::BuildSystem::Builds::Base*
    init_with: nullptr
    getter: true
    setter: true


functions:


  - name: is_type
    type: bool
    parameters:
      - name: possible_type
        type: std::string
        default_argument: '""'
    body: |
      return (possible_type == get_type());


  - name: render_text
    type: std::string
    virtual: true
    guards: [ build ]
    body: |
      std::stringstream result;

      unsigned i=0;
      result << "[========= BUILD =========]" << std::endl;
      result << std::endl;
      for (auto &build_stage : build->get_build_stages())
      {
         Hexagon::BuildSystem::BuildStageRenderer build_stage_renderer;
         build_stage_renderer.set_build_stage(build_stage);
         std::string build_stage_render = build_stage_renderer.build_text_report();

         i++;
         result << "[#=------ STAGE " << i << " ------=#]" << std::endl;
         result << "  - Type: " << build_stage->get_type() << std::endl;
         result << "  - Status: " << build_stage->get_status() << std::endl;
         if (!build_stage_render.empty()) result << build_stage_render;
         result << std::endl;
      }
      result << "[=========================]" << std::endl;

      return result.str();
    body_dependency_symbols:
      - std::stringstream
      - Hexagon::BuildSystem::BuildStageRenderer


dependencies:


  - symbol: Hexagon::BuildSystem::Builds::Base*
    headers: [ Hexagon/BuildSystem/Builds/Base.hpp ]
  - symbol: Hexagon::BuildSystem::BuildStageRenderer
    headers: [ Hexagon/BuildSystem/BuildStageRenderer.hpp ]
  - symbol: std::vector<std::vector<std::string>>
    headers: [ vector, string ]
  - symbol: char*
    headers: [ ]

  - symbol: Hexagon::BuildSystem::Builds::Base
    headers: [ Hexagon/BuildSystem/Builds/Base.hpp ]

