properties:


  - name: initialized
    type: bool
    init_with: false
  - name: dummy_font_bin
    type: AllegroFlare::FontBin
    static: true
    init_with: "{}"
  - name: screen_sub_bitmap
    type: ALLEGRO_BITMAP*
    init_with: "nullptr"
    setter: true
  - name: notifications
    type: std::vector<std::string>
    init_with: "{}"
    getter: true
    setter: true
  - name: notifications2
    type: std::vector<std::string>
    init_with: "{}"
    getter: true
    setter: true
  - name: powerbar
    type: Hexagon::Powerbar::Powerbar
    init_with: "{}"
    getter_ref: true
  - name: focus_timer_bar
    type: Hexagon::FocusTimerBar::FocusTimerBar
    init_with: '{}'
    getter_ref: true
  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: "nullptr"
    constructor_arg: true
  - name: fonts
    type: AllegroFlare::FontBin&
    init_with: "get_dummy_font_bin()"
    constructor_arg: true
  - name: title_text
    type: std::string
    init_with: "\"\""
    setter: true
    getter: true
    constructor_arg: true
  - name: backfill_color
    type: ALLEGRO_COLOR
    init_with: "{0.0f, 0.0f, 0.0f, 0.0f}"
    constructor_arg: true
    setter: true
  - name: show_disabled_screen
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true
  - name: draw_powerbar
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true
  - name: files_are_committed
    type: bool
    init_with: false
    constructor_arg: true
    setter: true
  - name: commits_are_in_sync_with_remote
    type: bool
    init_with: false
    constructor_arg: true
    setter: true
  - name: show_profiler
    type: bool
    init_with: false
    setter: true
    constructor_arg: true
    getter: true
  - name: draw_save_count
    type: bool
    init_with: true
    setter: true
    getter: true
    constructor_arg: true
  - name: save_count
    type: int
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true
  - name: draw_packets
    type: bool
    init_with: true
    setter: true
    getter: true
    constructor_arg: true
  - name: packets
    type: std::vector<Hexagon::Packet>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true
  - name: draw_search_count
    type: bool
    init_with: true
    setter: true
    getter: true
    constructor_arg: true
  - name: search_count
    type: int
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true
  - name: draw_focus_timer_bar
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true
  - name: draw_notifications
    type: bool
    init_with: true
    setter: true
    getter: true
    constructor_arg: true
  - name: left_column_x
    type: float
    init_with: 60
    getter: true
    setter: true
    constructor_arg: true
  - name: stages
    type: std::vector<StageInterface *>*
    init_with: nullptr
    setter: true
  - name: global_font_str
    type: std::string
    init_with: '"unset-global_font_str"'
    setter: true


functions:


  - name: get_dummy_font_bin
    type: AllegroFlare::FontBin&
    static: true
    body: |
      return dummy_font_bin;


  - name: obtain_text_font
    type: ALLEGRO_FONT*
    body: |
      return fonts["Eurostile.ttf -27"];
      //return fonts["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_title_font
    type: ALLEGRO_FONT*
    body: |
      return fonts["Purista Medium.otf -32"];
      //return fonts["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_powerbar_text_font
    type: ALLEGRO_FONT*
    body: |
      return fonts["Purista Medium.otf -18"];
      //return fonts["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_score_text_font
    type: ALLEGRO_FONT*
    body: |
      return fonts["Purista Medium.otf -22"];
      //return fonts["Eurostile.ttf -22"];
      //return fonts["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_global_font
    type: ALLEGRO_FONT*
    body: |
      return fonts[global_font_str];
      //return fonts["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_packet_text_font
    type: ALLEGRO_FONT*
    body: |
      return fonts["Exan-Regular.ttf -14"];


  - name: obtain_component_navigator_font
    type: ALLEGRO_FONT*
    body: |
      return fonts["Purista Medium.otf -22"];
      //return fonts["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: initialize
    type: void
    body: |
      if (initialized) return;
      if (!display)
      {
         throw std::runtime_error("[Hud::initialize()] Cannot initialize Hud with a nullptr screen_sub_bitmap");
      }

      ALLEGRO_BITMAP *backbuffer = al_get_backbuffer(display);
      ALLEGRO_BITMAP *hud_screen_sub_bitmap = al_create_sub_bitmap(
         backbuffer,
         0,
         0,
         al_get_bitmap_width(backbuffer),
         al_get_bitmap_height(backbuffer)
         );
      set_screen_sub_bitmap(hud_screen_sub_bitmap);

      initialized = true;
      return;


  - name: reinitialize
    type: void
    guards: [ initialized, display, screen_sub_bitmap ]
    body: |
      ALLEGRO_BITMAP *backbuffer = al_get_backbuffer(display);
      al_destroy_bitmap(screen_sub_bitmap);
      ALLEGRO_BITMAP *hud_screen_sub_bitmap = al_create_sub_bitmap(backbuffer,
                                                                  0,
                                                                  0,
                                                                  al_get_bitmap_width(backbuffer),
                                                                  al_get_bitmap_height(backbuffer));
      set_screen_sub_bitmap(hud_screen_sub_bitmap);

      initialized = true;
      return;


  - name: draw_current_title_text
    type: void
    private: true
    body: |
      ALLEGRO_COLOR epic_green_color = al_color_html("99ddc4");
      ALLEGRO_COLOR color = AllegroFlare::color::mix(epic_green_color, al_color_name("dodgerblue"), 0.5);
      float display_center_x = al_get_display_width(display) / 2;
      int y_position = 20;

      al_draw_text(obtain_title_font(),
                   color,
                   display_center_x,
                   y_position + 18,
                   ALLEGRO_ALIGN_CENTER,
                   title_text.c_str());
      return;
    body_dependency_symbols:
      - al_draw_rectangle
      - al_get_display_width
      - AllegroFlare::color::mix


  - name: draw_profile_timer_graph
    type: void
    body: |
      global::profiler.draw(10, 10, obtain_text_font());
      return;
    body_dependency_symbols:
      - global::profiler


  - name: draw
    type: void
    guards: [ initialized ]
    body: |
      int y_cursor = 0;
      int frame_width = al_get_bitmap_width(screen_sub_bitmap);
      int frame_height = al_get_bitmap_height(screen_sub_bitmap);

      ALLEGRO_STATE previous_target_bitmap_state;
      al_store_state(&previous_target_bitmap_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(screen_sub_bitmap);

      //ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_FONT *component_navigator_font = obtain_component_navigator_font();

      bool draw_stages = true;
      if (draw_stages && stages)
      {
         for (auto &stage : (*stages))
         {
            if (!stage->get_render_on_hud()) continue;

            // another for now...
            if (stage->get_type() == StageInterface::COMPONENT_NAVIGATOR)
            {
               Hexagon::AdvancedComponentNavigator::Stage *advanced_component_navigator_stage =
                  static_cast<Hexagon::AdvancedComponentNavigator::Stage *>(stage);
               advanced_component_navigator_stage->set_is_focused(true);
               //advanced_component_navigator_stage->set_display(display);
               advanced_component_navigator_stage->set_font(component_navigator_font);
               //advanced_component_navigator_stage->set_cell_width(cell_width);
               //advanced_component_navigator_stage->set_cell_height(cell_height);
            }
            else
            {
               std::stringstream error_message;
               error_message << "Hexagon/Hud::draw: error: Cannot render a stage marked as render_on_hud "
                             << "that is of type \"" << stage->get_type() << "\"";
               throw std::runtime_error(error_message.str());
            };

            stage->render();
         }
      }

      draw_current_title_text();

      if (show_profiler) draw_profile_timer_graph();

      if (draw_notifications)
      {
         ALLEGRO_COLOR color = al_color_name("red");
         float notification_bottom_padding = al_get_font_line_height(obtain_text_font());
         float font_line_height = al_get_font_line_height(obtain_text_font());
         y_cursor=0;
         for (auto &notification : notifications)
         {
            float y_position = y_cursor * notification_bottom_padding;
            al_draw_text(obtain_text_font(), color, 0, y_position, 0, notification.c_str());
            y_cursor++;
         }

         y_cursor=0;
         for (auto &notification2 : notifications2)
         {
            float y_position = (y_cursor+1) * font_line_height;
            al_draw_text(obtain_text_font(),
                         color,
                         frame_width,
                         frame_height-y_position,
                         ALLEGRO_ALIGN_RIGHT,
                         notification2.c_str());
            y_cursor++;
         }
      }

      /*
      if (draw_save_count)
      {
         // bottom left of screen
         std::string save_count_text_to_draw = std::string("Saves: ") + std::to_string(save_count);
         ALLEGRO_FONT *score_text_font = obtain_score_text_font();
         al_draw_text(
            score_text_font,
            al_color_name("gray"),
            left_column_x,
            frame_height - al_get_font_line_height(score_text_font) - 60,
            ALLEGRO_ALIGN_LEFT,
            save_count_text_to_draw.c_str()
         );
      }

      if (draw_search_count)
      {
         // bottom left of screen
         std::string search_count_text_to_draw = std::string("Searches: ") + std::to_string(search_count);
         ALLEGRO_FONT *score_text_font = obtain_score_text_font();
         al_draw_text(
            score_text_font,
            al_color_name("gray"),
            left_column_x,
            frame_height - al_get_font_line_height(score_text_font) - 60 - 28,
            ALLEGRO_ALIGN_LEFT,
            search_count_text_to_draw.c_str()
         );
      }
      */

      if (draw_packets)
      {
         float x = left_column_x;
         float y = frame_height - 130;
         float width = 140;
         float height = 100;
         float spacing = 20;

         float y_increment = -(height + spacing);

         placement3d place(x, y, 0.0);
         place.size.x = width;
         place.size.y = height;
         place.align.x = 0.0;
         place.align.y = 1.0;
         ALLEGRO_FONT *packet_text_font = obtain_packet_text_font();

         bool draw_packet_in_progress = true;
         if (draw_packet_in_progress)
         {
            ALLEGRO_FONT *packet_text_font = obtain_packet_text_font();
            Hexagon::Packet packet_in_progress(search_count, save_count);
            float x = left_column_x;
            float y = frame_height - 130;
            placement3d place(x, y, 0.0);

            Hexagon::PacketRenderer packet_renderer(&packet_in_progress, packet_text_font, place.size.x, place.size.y);
            packet_renderer.render();
         }

         for (int i = (packets.size()-1); i>=0; i--)
         {
            auto &packet = packets[i];
            place.start_transform();

            Hexagon::PacketRenderer packet_renderer(&packet, packet_text_font, place.size.x, place.size.y);
            packet_renderer.render();

            place.restore_transform();

            place.position.y += y_increment;
         }
      }

      if (draw_powerbar)
      {
         powerbar.set_files_are_committed(files_are_committed);
         powerbar.set_commits_are_in_sync_with_remote(commits_are_in_sync_with_remote);
         // these values are set externally in System/System via actions
         //powerbar.set_files_are_modified(files_are_modified);
         //powerbar.set_files_are_staged(files_are_staged);
         //powerbar.set_files_are_untracked(files_are_untracked);

         Hexagon::Powerbar::Renderer powerbar_renderer(display, &powerbar, obtain_powerbar_text_font(), backfill_color);
         powerbar_renderer.render();
      }

      if (draw_focus_timer_bar)
      {
         Hexagon::FocusTimerBar::Renderer focus_timer_bar_renderer(display, &focus_timer_bar);
         focus_timer_bar_renderer.render();
      }

      if (show_disabled_screen)
      {
         al_draw_line(0,
                      0,
                      al_get_display_width(display),
                      al_get_display_height(display),
                      al_color_name("red"),
                      3.0);
      }

      al_restore_state(&previous_target_bitmap_state);
      return;
    body_dependency_symbols:
      - placement3d
      - al_get_font_ascent
      - ALLEGRO_COLOR
      - al_color_name
      - al_draw_text
      - Hexagon::Powerbar::Powerbar
      - Hexagon::Powerbar::Renderer
      - Hexagon::FocusTimerBar::Renderer
      - Hexagon::PacketRenderer
      - Hexagon::AdvancedComponentNavigator::Stage*


dependencies:


  - symbol: Hexagon::Powerbar::Powerbar
    headers: [ Hexagon/Powerbar/Powerbar.hpp ]
  - symbol: Hexagon::Powerbar::Renderer
    headers: [ Hexagon/Powerbar/Renderer.hpp ]
  - symbol: Hexagon::FocusTimerBar::FocusTimerBar
    headers: [ Hexagon/FocusTimerBar/FocusTimerBar.hpp ]
  - symbol: Hexagon::FocusTimerBar::Renderer
    headers: [ Hexagon/FocusTimerBar/Renderer.hpp ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_display_width
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_get_font_ascent
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::color::mix
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::FontBin&
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: global::profiler
    headers: [ Hexagon/shared_globals.hpp ]
  - symbol: std::vector<Hexagon::Packet>
    headers: [ vector, Hexagon/Packet.hpp ]
  - symbol: Hexagon::PacketRenderer
    headers: [ Hexagon/PacketRenderer.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: std::vector<StageInterface *>*
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::AdvancedComponentNavigator::Stage*
    headers: [ Hexagon/AdvancedComponentNavigator/Stage.hpp ]
  - symbol: Hexagon::System::Config*
    headers: [ Hexagon/System/Config.hpp ]

