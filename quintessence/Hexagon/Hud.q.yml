properties:


  - name: initialized
    type: bool
    init_with: false

  - name: dummy_font_bin
    type: AllegroFlare::FontBin
    static: true
    init_with: '{}'

  - name: screen_sub_bitmap
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    setter: true

  - name: notifications
    type: std::vector<std::string>
    init_with: '{}'
    getter: true
    setter: true

  - name: notifications2
    type: std::vector<std::string>
    init_with: "{}"
    getter: true
    setter: true

  - name: powerbar
    type: Hexagon::Powerbar::Powerbar
    init_with: "{}"
    getter_ref: true

  - name: focus_timer_bar
    type: Hexagon::FocusTimerBar::FocusTimerBar
    init_with: '{}'
    getter_ref: true

  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: "nullptr"
    constructor_arg: true

  - name: font_bin
    type: AllegroFlare::FontBin&
    init_with: "get_dummy_font_bin()"
    constructor_arg: true

  - name: title_text
    type: std::string
    init_with: '""'
    setter: true
    getter: true
    constructor_arg: true

  - name: backfill_color
    type: ALLEGRO_COLOR
    init_with: "{0.0f, 0.0f, 0.0f, 0.0f}"
    constructor_arg: true
    setter: true

  - name: show_disabled_screen
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true

  - name: show_powerbar
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true

  - name: files_are_committed
    type: bool
    init_with: false
    constructor_arg: true
    setter: true

  - name: commits_are_in_sync_with_remote
    type: bool
    init_with: false
    constructor_arg: true
    setter: true

  - name: show_profiler
    type: bool
    init_with: false
    setter: true
    constructor_arg: true
    getter: true

  - name: show_save_count
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true

  - name: save_count
    type: int
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: show_packets
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true

  - name: packets
    type: std::vector<Hexagon::Packet>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true

  - name: show_search_count
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true

  - name: search_count
    type: int
    init_with: 0
    constructor_arg: true
    getter: true
    setter: true

  - name: show_focus_timer_bar
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true

  - name: show_build_sequence_meter
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true

  - name: show_notifications
    type: bool
    init_with: true
    setter: true
    getter: true
    constructor_arg: true

  - name: left_column_x
    type: float
    init_with: 30
    getter: true
    setter: true
    constructor_arg: true

  - name: surface_projection_width
    type: float
    init_with: 1920
    getter: true
    setter: true

  - name: surface_projection_height
    type: float
    init_with: 1080
    getter: true
    setter: true

  - name: stages
    type: std::vector<StageInterface *>*
    init_with: nullptr
    setter: true

  - name: global_font_str
    type: std::string
    init_with: '"unset-global_font_str"'
    setter: true

  - name: current_component_is_symlinked_thus_has_different_title_color
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: show_caps_lock_notification_light
    type: bool
    init_with: false
    getter: true
    setter: true

  - name: base_text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}
    constructor_arg: true
    getter: true
    setter: true

  - name: base_text_opacity
    type: float
    init_with: 0.5f
    constructor_arg: true
    getter: true
    setter: true

  - name: objective_text
    type: std::string
    init_with: '""'
    setter: true
    getter: true
    constructor_arg: true

  - name: show_objective
    type: bool
    init_with: true
    setter: true
    getter: true
    constructor_arg: true

  - name: domain_text
    type: std::string
    init_with: '""'
    setter: true
    getter: true
    constructor_arg: true

  - name: show_domain
    type: bool
    init_with: true
    setter: true
    getter: true
    constructor_arg: true


functions:


  - name: initialize
    type: void
    body: |
      if (initialized) return;
      if (!display)
      {
         throw std::runtime_error("[Hud::initialize()] Cannot initialize Hud with a nullptr screen_sub_bitmap");
      }

      ALLEGRO_BITMAP *backbuffer = al_get_backbuffer(display);
      ALLEGRO_BITMAP *hud_screen_sub_bitmap = al_create_sub_bitmap(
         backbuffer,
         0,
         0,
         al_get_bitmap_width(backbuffer),
         al_get_bitmap_height(backbuffer)
         );
      set_screen_sub_bitmap(hud_screen_sub_bitmap);

      //float hwidth = 1920/2;
      //float hheight = 1080/2;
      //set_orthographic_projection(hud_screen_sub_bitmap, -hwidth, -hheight, hwidth, hheight);
      set_orthographic_projection(
         hud_screen_sub_bitmap,
         0,
         0,
         get_surface_projection_width(),
         get_surface_projection_height()
      );

      initialized = true;
      return;


  - name: reinitialize
    type: void
    guards: [ initialized, display, screen_sub_bitmap ]
    body: |
      ALLEGRO_BITMAP *backbuffer = al_get_backbuffer(display);
      al_destroy_bitmap(screen_sub_bitmap);
      ALLEGRO_BITMAP *hud_screen_sub_bitmap = al_create_sub_bitmap(backbuffer,
                                                                  0,
                                                                  0,
                                                                  al_get_bitmap_width(backbuffer),
                                                                  al_get_bitmap_height(backbuffer));
      set_screen_sub_bitmap(hud_screen_sub_bitmap);

      initialized = true;
      return;


  - name: draw_current_title_text
    type: void
    private: true
    body: |
      std::string title_text_filtered_with_domain_removed = title_text;
      if (title_text.find(domain_text) == 0) title_text_filtered_with_domain_removed = title_text.substr(domain_text.size());

      std::string &text = title_text_filtered_with_domain_removed;

      if (text.empty()) return;

      ALLEGRO_COLOR epic_green_color = al_color_html("99ddc4");
      ALLEGRO_COLOR color = AllegroFlare::color::mix(epic_green_color, al_color_name("dodgerblue"), 0.5);
      if (get_current_component_is_symlinked_thus_has_different_title_color())
      {
         ALLEGRO_COLOR is_symlink_mix_color = al_color_name("orange");
         color = AllegroFlare::color::mix(color, is_symlink_mix_color, 0.5);
      }
      float display_center_x = get_surface_projection_width() / 2;
      ALLEGRO_FONT *title_font = obtain_title_font();
      float title_font_line_height = al_get_font_line_height(title_font);
      float text_width = al_get_text_width(title_font, text.c_str());
      int y_position = 52 - title_font_line_height/2;

      al_draw_filled_rectangle(display_center_x - text_width/2 - 20,
         y_position - title_font_line_height/2 - 10,
         display_center_x + text_width/2 + 20,
         y_position + title_font_line_height/2 + 10,
         AllegroFlare::color::color(backfill_color, 0.9)
         //ALLEGRO_COLOR{0, 0, 0, 0.9}
      );

      al_draw_text(title_font,
                   color,
                   display_center_x,
                   y_position - title_font_line_height/2,
                   ALLEGRO_ALIGN_CENTER,
                   text.c_str());
      return;
    body_dependency_symbols:
      - al_draw_rectangle
      - AllegroFlare::color::mix


  - name: draw_profile_timer_graph
    type: void
    body: |
      global::profiler.draw(10, 10, obtain_text_font());
      return;
    body_dependency_symbols:
      - global::profiler


  - name: draw_objective_text
    type: void
    body: |
      Hexagon::Elements::ColorKit color_kit(backfill_color, base_text_color);
      float opacity = base_text_opacity;
      ALLEGRO_FONT *objective_text_font = obtain_objective_font();
      float x = surface_projection_width / 32 * 1;
      float y = 30;
      al_draw_text(objective_text_font,
                   color_kit.get_base_text_color(base_text_opacity),
                   x,
                   y,
                   ALLEGRO_ALIGN_LEFT,
                   objective_text.c_str());
      return;
    body_dependency_symbols:
      - Hexagon::Elements::ColorKit


  - name: draw_domain_text_and_overlay
    type: void
    body: |
      Hexagon::Elements::ColorKit color_kit(backfill_color, base_text_color);
      float opacity = base_text_opacity;
      ALLEGRO_FONT *domain_text_font = obtain_domain_font();
      float x = surface_projection_width * 0.5;
      float y = 2;
      al_draw_text(domain_text_font,
                   color_kit.get_base_text_color(base_text_opacity),
                   x,
                   y,
                   ALLEGRO_ALIGN_CENTER,
                   domain_text.c_str());
      return;
    body_dependency_symbols:
      - Hexagon::Elements::ColorKit


  - name: draw_powerbar
    type: void
    body: |
      powerbar.set_files_are_committed(files_are_committed);
      powerbar.set_commits_are_in_sync_with_remote(commits_are_in_sync_with_remote);
      // these values are set externally in System/System via actions
      //powerbar.set_files_are_modified(files_are_modified);
      //powerbar.set_files_are_staged(files_are_staged);
      //powerbar.set_files_are_untracked(files_are_untracked);

      Hexagon::Powerbar::Renderer powerbar_renderer(display, &powerbar, obtain_powerbar_text_font(), backfill_color);
      powerbar_renderer.render();
      return;
    body_dependency_symbols: []


  - name: draw_focus_timer_bar
    type: void
    body: |
      Hexagon::FocusTimerBar::Renderer focus_timer_bar_renderer(
         get_surface_projection_width(),
         get_surface_projection_height(),
         &focus_timer_bar
      );
      focus_timer_bar_renderer.render();
      return;
    body_dependency_symbols: []


  - name: draw_build_sequence_meter
    type: void
    body: |
      std::string BUILD_STATUS_SIGNALING_FILENAME =
         "/Users/markoates/Repos/hexagon/bin/programs/data/tmp/build_signal.txt";
      std::string build_sequence_status = php::file_get_contents(BUILD_STATUS_SIGNALING_FILENAME);
      if (!build_sequence_status.empty()) build_sequence_status.pop_back(); // remove the newline, ugh hack sorry
      // TODO consider (do, actually, not consider) migrating this to placement3d
      placement2d place{1920 - 40, 1080 / 2, 70, 620};
      place.align = vec2d(1.0, 0.5);

      std::vector<std::tuple<std::string, std::string, std::string, std::string>> build_stages = {
        { "started", "SGNL", "not_started", "" },
        { "generating_sources_files_from_quintessence", "PRSE", "not_started", "quintessence_build.txt" },
        { "building_component_object_files", "BUILD", "not_started", "component_object_build.txt" },
        { "delete_focused_component_test_object_file_and_test_executable", "XTOB", "not_started", "" },
        { "build_focused_component_test_object_file", "BTOB", "not_started", "component_test_object_build.txt" },
        { "build_focused_component_test_executable", "BTEX", "not_started", "component_test_executable.txt" },
        { "run_test_for_focused_component", "TEST", "not_started", "component_test_run.txt" },
        { "make_library", "LIBB", "not_started", "" },
        { "make_all_programs", "PROG", "not_started", "" },
        { "make_documentation", "DOCS", "not_started", "" },
        { "signal_component_built_and_integrated", "SIGF", "not_started", "" },
        { "completed", "PASS", "not_started", "" },
      };
      for (auto &build_stage : build_stages)
      {
         std::string this_stage_status = std::get<0>(build_stage);
         if (this_stage_status == build_sequence_status)
         {
            if (build_sequence_status == "completed") std::get<2>(build_stage) = "finished";
            else std::get<2>(build_stage) = "running";
         }
      }
      Hexagon::BuildSequenceMeter::Renderer build_sequence_meter_renderer(
         &font_bin,
         build_sequence_status,
         build_stages,
         place.size.x,
         place.size.y,
         backfill_color,
         base_text_color
      );

      place.start_transform();
      build_sequence_meter_renderer.render();
      place.restore_transform();

      return;
    body_dependency_symbols:
      - Hexagon::BuildSequenceMeter::Renderer
      - php::file_get_contents
      - placement2d


  - name: draw_packets
    type: void
    body: |
      int frame_height = get_surface_projection_height();

      float x = left_column_x - 5;
      float y = frame_height - 60;
      float width = 130;
      float height = 90;
      float spacing = 20;

      float y_increment = -(height + spacing);

      placement3d place(x, y, 0.0);
      place.size.x = width;
      place.size.y = height;
      place.align.x = 0.0;
      place.align.y = 1.0;
      place.scale.x = 0.75;
      place.scale.y = 0.75;
      ALLEGRO_FONT *packet_text_font = obtain_packet_text_font();

      ALLEGRO_COLOR packet_text_color = AllegroFlare::color::color(get_base_text_color(), base_text_opacity);

      al_draw_text(packet_text_font, packet_text_color, x, y, 0, "PACKETS");

      place.position.y -= al_get_font_line_height(packet_text_font);

      Hexagon::Packet packet_in_progress(search_count, save_count);
      std::vector<Hexagon::Packet> packets_to_render = packets;
      packets_to_render.push_back(packet_in_progress);

      // 9, because golf has 9-hole halves (of a game of 18 holes)
      // also it's divisible by 2 or 3. Good number.  Also 1 extra for the in-progress
      int max_num_packets_to_render = 10;

      while (packets_to_render.size() > max_num_packets_to_render) packets_to_render.erase(packets_to_render.begin());
      std::reverse(packets_to_render.begin(), packets_to_render.end());

      for (auto &packet : packets_to_render)
      {
         place.start_transform();

         Hexagon::PacketRenderer packet_renderer(
            &font_bin, &packet, packet_text_font, place.size.x, place.size.y, packet_text_color
         );
         packet_renderer.render();

         place.restore_transform();

         place.position.y += y_increment;
      }
      return;
    body_dependency_symbols: []


  - name: draw_caps_lock_notification_light
    type: void
    parameters:
      - name: active
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      float caps_notification_lights_x = 130;
      float caps_notification_lights_y = get_surface_projection_height() - 200;

      Hexagon::Elements::Pill pill(&font_bin, caps_notification_lights_x, caps_notification_lights_y);
      pill.render();
      //ALLEGRO_FONT *font = obtain_global_font();
      //ALLEGRO_COLOR color = ALLEGRO_COLOR{0.2, 0.2, 0.2, 0.2};
      //al_draw_text(font, color, 10, 10, ALLEGRO_ALIGN_CENTER, "CAPS");
      //TODO: fill out this drawing
      //ALLEGRO_KEY_SCROLLLOCK
      //ALLEGRO_KEY_NUMLOCK
      //ALLEGRO_KEY_CAPSLOCK
      return;
    body_dependency_symbols:
      - Hexagon::Elements::Pill


  - name: draw
    type: void
    guards: [ initialized ]
    body: |
      int y_cursor = 0;
      int frame_width = get_surface_projection_width();
      int frame_height = get_surface_projection_height();

      ALLEGRO_STATE previous_target_bitmap_state;
      al_store_state(&previous_target_bitmap_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(screen_sub_bitmap);

      ALLEGRO_FONT *font = obtain_global_font();
      ALLEGRO_FONT *component_navigator_font = obtain_component_navigator_font();

      std::vector<StageInterface::type_t> permitted_types = {
         StageInterface::PROJECT_NAVIGATOR,
         StageInterface::COMPONENT_NAVIGATOR,
         StageInterface::COMPONENT_RELATIONS_NAVIGATOR,
         StageInterface::ONE_LINE_INPUT_BOX,
         StageInterface::GIT_COMMIT_MESSAGE_INPUT_BOX,
         StageInterface::FILE_NAVIGATOR,
         StageInterface::LITTLE_MENU,
         StageInterface::DRAWING_BOX,
         StageInterface::FANCY,
         StageInterface::MULTIPLEX_MENU,
      };

      // alternatively using a camera
      bool using_camera = false;
      if (using_camera)
      {
         Hexagon::Camera camera;
         vec3d &camera_position = camera.get_position_ref();
         vec3d &camera_stepback = camera.get_stepback_ref();
         vec3d &camera_rotation = camera.get_rotation_ref();
         camera_position.x = frame_width / 2; //al_get_display_width(display)/2;
         camera_position.y = frame_height / 2; //al_get_display_height(display)/2;
         camera_stepback.z = 0; //(sin(al_get_time()) * 100);
         camera.setup_camera_perspective(screen_sub_bitmap);
         al_clear_depth_buffer(1000);
      }

      bool draw_stages = true;

      Hexagon::StageCollectionHelper stage_collection_helper(stages);
      //for (auto &stage : stage_collection_helper.get_all_render_on_hud_stages())

      if (draw_stages && stages)
      {
         for (auto &stage : stage_collection_helper.get_all_render_on_hud_stages())
         //for (auto &stage : (*stages))
         {
            //if (!stage->get_render_on_hud()) continue;
            if (std::find(permitted_types.begin(), permitted_types.end(), stage->get_type()) == permitted_types.end())
            {
               std::stringstream error_message;
               error_message << "Hexagon/Hud::draw: error: Cannot render a stage marked as render_on_hud "
                             << "that is of type \"" << stage->get_type() << "\"";
               throw std::runtime_error(error_message.str());
            }

            stage->render();
         }
      }

      draw_current_title_text();

      if (show_objective) draw_objective_text();

      if (show_domain) draw_domain_text_and_overlay();

      if (show_profiler) draw_profile_timer_graph();

      if (show_notifications)
      {
         ALLEGRO_COLOR color = al_color_name("red");
         float notification_bottom_padding = al_get_font_line_height(obtain_text_font());
         float font_line_height = al_get_font_line_height(obtain_text_font());
         y_cursor=0;
         for (auto &notification : notifications)
         {
            float y_position = y_cursor * notification_bottom_padding;
            al_draw_text(obtain_text_font(), color, 0, y_position, 0, notification.c_str());
            y_cursor++;
         }

         y_cursor=0;
         for (auto &notification2 : notifications2)
         {
            float y_position = (y_cursor+1) * font_line_height;
            al_draw_text(obtain_text_font(),
                         color,
                         frame_width,
                         frame_height-y_position,
                         ALLEGRO_ALIGN_RIGHT,
                         notification2.c_str());
            y_cursor++;
         }
      }

      if (show_save_count)
      {
         // bottom left of screen
         std::string save_count_text_to_draw = std::string("Saves: ") + std::to_string(save_count);
         ALLEGRO_FONT *score_text_font = obtain_score_text_font();
         al_draw_text(
            score_text_font,
            al_color_name("gray"),
            left_column_x,
            frame_height - al_get_font_line_height(score_text_font) - 60,
            ALLEGRO_ALIGN_LEFT,
            save_count_text_to_draw.c_str()
         );
      }

      if (show_search_count)
      {
         // bottom left of screen
         std::string search_count_text_to_draw = std::string("Searches: ") + std::to_string(search_count);
         ALLEGRO_FONT *score_text_font = obtain_score_text_font();
         al_draw_text(
            score_text_font,
            al_color_name("gray"),
            left_column_x,
            frame_height - al_get_font_line_height(score_text_font) - 60 - 28,
            ALLEGRO_ALIGN_LEFT,
            search_count_text_to_draw.c_str()
         );
      }

      if (show_packets) draw_packets();

      if (show_powerbar) draw_powerbar();

      if (show_focus_timer_bar) draw_focus_timer_bar();

      if (show_caps_lock_notification_light) draw_caps_lock_notification_light();

      if (show_build_sequence_meter) draw_build_sequence_meter();

      if (show_disabled_screen)
      {
         al_draw_line(0,
                      0,
                      get_surface_projection_width(),
                      get_surface_projection_height(),
                      al_color_name("red"),
                      3.0);
      }

      al_restore_state(&previous_target_bitmap_state);
      return;
    body_dependency_symbols:
      - sin
      - std::min
      - placement3d
      - al_get_font_ascent
      - ALLEGRO_COLOR
      - al_color_name
      - al_draw_text
      - Hexagon::Powerbar::Powerbar
      - Hexagon::Powerbar::Renderer
      - Hexagon::FocusTimerBar::Renderer
      - Hexagon::PacketRenderer
      - Hexagon::CodeEditor::Stage*
      - Hexagon::AdvancedComponentNavigator::Stage*
      - Hexagon::Camera
      - Hexagon::StageCollectionHelper


  - name: set_orthographic_projection
    parameters:
      - name: bitmap
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: left
        type: float
        default_argument: 0
      - name: top
        type: float
        default_argument: 0
      - name: right
        type: float
        default_argument: 1920
      - name: bottom
        type: float
        default_argument: 1080
    body: |
      ALLEGRO_TRANSFORM trans;
      al_identity_transform(&trans);
      float h_depth = 200;

      bool using_ortho = true;
      if (using_ortho)
      {
         al_orthographic_transform(
               &trans,
               left,
               top,
               -1.0 * h_depth,
               right,
               bottom,
               1.0 * h_depth
            );
      }
      else
      {
         // NOTE: This doesn't work
         al_perspective_transform(
               &trans,
               left - 500,
               top - 500,
               -2000, //-1.0 * h_depth + 350,
               right + 500,
               bottom + 500,
               2000 //1.0 * h_depth + 350
            );
      }

      ALLEGRO_STATE previous_target_bitmap_state;
      al_store_state(&previous_target_bitmap_state, ALLEGRO_STATE_TARGET_BITMAP);

      al_set_target_bitmap(bitmap);
      al_use_projection_transform(&trans);

      al_restore_state(&previous_target_bitmap_state);
      return;


  - name: get_dummy_font_bin
    type: AllegroFlare::FontBin&
    static: true
    body: |
      return dummy_font_bin;


  - name: obtain_text_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Eurostile.ttf -27"];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_title_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Purista Medium.otf -28"];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_objective_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Purista Medium.otf -22"];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_domain_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Purista Medium.otf -16"];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_powerbar_text_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Purista Medium.otf -18"];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_score_text_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Purista Medium.otf -22"];
      //return font_bin["Eurostile.ttf -22"];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_global_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin[global_font_str];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


  - name: obtain_packet_text_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Exan-Regular.ttf -14"];


  - name: obtain_component_navigator_font
    type: ALLEGRO_FONT*
    body: |
      return font_bin["Purista Medium.otf -22"];
      //return font_bin["EurostileExtendedBlack-aka-ExtendedBold.ttf -32"];


dependencies:


  - symbol: Hexagon::Elements::ColorKit
    headers: [ Hexagon/Elements/ColorKit.hpp ]
  - symbol: sin
    headers: [ math.h ]
  - symbol: Hexagon::Camera
    headers: [ Hexagon/Camera.hpp ]
  - symbol: std::min
    headers: [ algorithm ]
  - symbol: Hexagon::Powerbar::Powerbar
    headers: [ Hexagon/Powerbar/Powerbar.hpp ]
  - symbol: Hexagon::Powerbar::Renderer
    headers: [ Hexagon/Powerbar/Renderer.hpp ]
  - symbol: Hexagon::FocusTimerBar::FocusTimerBar
    headers: [ Hexagon/FocusTimerBar/FocusTimerBar.hpp ]
  - symbol: Hexagon::FocusTimerBar::Renderer
    headers: [ Hexagon/FocusTimerBar/Renderer.hpp ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_display_width
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_get_font_ascent
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::color::mix
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::FontBin&
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: global::profiler
    headers: [ Hexagon/shared_globals.hpp ]
  - symbol: std::vector<Hexagon::Packet>
    headers: [ vector, Hexagon/Packet.hpp ]
  - symbol: Hexagon::PacketRenderer
    headers: [ Hexagon/PacketRenderer.hpp ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: placement2d
    headers: [ allegro_flare/placement2d.h ]
  - symbol: std::vector<StageInterface *>*
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: Hexagon::CodeEditor::Stage*
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: Hexagon::AdvancedComponentNavigator::Stage*
    headers: [ Hexagon/AdvancedComponentNavigator/Stage.hpp ]
  - symbol: Hexagon::System::Config*
    headers: [ Hexagon/System/Config.hpp ]
  - symbol: Hexagon::BuildSequenceMeter::Renderer
    headers: [ Hexagon/BuildSequenceMeter/Renderer.hpp ]
  - symbol: Hexagon::Elements::Pill
    headers: [ Hexagon/Elements/Pill.hpp ]
  - symbol: Hexagon::StageCollectionHelper
    headers: [ Hexagon/StageCollectionHelper.hpp ]


