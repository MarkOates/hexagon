properties:
  - name: initialized
    type: bool
    init_with: false
  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: "nullptr"
    constructor_arg: true
  - name: dummy_font_bin
    type: AllegroFlare::FontBin
    static: true
    init_with: "{}"
  - name: fonts
    type: AllegroFlare::FontBin&
    init_with: "get_dummy_font_bin()"
    constructor_arg: true
  - name: title_text
    type: std::string
    init_with: "\"\""
    setter: true
    getter: true
    constructor_arg: true
  - name: show_disabled_screen
    type: bool
    init_with: false
    setter: true
    getter: true
    constructor_arg: true
  - name: screen_sub_bitmap
    type: ALLEGRO_BITMAP*
    init_with: "nullptr"
    setter: true
  - name: notifications
    type: std::vector<std::string>
    init_with: "{}"
    getter: true
    setter: true
  - name: notifications2
    type: std::vector<std::string>
    init_with: "{}"
    getter: true
    setter: true
functions:
  - name: get_dummy_font_bin
    type: AllegroFlare::FontBin&
    static: true
    body: |
      return dummy_font_bin;
  - name: obtain_text_font
    type: ALLEGRO_FONT*
    body: return fonts["Eurostile.ttf -22"];
  - name: initialize
    type: void
    body: |
      if (initialized) return;
      if (!display) throw std::runtime_error("[Hud::initialize()] Cannot initialize Hud with a nullptr screen_sub_bitmap");

      ALLEGRO_BITMAP *backbuffer = al_get_backbuffer(display);
      ALLEGRO_BITMAP *hud_screen_sub_bitmap = al_create_sub_bitmap(backbuffer, 0, 0, al_get_bitmap_width(backbuffer), al_get_bitmap_height(backbuffer));
      set_screen_sub_bitmap(hud_screen_sub_bitmap);

      initialized = true;
      return;
  - name: draw_current_focus_name
    type: void
    private: true
    body: |
      ALLEGRO_COLOR epic_green_color = al_color_html("99ddc4");
      ALLEGRO_COLOR color = AllegroFlare::color::mix(epic_green_color, al_color_name("dodgerblue"), 0.5);
      float display_center_x = al_get_display_width(display) / 2;
      int y_position = 20;

      al_draw_text(obtain_text_font(),
                   color,
                   display_center_x,
                   y_position,
                   ALLEGRO_ALIGN_CENTER,
                   title_text.c_str());
      return;
    body_dependency_symbols:
      - al_draw_rectangle
      - al_get_display_width
      - AllegroFlare::color::mix
  - name: draw
    type: void
    body: |
      if (!initialized) throw std::runtime_error("[Hud::draw()] Cannot call until Hud has been initialized");

      int y_cursor = 0;
      int frame_width = al_get_bitmap_width(screen_sub_bitmap);
      int frame_height = al_get_bitmap_height(screen_sub_bitmap);

      ALLEGRO_STATE previous_target_bitmap_state;
      al_store_state(&previous_target_bitmap_state, ALLEGRO_STATE_TARGET_BITMAP);
      al_set_target_bitmap(screen_sub_bitmap);

      draw_current_focus_name();

      if (show_disabled_screen)
      {
         al_draw_line(0,
                      0,
                      al_get_display_width(display),
                      al_get_display_height(display),
                      al_color_name("red"),
                      3.0);
      }

      ALLEGRO_COLOR color = al_color_name("red");
      float notification_bottom_padding = al_get_font_line_height(obtain_text_font());
      float font_line_height = al_get_font_line_height(obtain_text_font());
      y_cursor=0;
      for (auto &notification : notifications)
      {
        float y_position = y_cursor * notification_bottom_padding;
        al_draw_text(obtain_text_font(), color, 0, y_position, 0, notification.c_str());
        y_cursor++;
      }

      y_cursor=0;
      for (auto &notification2 : notifications2)
      {
        float y_position = (y_cursor+1) * font_line_height;
        al_draw_text(obtain_text_font(),
                     color,
                     frame_width,
                     frame_height-y_position,
                     ALLEGRO_ALIGN_RIGHT,
                     notification2.c_str());
        y_cursor++;
      }

      Hexagon::Powerbar::Powerbar powerbar;
      Hexagon::Powerbar::Renderer powerbar_renderer(&powerbar);
      powerbar_renderer.render();

      al_restore_state(&previous_target_bitmap_state);
      return;
    body_dependency_symbols:
      - al_get_font_ascent
      - ALLEGRO_COLOR
      - al_color_name
      - al_draw_text
dependencies:
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: al_get_display_width
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_get_font_ascent
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::color::mix
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::FontBin&
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
