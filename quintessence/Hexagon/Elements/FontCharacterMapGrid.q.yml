properties:


  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true
  - name: grid_width
    type: int
    init_with: 0
    getter: true
  - name: grid_height
    type: int
    init_with: 0
    getter: true
  - name: character_uv_mapping
    type: std::map<char, std::tuple<float, float, float, float>>
    init_with: '{}'
    getter: true


functions:


  - name: create
    type: ALLEGRO_BITMAP*
    guards: [ font ]
    body: |
      character_uv_mapping.clear();

      grid_width = al_get_text_width(font, "W"); // 'W' character as an estimate for reasonable large width
      grid_height = al_get_font_line_height(font);
      int num_rows = 16;
      int num_columns = 16;
      ALLEGRO_STATE previous_state;
      al_store_state(&previous_state, ALLEGRO_STATE_TARGET_BITMAP);

      ALLEGRO_BITMAP *result = al_create_bitmap(grid_width * num_columns, grid_height * num_rows);
      al_set_target_bitmap(result);
      al_clear_to_color(ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f});


      ALLEGRO_COLOR text_color = ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f};
      std::string text_to_draw = " ";
      const char* text_to_draw_cstr = text_to_draw.c_str();
      for (int y=0; y<=num_rows; y++)
      {
         for (int x=0; x<=num_columns; x++)
         {
            char char_number = x + y * num_rows;
            text_to_draw[0] = x + y * num_rows;
            al_draw_text(font, text_color, x * grid_width, y * grid_height, ALLEGRO_ALIGN_LEFT, text_to_draw_cstr);
            float u1 = x * grid_width;
            float v1 = y * grid_height;
            float u2 = u1 + grid_width;
            float v2 = v2 + grid_height;
            character_uv_mapping[char_number] = {u1, v1, u2, v2};
         }
      }
      al_restore_state(&previous_state);
      return result;


dependencies:


  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: std::map<char, std::tuple<float, float, float, float>>
    headers: [ map, tuple ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
