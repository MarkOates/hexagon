properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: title
    type: std::string
    init_with: '"+"'
    constructor_arg: true
  - name: list_items
    type: std::vector<std::tuple<std::string, std::string>>
    init_with: '{}'
    constructor_arg: true
  - name: color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1, 0, 0, 1}
    constructor_arg: true
  - name: cursor
    type: int
    init_with: 0
  - name: wrap_cursor_when_moving_cursor_outside_bounds
    type: bool
    init_with: true
    getter: true
    setter: true
  - name: upcase
    type: bool
    init_with: false
    getter: true
    setter: true


functions:


  - name: move_cursor_up
    type: bool
    body: |
      if (list_items.empty()) return true;

      cursor--;
      if (get_wrap_cursor_when_moving_cursor_outside_bounds())
      {
         while (cursor < 0) cursor += list_items.size();
      }
      else
      {
         if (cursor < 0) cursor = 0;
      }
      return true;


  - name: move_cursor_down
    type: bool
    body: |
      if (list_items.empty()) return true;

      cursor++;
      if (get_wrap_cursor_when_moving_cursor_outside_bounds())
      {
         while (cursor >= list_items.size()) cursor -= list_items.size();
      }
      else
      {
         if (cursor >= list_items.size()) cursor = std::max(0, (int)(list_items.size()) - 1);
      }
      return true;


  - name: get_current_list_item_identifier
    type: std::string
    body: |
      if (cursor < 0 || cursor >= list_items.size()) return "";
      return std::get<1>(list_items[cursor]);


  - name: render
    type: void
    boards: [ is_primitives_addon_initialized() ]
    body: |
      ALLEGRO_FONT *font = obtain_list_item_font();
      //ALLEGRO_COLOR color = ALLEGRO_COLOR{1, 0, 0, 1};
      ALLEGRO_COLOR off_color = ALLEGRO_COLOR{0, 0, 0, 1};
      ALLEGRO_COLOR backfill_color = ALLEGRO_COLOR{0, 0, 0, 0.6};
      float width = 500;
      //float height = 300;
      int line_height = al_get_font_line_height(font) * 1.2;
      int line_num = 0;
      float height = line_height * (list_items.size() + 1);
      float padding_hack = 10.0f;

      // draw backfill
      al_draw_filled_rectangle(-padding_hack, -padding_hack, width+padding_hack, height+padding_hack, backfill_color);

      // draw frame
      al_draw_rectangle(-padding_hack, -padding_hack, width+padding_hack, height+padding_hack, color, 2.0);

      // draw title
      bool draw_title = true;
      if (draw_title)
      {
         std::string text_to_render = title;
         if (get_upcase())
         {
            std::transform(text_to_render.begin(), text_to_render.end(), text_to_render.begin(), ::toupper);
         }
         al_draw_text(
            font,
            color,
            0,
            0 + line_num * line_height,
            0,
            text_to_render.c_str()
         );
         line_num++;
      }

      // draw text
      int local_list_line_num = 0;
      for (auto &list_item : list_items)
      {
         bool cursor_on_this_list_item = (cursor == local_list_line_num);

         if (cursor_on_this_list_item)
         {
            // draw selection box
            al_draw_filled_rectangle(0, line_num * line_height, width, line_num * line_height + line_height, color);

            // draw the cursor arrow
            draw_cursor_pointer_arrow(width + padding_hack, line_num * line_height + line_height * 0.5);
         }

         std::string text_to_render = std::get<0>(list_item).c_str();
         if (get_upcase())
         {
           std::transform(text_to_render.begin(), text_to_render.end(), text_to_render.begin(), ::toupper);
         }
         text_to_render = std::string("   - ") + text_to_render;

         al_draw_text(
            font,
            cursor_on_this_list_item ? off_color : color,
            0,
            0 + line_num * line_height,
            0,
            text_to_render.c_str()
         );
         local_list_line_num++;
         line_num++;
      }

      return;
    body_dependency_symbols:
      - al_draw_filled_rectangle
      - std::transform


  - name: obtain_list_item_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
       return font_bin->auto_get("Jura-Medium.ttf -26");
       //return font_bin->auto_get("Exan-Regular.ttf -23");
       //return font_bin->auto_get("Helvetica.ttf -23");


  - name: draw_cursor_pointer_arrow
    private: true
    parameters:
      - name: cpx
        type: float
        default_argument: 1000
      - name: cpy
        type: float
        default_argument: 900
    body: |
      // draw the box and pointer
      const float SQRT_3 = 1.73205f;

      //float cpx = 1000;  // cursor pointer x
      //float cpy = 900;  // cursor pointer y
      float s = 30;
      std::vector<float> points = { cpx, cpy };
      float change[2] = { 0, 0 };

      change[0] = 1;
      change[1] = -SQRT_3;
      points.push_back(points[points.size()-2] + change[0] * s);
      points.push_back(points[points.size()-2] + change[1] * s);

      change[0] = 0.275;
      change[1] = 0;
      points.push_back(points[points.size()-2] + change[0] * s);
      points.push_back(points[points.size()-2] + change[1] * s);

      change[0] = 0;
      change[1] = SQRT_3*2;
      points.push_back(points[points.size()-2] + change[0] * s);
      points.push_back(points[points.size()-2] + change[1] * s);

      change[0] = -0.275;
      change[1] = 0;
      points.push_back(points[points.size()-2] + change[0] * s);
      points.push_back(points[points.size()-2] + change[1] * s);

      change[0] = -1;
      change[1] = -SQRT_3;
      points.push_back(points[points.size()-2] + change[0] * s);
      points.push_back(points[points.size()-2] + change[1] * s);

      ALLEGRO_COLOR color = ALLEGRO_COLOR{1, 0, 0, 1};
      al_draw_ribbon(&points[0], sizeof(float) * 2, color, 2.0, (points.size()/2));
      return;


dependencies:


  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: std::vector<std::tuple<std::string, std::string>>
    headers: [ vector, tuple, string ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: std::transform
    headers: [ algorithm ]


