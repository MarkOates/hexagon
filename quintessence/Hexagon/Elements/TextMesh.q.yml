properties:


  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true
  - name: num_columns
    type: int
    init_with: 0
    constructor_arg: true
  - name: num_rows
    type: int
    init_with: 0
    constructor_arg: true
  - name: font_character_map_grid
    type: Hexagon::Elements::FontCharacterMapGrid
    init_with: '{font}'
  - name: mesh
    type: Hexagon::Elements::BitmapGridMesh
    init_with: '{}'
  - name: character_map_bitmap
    type: ALLEGRO_BITMAP*
    init_with: nullptr
  - name: character_uv_mapping
    type: std::map<char, std::tuple<float, float, float, float>>
    init_with: '{}'
  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    type: void
    guards: [ font ]
    body: |
      if (initialized) return;

      //mesh.set_cell_uv();
      ALLEGRO_BITMAP *font_character_map_bitmap = font_character_map_grid.create();
      character_uv_mapping = font_character_map_grid.get_character_uv_mapping();

      mesh.resize(num_columns, num_rows);
      mesh.set_bitmap(font_character_map_bitmap);

      initialized = true;
      return;


  - name: set_cell_background_color
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0.0f, 0.0f, 0.0f, 0.0f}'
    body: |
      mesh.set_cell_color(x, y, color);
      return;


  - name: set_cell_character
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: character
        type: char
        default_argument: "'\0'"
    body: |
      // TODO: validate 'character' index exists in character_uv_mapping
      std::tuple<float, float, float, float> character_map = character_uv_mapping[character];
      mesh.set_cell_uv(x, y, character_map);
      // update the
      return;


  - name: render
    type: void
    guards: [ initialized ]
    body: |
      mesh.render();
      return;


dependencies:


  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: std::map<char, std::tuple<float, float, float, float>>
    headers: [ map, tuple ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: Hexagon::Elements::BitmapGridMesh
    headers: [ Hexagon/Elements/BitmapGridMesh.hpp ]
  - symbol: Hexagon::Elements::FontCharacterMapGrid
    headers: [ Hexagon/Elements/FontCharacterMapGrid.hpp ]
