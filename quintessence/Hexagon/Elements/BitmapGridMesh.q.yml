properties:


  - name: grid
    type: std::vector<std::vector<std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>&
    init_with: 'get_dummy_grid_ref()'
    getter: true
  - name: dummy_grid
    static: true
    type: std::vector<std::vector<std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>
    init_with: '{}'
    getter_ref: true
  - name: vertexes
    type: std::vector<ALLEGRO_VERTEX>
    init_with: '{}'
    getter: true
  - name: num_columns
    type: int
    init_with: 0
    getter: true
  - name: num_rows
    type: int
    init_with: 0
    getter: true
  - name: cell_width
    type: float
    init_with: 1.0f
    getter: true
  - name: cell_height
    type: float
    init_with: 1.0f
    getter: true
  - name: bitmap
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    getter: true
    setter: true


functions:


  - name: set_cell_uv
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: uv_coords
        type: std::tuple<float, float, float, float>
        default_argument: '{0.0f, 0.0f, 1.0f, 1.0f}'
    body: |
      std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>* cell = find_cell(x, y);
      if (!cell) throw std::runtime_error("set_cell_uv: cell not found");

      int vertex_start = (x + y * num_columns) * 6;

      float &u1 = std::get<0>(uv_coords);
      float &v1 = std::get<1>(uv_coords);
      float &u2 = std::get<2>(uv_coords);
      float &v2 = std::get<3>(uv_coords);

      vertexes[vertex_start+0].u = u1;
      vertexes[vertex_start+0].v = v1;

      vertexes[vertex_start+1].u = u1;
      vertexes[vertex_start+1].v = v2;

      vertexes[vertex_start+2].u = u2;
      vertexes[vertex_start+2].v = v2;

      vertexes[vertex_start+3].u = u2;
      vertexes[vertex_start+3].v = v2;

      vertexes[vertex_start+4].u = u2;
      vertexes[vertex_start+4].v = v1;

      vertexes[vertex_start+5].u = u1;
      vertexes[vertex_start+5].v = v1;

      return;


  - name: set_cell_color
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0.0f, 0.0f, 0.0f, 0.0f}'
    body: |
      // set the cell in the grid
      std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>* cell = find_cell(x, y);
      if (!cell) throw std::runtime_error("cell not found");
      std::get<2>(*cell) = color;

      // set the vertexes in the mesh
      int vertex_start = (x + y * num_columns) * 6;
      vertexes[vertex_start+0].color = color;
      vertexes[vertex_start+1].color = color;
      vertexes[vertex_start+2].color = color;
      vertexes[vertex_start+3].color = color;
      vertexes[vertex_start+4].color = color;
      vertexes[vertex_start+5].color = color;


  - name: resize
    type: bool
    parameters:
      - name: num_columns
        type: int
        default_argument: 0
      - name: num_rows
        type: int
        default_argument: 0
      - name: cell_width
        type: float
        default_argument: 0.0f
      - name: cell_height
        type: float
        default_argument: 0.0f
    body: |
      // resize the grid
      grid.clear();
      std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR> default_grid_cell =
         std::make_tuple('-', ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f}, ALLEGRO_COLOR{0.2f, 0.2f, 0.2f, 0.2f});
      for (unsigned y=0; y<num_rows; y++)
      {
         grid.push_back({});
         std::vector<std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>> &row = grid.back();
         for (unsigned x=0; x<num_columns; x++)
         {
            row.push_back(default_grid_cell);
         }
      }

      // resize the vertexes
      int num_vertexes = num_columns * num_rows * 6;
      vertexes.clear();
      vertexes.resize(num_vertexes); // 6 vertexes per rectangle
      this->num_columns = num_columns;
      this->num_rows = num_rows;
      this->cell_width = cell_width;
      this->cell_height = cell_height;

      int v = 0;
      for (; v<num_vertexes; v+=6)
      {
         long tile_num = v / 6;

         int x1 = (tile_num % num_columns);
         int y1 = (tile_num / num_columns);
         int x2 = x1 + 1;
         int y2 = y1 + 1;

         vertexes[v+0].x = x1;
         vertexes[v+0].y = y1;

         vertexes[v+1].x = x1;
         vertexes[v+1].y = y2;

         vertexes[v+2].x = x2;
         vertexes[v+2].y = y2;

         vertexes[v+3].x = x2;
         vertexes[v+3].y = y2;

         vertexes[v+4].x = x2;
         vertexes[v+4].y = y1;

         vertexes[v+5].x = x1;
         vertexes[v+5].y = y1;
      }

      v = 0;
      for (; v<num_vertexes; v++)
      {
         vertexes[v].x *= cell_width;
         vertexes[v].y *= cell_height;
         vertexes[v].z = 0;
         vertexes[v].color = al_map_rgba_f(1, 1, 1, 1);
      }


  - name: render
    type: void
    guards: [ al_is_system_installed(), bitmap ]
    body: |
      ALLEGRO_BITMAP *tile_atlas_bitmap = get_bitmap();
      al_draw_prim(&vertexes[0], NULL, tile_atlas_bitmap, 0, vertexes.size(), ALLEGRO_PRIM_TRIANGLE_LIST);
      return;
    body_dependency_symbols:
      - ALLEGRO_BITMAP*


  - name: calculate_width
    type: float
    body: return cell_width * num_columns;


  - name: calculate_height
    type: float
    body: return cell_height * num_rows;


  - name: find_cell
    private: true
    type: std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>*
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      if (y < 0 || y >= grid.size()) return nullptr;
      if (x < 0 || x >= grid[y].size()) return nullptr;
      return &grid[y][x];


dependencies:


  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: std::vector<ALLEGRO_VERTEX>
    headers: [ vector, allegro5/allegro_primitives.h ]
  - symbol: std::vector<std::vector<std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>&
    headers: [ vector, tuple, allegro5/allegro.h ]
  - symbol: std::vector<std::vector<std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>
    headers: [ vector, tuple, allegro5/allegro.h ]
  - symbol: std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>*
    headers: [ vector, tuple, allegro5/allegro.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: std::tuple<float, float, float, float>
    headers: [ tuple ]
