properties:


  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true
  - name: cell_width
    type: float
    init_with: 1.0
    constructor_arg: true
  - name: cell_height
    type: float
    init_with: 1.0
    constructor_arg: true
  - name: grid
    type: std::vector<std::vector<std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>
    init_with: '{}'
    constructor_arg: true


functions:


  - name: set_cell_color
    type: void
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
      - name: color
        type: ALLEGRO_COLOR
        default_argument: '{0.0f, 0.0f, 0.0f, 0.0f}'
    body: |
      return;


  - name: render
    type: void
    guards: [ al_is_system_installed() ]
    body: |
      // note: missing guard for al_is_primitives_addon_initialized();
      int y=0;
      std::string str_to_render = "\0";
      for (auto &grid_line : grid)
      {
         int x=0;
         for (auto &grid_box : grid_line)
         {
            //std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR> &box = grid_box;
            str_to_render[0] = std::get<0>(grid_box);
            ALLEGRO_COLOR foreground_color = std::get<1>(grid_box);
            ALLEGRO_COLOR background_color = std::get<2>(grid_box);
            float xx = x * cell_width;
            float yy = y * cell_height;

            // draw background
            al_draw_filled_rectangle(xx, yy, xx+cell_width, yy+cell_height, background_color);

            // draw foreground
            al_draw_text(font, foreground_color, xx, yy, 0, str_to_render.c_str());

            x++;
         }
         y++;
      }
      return;
    body_dependency_symbols:
      - al_is_system_installed
      - al_draw_filled_rectangle
      - al_color_name


dependencies:


  - symbol: al_is_system_installed
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_filled_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: std::vector<std::vector<std::tuple<char, ALLEGRO_COLOR, ALLEGRO_COLOR>>>
    headers: [ vector, tuple, allegro5/allegro.h ]
