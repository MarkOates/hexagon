properties:


  - name: num_columns
    type: int
    init_with: 0
    constructor_arg: true
  - name: num_rows
    type: int
    init_with: 0
    constructor_arg: true
  - name: cell_width
    type: int
    init_with: 1
    constructor_arg: true
  - name: cell_height
    type: int
    init_with: 1
    constructor_arg: true
  - name: surface
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    getter: true
  - name: cell_sub_bitmaps
    type: std::vector<ALLEGRO_BITMAP*>
    init_with: '{}'
  - name: initialized
    type: bool
    init_with: false
    getter: true


functions:


  - name: set_cell_width
    type: void
    parameters:
      - name: cell_width
        type: int
        default_argument: 1
    guards: [ (!get_initialized()) ]
    body: |
      this->cell_width = cell_width;
      return;


  - name: set_cell_height
    type: void
    parameters:
      - name: cell_height
        type: int
        default_argument: 1
    guards: [ (!get_initialized()) ]
    body: |
      this->cell_height = cell_height;
      return;


  - name: initialize
    type: void
    guards: [ al_is_system_installed() ]
    body: |
      if (initialized) return;

      ALLEGRO_STATE previous_render_state;
      al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);

      if (surface)
      {
         for (auto &cell_sub_bitmap : cell_sub_bitmaps) al_destroy_bitmap(cell_sub_bitmap);
         al_destroy_bitmap(surface);
         cell_sub_bitmaps.clear();
         surface = nullptr;
      }

      if (!surface)
      {
         surface = al_create_bitmap(num_columns * cell_width, num_rows * cell_height);
         cell_sub_bitmaps.resize(num_columns * num_rows);
         for (unsigned y=0; y<num_rows; y++)
         {
            for (unsigned x=0; x<num_columns; x++)
            {
               ALLEGRO_BITMAP *cell_sub_bitmap =
                 al_create_sub_bitmap(surface, x*cell_width, y*cell_height, cell_width, cell_height);
               cell_sub_bitmaps[x + y*num_columns] = cell_sub_bitmap;
            }
         }
      }
      al_set_target_bitmap(surface);
      al_clear_to_color(ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f});

      al_restore_state(&previous_render_state);

      initialized = true;
      return;


  - name: draw_to_cell
    type: void
    parameters:
      - name: bitmap_to_draw
        type: ALLEGRO_BITMAP*
        default_argument: nullptr
      - name: tint
        type: ALLEGRO_COLOR
        default_argument: ALLEGRO_COLOR{1.0, 1.0, 1.0, 1.0}
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    guards: [ get_initialized(), bitmap_to_draw ]
    body: |
      ALLEGRO_BITMAP *sub_bitmap = find_sub_bitmap(x, y);
      if (!sub_bitmap)
      {
         std::stringstream error_message;
         error_message << "Elements::BitmapGridRenderSurface"
                       << "::"
                       << "draw_to_cell"
                       << ": error: "
                       << "could not find sub_bitmap at (" << x << ", " << y << ")";
         throw std::runtime_error(error_message.str());
      }

      ALLEGRO_STATE previous_render_state;
      al_store_state(&previous_render_state, ALLEGRO_STATE_TARGET_BITMAP);

      al_set_target_bitmap(sub_bitmap);
      al_draw_tinted_bitmap(bitmap_to_draw, tint, 0, 0, 0);

      al_restore_state(&previous_render_state);
      return;


  - name: find_sub_bitmap
    type: ALLEGRO_BITMAP*
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      if (x < 0) return nullptr;
      if (y < 0) return nullptr;
      if (x >= num_columns) return nullptr;
      if (y >= num_rows) return nullptr;
      return cell_sub_bitmaps[x + y*num_columns];


  - name: destroy
    type: void
    body: |
      for (auto &cell_sub_bitmap : cell_sub_bitmaps) { if (cell_sub_bitmap) al_destroy_bitmap(cell_sub_bitmap); }
      cell_sub_bitmaps.clear();
      if (surface) al_destroy_bitmap(surface);
      return;


dependencies:


  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro.h ]
  - symbol: std::vector<ALLEGRO_BITMAP*>
    headers: [ vector, allegro5/allegro.h ]

