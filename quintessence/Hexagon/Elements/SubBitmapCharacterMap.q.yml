properties:


  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    constructor_arg: true
    setter: true
  - name: grid_width
    type: int
    init_with: 0
    getter: true
  - name: grid_height
    type: int
    init_with: 0
    getter: true
  - name: NUM_ROWS
    type: int
    init_with: 16
    static: true
  - name: NUM_COLUMNS
    type: int
    init_with: 16
    static: true
  - name: surface
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    getter: true
  - name: cell_sub_bitmaps
    type: std::map<char, ALLEGRO_BITMAP*>
    init_with: '{}'
    getter: true


functions:


  - name: initialize
    guards: [ al_is_system_installed(), font ]
    body: |
      for (auto &cell_sub_bitmap : cell_sub_bitmaps) al_destroy_bitmap(cell_sub_bitmap.second);
      cell_sub_bitmaps.clear();
      if (surface) al_destroy_bitmap(surface);

      grid_width = al_get_text_width(font, "W"); // 'W' character as an estimate for reasonable large width
      grid_height = al_get_font_line_height(font);
      int num_rows = NUM_ROWS;
      int num_columns = NUM_COLUMNS;
      ALLEGRO_STATE previous_state;
      al_store_state(&previous_state, ALLEGRO_STATE_TARGET_BITMAP);

      surface = al_create_bitmap(grid_width * num_columns, grid_height * num_rows);
      al_set_target_bitmap(surface);
      al_clear_to_color(ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f});

      ALLEGRO_COLOR text_color = ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f};
      std::string text_to_draw = " ";
      const char* text_to_draw_cstr = text_to_draw.c_str();
      for (int y=0; y<=num_rows; y++)
      {
         for (int x=0; x<=num_columns; x++)
         {
            char char_number = x + y * num_rows;
            text_to_draw[0] = x + y * num_rows;
            al_draw_text(font, text_color, x * grid_width, y * grid_height, ALLEGRO_ALIGN_LEFT, text_to_draw_cstr);
            int xx = x * grid_width;
            int yy = y * grid_height;
            int ww = grid_width;
            int hh = grid_height;

            ALLEGRO_BITMAP *cell_sub_bitmap = al_create_sub_bitmap(surface, xx, yy, ww, hh);
            cell_sub_bitmaps[char_number] = cell_sub_bitmap;
         }
      }
      al_restore_state(&previous_state);
      return;


  - name: find_sub_bitmap
    type: ALLEGRO_BITMAP*
    parameters:
      - name: character
        type: char
        default_argument: 0
    body: |
      int x = character % NUM_COLUMNS;
      int y = character / NUM_COLUMNS;

      if (x < 0) return nullptr;
      if (y < 0) return nullptr;
      if (x >= NUM_COLUMNS) return nullptr;
      if (y >= NUM_ROWS) return nullptr;

      return cell_sub_bitmaps[x + y*NUM_COLUMNS];


  - name: destroy
    type: void
    body: |
      for (auto &cell_sub_bitmap : cell_sub_bitmaps)
      {
         if (cell_sub_bitmap.second) al_destroy_bitmap(cell_sub_bitmap.second);
      }
      cell_sub_bitmaps.clear();
      if (surface) al_destroy_bitmap(surface);
      return;


dependencies:


  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: std::map<char, ALLEGRO_BITMAP*>
    headers: [ map, allegro5/allegro.h ]
  - symbol: std::map<char, std::tuple<float, float, float, float>>
    headers: [ map, tuple ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
