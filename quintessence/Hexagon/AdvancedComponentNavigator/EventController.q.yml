properties:


  - name: component
    type: Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator*
    init_with: nullptr
    constructor_arg: true
  - name: event_dictionary
    type: std::map<std::string, std::function<void(AdvancedComponentNavigator&)>>
    init_with: '{}'
    constructor_arg: true


functions:


  - name: process_local_event
    guards: [ component ]
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: 'ActionData()'
    body: |
      using Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator;
      AdvancedComponentNavigator &component = *this->component;

      std::map<std::string, std::function<void(AdvancedComponentNavigator&)>>::iterator it =
         event_dictionary.find(event_name);
      if (it == event_dictionary.end())
      {
         std::stringstream error_message;
         error_message << "AdvancedComponentNavigator::EventController::process_local_event: error: "
                       << "No local event named \"" << event_name << "\" exists.";
         throw std::runtime_error(error_message.str());
      }
      else
      {
         std::stringstream info_message;
         info_message << "AdvancedComponentNavigator::EventController::process_local_event: info: "
                      << "handling event named \"" << event_name << "\": ";
         std::cout << info_message.str() << std::endl;

         event_dictionary[event_name](component);

         std::stringstream info_message2;
         info_message2 << "AdvancedComponentNavigator::EventController::process_local_event: info: "
                      << "handled event named \"" << event_name << "\".";
         std::cout << info_message2.str() << std::endl;
      }

      return;
    body_dependency_symbols:
      - std::map<std::string, std::function>
      - Hexagon::AdvancedComponentNavigator::EventController
      - std::cout


dependencies:


  - symbol:  std::map<std::string, std::function<void(AdvancedComponentNavigator&)>>
    headers: [ map, string, functional, Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.hpp ]
  - symbol: std::map<std::string, std::function>
    headers: [ map, string, functional ]
  - symbol: Hexagon::AdvancedComponentNavigator::AdvancedComponentNavigator*
    headers: [ Hexagon/AdvancedComponentNavigator/AdvancedComponentNavigator.hpp ]
  - symbol: Hexagon::AdvancedComponentNavigator::EventController
    headers: [ Hexagon/AdvancedComponentNavigator/EventController.hpp ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]


