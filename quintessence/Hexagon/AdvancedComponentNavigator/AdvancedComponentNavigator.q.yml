properties:



  - name: project_root
    type: std::string
    init_with: '"/Users/markoates/Repos/hexagon/"'
    constructor_arg: true
    getter: true
    setter: true

  - name: cursor_position
    type: int
    getter: true
    init_with: 0

  - name: cursor_position_static
    type: bool
    getter: true
    setter: true
    init_with: false

  - name: nodes
    type: std::vector<Blast::Project::Component>
    init_with: "{}"
    getter: true
    setter: true

  - name: mode
    type: std::string
    init_with: '"navigating_list"'
    getter: true
    setter: true

  - name: search_text
    type: std::string
    init_with: '""'
    getter: true
    setter: true



functions:



  - name: is_mode_navigating_list
    type: bool
    body: |
      return this->mode == "navigating_list";



  - name: is_mode_typing_in_search_bar
    type: bool
    body: |
      return this->mode == "typing_in_search_bar";



  - name: move_cursor_up
    type: void
    body: |
      cursor_position -= 1;



  - name: move_cursor_down
    type: void
    body: |
      cursor_position += 1;



  - name: move_cursor_to_top
    type: void
    body: |
      cursor_position = 0;



  - name: current_selection_is_valid
    type: bool
    body: |
      if (cursor_position < 0 || cursor_position >= nodes.size()) return false;
      return true;



  - name: set_mode_to_navigating_list
    type: void
    body: |
      this->mode = "navigating_list";



  - name: set_mode_to_typing_in_search_bar
    type: void
    body: |
      this->mode = "typing_in_search_bar";



  - name: get_current_selection_label_or_empty_string
    type: std::string
    body: |
      if (!current_selection_is_valid()) return "";
      return nodes[get_cursor_position()].get_name();



  - name: refresh_list
    body: |
      Hexagon::AdvancedComponentNavigator::ComponentSearcher searcher(get_project_root(), search_text);
      nodes = searcher.components_sorted_by_most_recent();
    body_dependency_symbols:
      - Hexagon::AdvancedComponentNavigator::ComponentSearcher



  - name: yank_selected_text_label
    type: void
    guard: [ current_selection_is_valid() ]
    body: |
      std::string selected_text = get_current_selection_label_or_empty_string();
      ClipboardData::store(selected_text);
    body_dependency_symbols:
      - ClipboardData::store



  - name: yank_selected_text_as_component_name
    type: void
    guard: [ current_selection_is_valid() ]
    body: |
      std::string selected_text = get_current_selection_label_or_empty_string();
      std::string filtered_text = php::str_replace("/", "::", selected_text);
      ClipboardData::store(filtered_text);
    body_dependency_symbols:
      - php::str_replace
      - ClipboardData::store


  - name: yank_selected_text_as_include_directive
    type: void
    guard: [ current_selection_is_valid() ]
    body: |
      std::string selected_text = get_current_selection_label_or_empty_string();
      std::string filtered_text = "#include <" + selected_text + ".hpp>";
      ClipboardData::store(filtered_text);
    body_dependency_symbols:
      - ClipboardData::store


  - name: yank_selected_text_as_quintessence_dependency_lines
    type: void
    guard: [ current_selection_is_valid() ]
    body: |
      std::string selected_text = get_current_selection_label_or_empty_string();
      std::string symbol_text = selected_text;
      symbol_text = php::str_replace("/", "::", symbol_text);
      std::string headers_text = "    headers: [ " + selected_text + ".hpp ]";

      std::string text_for_clipboard = "  - symbol: " + symbol_text + "\n" + headers_text; // TODO clean this up

      ClipboardData::store(text_for_clipboard);
    body_dependency_symbols:
      - ClipboardData::store


  - name: yank_selected_text_as_public_parent_class_lines
    type: void
    guard: [ current_selection_is_valid() ]
    body: |
      std::string selected_text = get_current_selection_label_or_empty_string();
      std::string symbol_text = selected_text;
      symbol_text = php::str_replace("/", "::", symbol_text);
      std::string text_for_clipboard = "  - class: " + symbol_text + "\n"
                                     + "    scope: public\n"
                                     + "    init_with: ''\n";

      ClipboardData::store(text_for_clipboard);
    body_dependency_symbols:
      - ClipboardData::store

dependencies:


  - symbol: php::str_replace
    headers: [ allegro_flare/useful_php.h ]
  - symbol: Hexagon::AdvancedComponentNavigator::ComponentSearcher
    headers: [ 'Hexagon/AdvancedComponentNavigator/ComponentSearcher.hpp' ]
  - symbol: std::vector<Blast::Project::Component>
    headers: [ vector, Blast/Project/Component.hpp ]
  - symbol: ClipboardData::store
    headers: [ Hexagon/ClipboardData.hpp ]


