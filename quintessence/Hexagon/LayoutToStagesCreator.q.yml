properties:

  - name: stages
    type: std::vector<StageInterface *>*
    constructor_arg: true
    init_with: nullptr
    getter: true
    setter: true
  - name: concept_name
    type: std::string
    init_with: '"- Untitled -"'
    constructor_arg: true
    getter: true
    setter: true
  - name: files
    type: std::vector<std::tuple<std::string, std::string, placement3d>>
    init_with: '{}'
    constructor_arg: true
    getter: true
    setter: true
  - name: daemus_command
    type: std::string
    init_with: '""'
    constructor_arg: true
    getter: true
  - name: layout
    type: Hexagon::Layout*
    init_with: '{}'
    constructor_arg: true
  - name: code_editor_height
    type: int
    init_with: 1350
    constructor_arg: true
    getter: true
  - name: code_editor_width
    type: int
    init_with: 1215
    constructor_arg: true
    getter: true
  - name: text_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f}
    constructor_arg: true
  - name: backfill_color
    type: ALLEGRO_COLOR
    init_with: ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f}
    constructor_arg: true

functions:

  - name: place_and_load_code_editor
    private: true
    type: bool
    parameters:
      - name: filename
        type: std::string
        default_argument: '""'
      - name: file_category
        type: std::string
        default_argument: '"undefined_file_category"'
      - name: place
        type: placement3d
        default_argument: '{}'
    guards: [ stages, layout ]
    body: |
      bool file_exists = Blast::FileExistenceChecker(filename).exists();

      StageInterface *stage = nullptr;

      if (file_exists)
      {
         Hexagon::CodeEditor::Stage *code_editor_stage = new Hexagon::CodeEditor::Stage({filename, file_category});
         std::string file_contents = php::file_get_contents(filename);
         code_editor_stage->get_code_editor_ref().set_initial_content(file_contents);
         code_editor_stage->set_base_font_color(text_color);
         code_editor_stage->set_backfill_color(backfill_color);

         stage = code_editor_stage;
      }
      else
      {
         stage = new Hexagon::MissingFile::Stage(filename);
      }

      stage->set_place(place);
      stages->push_back(stage);

      return true;
    body_dependency_symbols:
      - php::file_get_contents
      - Hexagon::CodeEditor::Stage
      - Blast::FileExistenceChecker
      - Hexagon::MissingFile::Stage

  - name: create
    body: |
      for (auto &file : layout->get_files())
      {
         std::string filename = std::get<0>(file);
         std::string file_type = std::get<1>(file);
         placement3d place = std::get<2>(file);

         place_and_load_code_editor(filename, file_type, place);
      }
      return;

dependencies:

  - symbol: Hexagon::Layout*
    headers: [ Hexagon/Layout.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: std::vector<std::tuple<std::string, std::string, placement3d>>
    headers: [ vector, string, allegro_flare/placement3d.h ]
  - symbol: std::vector<StageInterface *>
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>&
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: std::vector<StageInterface *>*
    headers: [ vector, Hexagon/StageInterface.hpp ]
  - symbol: php::file_get_contents
    headers: [ allegro_flare/useful_php.h ]
  - symbol: Hexagon::CodeEditor::Stage
    headers: [ Hexagon/CodeEditor/Stage.hpp ]
  - symbol: Hexagon::MissingFile::Stage
    headers: [ Hexagon/MissingFile/Stage.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]

