properties:
  - name: component
    type: Blast::Project::Component*
    init_with: nullptr
    constructor_arg: true
functions:
  - name: guard_nullptr_component
    private: true
    type: void
    parameters:
      - name: function_name
        type: std::string
        default_argument: "\"unset_function_name\""
    body: |
      if (!component)
      {
         std::stringstream error_message;
         error_message << "[ComponentElasticsearchIndex error:] can not "
                       << "\"" << function_name << "\""
                       << " on a nullptr component";
         throw std::runtime_error(error_message.str());
      }
      return;
  - name: generate_uid
    type: std::string
    body: |
      std::string delimiter = ":";
      return component->get_project_root() + delimiter + component->get_name();
  - name: import_or_update
    type: bool
    body: |
      guard_nullptr_component(__FUNCTION__);

      // this is the mapping for reference:
      //
      //"uid": { "type": "keyword" },
      //"id": { "type": "keyword" },
      //"project": { "type": "keyword" },
      //"name": { "type": "text" },
      //"content": { "type": "text" }

      nlohmann::json document_as_json = {
        { "uid", generate_uid() }
      };

      return true;
    body_dependency_symbols:
      - std::stringstream
      - Blast::Project::Component*
      - Blast::ShellCommandExecutorWithCallback
      - nlohmann::json
dependencies:
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: nlohmann::json
    headers: [ lib/nlohmann/json.hpp ]
  - symbol: Blast::Project::Component*
    headers: [ Blast/Project/Component.hpp ]

