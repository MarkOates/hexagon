properties:


  - name: stage
    type: Hexagon::AdvancedCodeEditor::Stage*
    init_with: nullptr
    constructor_arg: true
  - name: events_dictionary
    type: std::map<std::string, std::function<void(Hexagon::AdvancedCodeEditor::Stage&)>>
    init_with: '{}'
    getter_ref: true
    constructor_arg: true
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true


functions:


  - name: process_local_event
    type: void
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    guards: [ stage ]
    body: |
      Hexagon::AdvancedCodeEditor::Stage &component = *stage;

      std::map<std::string, std::function<void(Hexagon::AdvancedCodeEditor::Stage&)>>::iterator it =
         events_dictionary.find(event_name);
      if (it == events_dictionary.end())
      {
         std::stringstream error_message;
         error_message << "AdvancedCodeEditor::EventController::process_local_event: error: "
                       << "No local event named \"" << event_name << "\" exists.";
         throw std::runtime_error(error_message.str());
      }
      else
      {
         events_dictionary[event_name](component);
      }

      return;


  - name: process_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      return;


dependencies:


  - symbol: Hexagon::AdvancedCodeEditor::Stage*
    headers: [ Hexagon/AdvancedCodeEditor/Stage.hpp ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: std::map<std::string, std::function<void(Hexagon::AdvancedCodeEditor::Stage&)>>
    headers: [ map, string, functional, Hexagon/AdvancedCodeEditor/Stage.hpp ]
