properties:


  - name: stage
    type: Hexagon::AdvancedCodeEditor::Stage*
    init_with: nullptr
    constructor_arg: true

  - name: events_dictionary
    type: std::map<std::string, std::function<void(Hexagon::AdvancedCodeEditor::Stage&)>>
    init_with: '{}'
    getter_ref: true
    constructor_arg: true

  - name: keyboard_command_mapping
    type: KeyboardCommandMapper
    init_with: '{}'
    constructor_arg: true

  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true


functions:


  - name: process_local_event
    type: void
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    guards: [ stage ]
    body: |
      Hexagon::AdvancedCodeEditor::Stage &component = *stage;

      std::map<std::string, std::function<void(Hexagon::AdvancedCodeEditor::Stage&)>>::iterator it =
         events_dictionary.find(event_name);
      if (it == events_dictionary.end())
      {
         std::stringstream error_message;
         error_message << "AdvancedCodeEditor::EventController::process_local_event: error: "
                       << "No local event named \"" << event_name << "\" exists.";
         throw std::runtime_error(error_message.str());
      }
      else
      {
         std::cout << "AdvancedCodeEditor::" << event_name << std::endl;

         bool caught = false;
         std::string caught_name = "";
         std::string caught_what = "";

         try
         {
            events_dictionary[event_name](component);
         }
         // TODO complete list of possible exceptions to catch at https://en.cppreference.com/w/cpp/error/exception
         catch (const std::logic_error &exception)
         {
            caught = true;
            caught_name = "std::logic_error";
            caught_what = exception.what();
         }
         catch (const std::exception &exception)
         {
            caught = true;
            caught_name = "std::exception";
            caught_what = exception.what();
         }

         if (caught)
         {
            // TODO make this error message output in red
            std::cout << ">>BOOM<< an unexpected exception was thrown, cannot execute \""
                      << event_name
                      << "\". The exception was thrown with the following information returned:"
                      << std::endl << "   exception_type: " << caught_name
                      << std::endl << "   exception_what: " << caught_what
                      << std::endl;
         }
      }

      return;








         //try
         //{
         //   std::cout << "System::EventController::" << event_name << std::endl;

         //   // could use the iterator element found via the find() call above, rather than doing a new lookup
         //   std::function<bool(::System&)> function_to_be_called = event_function_mapping[event_name];
         //   bool function_returned_true_from_execution = function_to_be_called(*system);
         //   if (!function_returned_true_from_execution)
         //   {
         //      // TODO: add some throwing code here
         //   }
         //   return;
         //}
         //catch (const std::exception &exception)
         //{
         //   std::cout << ">BOOM< cannot execute \""
         //             << event_name
         //             << "\".  The following exception occurred: "
         //             << exception.what()
         //             << std::endl;

         //   std::stringstream error_message;
         //   error_message << "An exception was thrown: \"" << exception.what() << "\"";
         //   add_notification(error_message.str());
         //}











  - name: process_event
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    guards: [ stage ]
    body: |
      switch(event.type)
      {
      case ALLEGRO_EVENT_KEY_DOWN:
         break;
      case ALLEGRO_EVENT_KEY_UP:
         break;
      case ALLEGRO_EVENT_KEY_CHAR:
         bool shift = event.keyboard.modifiers & ALLEGRO_KEYMOD_SHIFT;
         bool ctrl = event.keyboard.modifiers & ALLEGRO_KEYMOD_CTRL;
         bool command = event.keyboard.modifiers & ALLEGRO_KEYMOD_COMMAND;
         bool alt = event.keyboard.modifiers & ALLEGRO_KEYMOD_ALT;
         std::vector<std::string> mapped_events =
            keyboard_command_mapping.get_mapping(event.keyboard.keycode, shift, ctrl, alt, command);
         for (auto &mapped_event : mapped_events) process_local_event(mapped_event);

         if (stage->is_in_insert_mode())
         {
            if (mapped_events.empty()) // TODO: I'm not sure what the purpose of this section is
            {
               char character = (char)(event.keyboard.unichar);
               stage->get_input_buffer_ref() = " ";
               stage->get_input_buffer_ref()[0] = character;
               process_local_event("insert_string_from_input_buffer");
               process_local_event("cursor_move_right");
            }
            return;
         }
      }


dependencies:


  - symbol: Hexagon::AdvancedCodeEditor::Stage*
    headers: [ Hexagon/AdvancedCodeEditor/Stage.hpp ]
  - symbol: KeyboardCommandMapper
    headers: [ AllegroFlare/KeyboardCommandMapper.hpp ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: std::map<std::string, std::function<void(Hexagon::AdvancedCodeEditor::Stage&)>>
    headers: [ map, string, functional, Hexagon/AdvancedCodeEditor/Stage.hpp ]
