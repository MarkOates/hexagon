parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "StageInterface::ADVANCED_CODE_EDITOR"


properties:


  - name: place
    type: placement3d
    init_with: '0.0f, 0.0f, 0.0f'
  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: text_mesh
    type: Hexagon::Elements::TextMesh
    init_with: '{}'
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ font_bin ]
    body: |
      // TODO: check if font_bin has been initialized
      if (initialized) return;

      initialized = true;
      return;


  - name: render
    virtual: true
    override: true
    guards: [ al_is_system_installed(), initialized ]
    body: |
      Hexagon::AdvancedCodeEditor::Renderer renderer(this);

      place.start_transform();
      renderer.render();
      place.restore_transform();

      return;
    body_dependency_symbols:
      - Hexagon::AdvancedCodeEditor::Renderer


  - name: process_local_event
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      return;


  - name: process_event
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      return;


dependencies:


  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Renderer
    headers: [ Hexagon/AdvancedCodeEditor/Renderer.hpp ]
  - symbol: Hexagon::Elements::TextMesh
    headers: [ Hexagon/Elements/TextMesh.hpp ]
