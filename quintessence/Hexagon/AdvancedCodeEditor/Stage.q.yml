parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "StageInterface::ADVANCED_CODE_EDITOR"


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: num_columns
    type: int
    init_with: 0
    constructor_arg: true
  - name: num_rows
    type: int
    init_with: 0
    constructor_arg: true
  - name: __lines
    type: std::vector<std::string>
    init_with: '{}'
    getter: true
  - name: text_mesh
    type: Hexagon::Elements::TextMesh
    init_with: '{nullptr, num_columns, num_rows}'
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
  - name: initialized
    type: bool
    init_with: false
  - name: advanced_code_editor
    type: Hexagon::AdvancedCodeEditor::AdvancedCodeEditor
    init_with: '{}'
    getter_ref: true


functions:


  - name: get_lines
    type: std::vector<std::string>
    body: |
      return advanced_code_editor.get_lines();


  - name: get_cursor_ref
    type: Hexagon::AdvancedCodeEditor::Cursor&
    body: |
      return advanced_code_editor.get_cursor_ref();


  - name: delete_character
    type: bool
    body: |
      return advanced_code_editor.delete_character();


  - name: join_lines
    type: bool
    body: |
      return advanced_code_editor.join_lines();


  - name: split_lines
    type: bool
    body: |
      // TODO
      return false;


  - name: delete_line
    type: bool
    body: |
      // TODO
      return false;


  - name: insert_lines
    type: bool
    body: |
      // TODO
      return false;


  - name: insert_string
    type: bool
    parameters:
      - name: string
        type: std::string
        default_argument: '""'
    body: |
      return advanced_code_editor.insert_string(string);


  - name: insert_three_spaces_at_start_of_line
    type: bool
    body: |
      // TODO
      return false;


  - name: cursor_move_up
    type: bool
    body: |
      advanced_code_editor.cursor_move_up();
      return true;


  - name: cursor_move_down
    type: bool
    body: |
      advanced_code_editor.cursor_move_down();
      return true;


  - name: cursor_move_left
    type: bool
    body: |
      advanced_code_editor.cursor_move_left();
      return true;


  - name: cursor_move_right
    type: bool
    body: |
      advanced_code_editor.cursor_move_right();
      return true;


  - name: cursor_move_to
    type: bool
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      advanced_code_editor.cursor_move_to(x, y);
      return true;


  - name: initialize
    guards: [ al_is_system_installed(), font_bin ]
    body: |
      if (initialized) return;

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();

      text_mesh.set_font(obtain_text_font());
      text_mesh.initialize();

      cursor.set_width(text_mesh.get_cell_width());
      cursor.set_height(text_mesh.get_cell_height());

      initialized = true;
      return;


  - name: set_content
    parameters:
      - name: content
        type: std::string
        default_argument: '""'
    guards: [ initialized ]
    body: |
      advanced_code_editor.set_content(content);
      refresh_text_mesh();
      return;
    body_dependency_symbols:
      - Blast::StringSplitter


  - name: render
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      Hexagon::AdvancedCodeEditor::Renderer renderer(
         &text_mesh,
         &advanced_code_editor.get_cursor_ref(),
         get_place().size.x,
         get_place().size.y
      );

      get_place().start_transform();
      renderer.render();
      get_place().restore_transform();

      return;
    body_dependency_symbols:
      - Hexagon::AdvancedCodeEditor::Renderer


  - name: process_local_event
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      Hexagon::AdvancedCodeEditor::EventController event_controller(this);
      event_controller.process_local_event(event_name, action_data);
      return;
    body_dependency_symbols:
      - Hexagon::AdvancedCodeEditor::EventController


  - name: process_event
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      Hexagon::AdvancedCodeEditor::EventController event_controller;
      event_controller.process_event(event);
      return;
    body_dependency_symbols:
      - Hexagon::AdvancedCodeEditor::EventController


  - name: obtain_text_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Menlo-Regular.ttf -30");


  - name: is_cursor_in_bounds
    private: true
    type: bool
    body: |
      return advanced_code_editor.is_cursor_in_bounds();


  - name: is_cursor_on_last_line
    private: true
    type: bool
    body: |
      return advanced_code_editor.is_cursor_on_last_line();


  - name: refresh_text_mesh
    private: true
    guards: [ initialized ]
    body: |
      char clear_char = '\0';
      ALLEGRO_COLOR clear_color = ALLEGRO_COLOR{0.0f, 0.0f, 0.0f, 0.0f};
      ALLEGRO_COLOR on_color = ALLEGRO_COLOR{1.0f, 1.0f, 1.0f, 1.0f};
      std::vector<std::string> &lines = advanced_code_editor.get_lines_ref();

      for (unsigned y=0; y<num_rows; y++)
      {
         for (unsigned x=0; x<num_columns; x++)
         {
            char char_to_set = clear_char;
            ALLEGRO_COLOR color_to_set = clear_color;

            if (y < lines.size())
            {
               if (x < lines[y].size())
               {
                  char_to_set = lines[y][x];
                  color_to_set = on_color;
               }
            }

            text_mesh.set_cell_character(x, y, char_to_set);
            text_mesh.set_cell_color(x, y, color_to_set);
         }
      }
      return;


dependencies:


  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::AdvancedCodeEditor
    headers: [ Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Renderer
    headers: [ Hexagon/AdvancedCodeEditor/Renderer.hpp ]
  - symbol: Hexagon::Elements::TextMesh
    headers: [ Hexagon/Elements/TextMesh.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Cursor
    headers: [ Hexagon/AdvancedCodeEditor/Cursor.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Cursor&
    headers: [ Hexagon/AdvancedCodeEditor/Cursor.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::EventController
    headers: [ Hexagon/AdvancedCodeEditor/EventController.hpp ]
