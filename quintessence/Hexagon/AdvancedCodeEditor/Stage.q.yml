parent_classes:


  - class: 'StageInterface'
    scope: public
    init_with: "StageInterface::ADVANCED_CODE_EDITOR"


properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
  - name: num_columns
    type: int
    init_with: 0
    constructor_arg: true
  - name: num_rows
    type: int
    init_with: 0
    constructor_arg: true
  - name: advanced_code_editor
    type: Hexagon::AdvancedCodeEditor::AdvancedCodeEditor
    init_with: '{}'
  - name: text_mesh
    type: Hexagon::Elements::TextMesh
    init_with: '{nullptr, num_columns, num_rows}'
  - name: a_default_empty_event
    static: true
    type: ALLEGRO_EVENT
    init_with: "{}"
    getter_ref: true
  - name: initialized
    type: bool
    init_with: false


functions:


  - name: initialize
    guards: [ font_bin ]
    body: |
      if (initialized) return;

      text_mesh.set_font(obtain_text_font());
      text_mesh.initialize();

      initialized = true;
      return;


  - name: set_initial_content
    parameters:
      - name: content
        type: std::string
        default_argument: '""'
    body: |
      //advanced_code_editor.set_initial_content(content);

      std::vector<std::string> lines = Blast::StringSplitter(content, '\n').split();
      int y=0;
      for (auto &line : lines)
      {
         int x=0;
         for (auto &character : line)
         {
            text_mesh.set_cell_character(x, y, character);
            x++;
         }
         y++;
      }

      return;
    body_dependency_symbols:
      - Blast::StringSplitter


  - name: render
    virtual: true
    override: true
    guards: [ al_is_system_installed(), initialized ]
    body: |
      Hexagon::AdvancedCodeEditor::Renderer renderer(
         &text_mesh
      );

      get_place().start_transform();
      renderer.render();
      get_place().restore_transform();

      return;
    body_dependency_symbols:
      - Hexagon::AdvancedCodeEditor::Renderer


  - name: process_local_event
    virtual: true
    override: true
    parameters:
      - name: event_name
        type: std::string
        default_argument: '""'
      - name: action_data
        type: ActionData
        default_argument: "ActionData()"
    body: |
      return;


  - name: process_event
    virtual: true
    override: true
    parameters:
      - name: event
        type: ALLEGRO_EVENT&
        default_argument: "get_a_default_empty_event_ref()"
    body: |
      return;


  - name: obtain_text_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Menlo-Regular.ttf -30");


dependencies:


  - symbol: StageInterface
    headers: [ Hexagon/StageInterface.hpp ]
  - symbol: placement3d
    headers: [ allegro_flare/placement3d.h ]
  - symbol: AllegroFlare::FontBin*
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT&
    headers: [ allegro5/allegro.h ]
  - symbol: ActionData
    headers: [ Hexagon/ActionData.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::AdvancedCodeEditor
    headers: [ Hexagon/AdvancedCodeEditor/AdvancedCodeEditor.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Renderer
    headers: [ Hexagon/AdvancedCodeEditor/Renderer.hpp ]
  - symbol: Hexagon::Elements::TextMesh
    headers: [ Hexagon/Elements/TextMesh.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
