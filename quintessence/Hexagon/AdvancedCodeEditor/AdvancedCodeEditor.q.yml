properties:


  - name: lines
    type: std::vector<std::string>
    init_with: '{}'
    getter: true
    getter_ref: true
  - name: cursor
    type: Hexagon::AdvancedCodeEditor::Cursor
    init_with: '{}'
    getter_ref: true


functions:


  - name: set_content
    type: bool
    parameters:
      - name: content
        type: std::string
        default_argument: '""'
    body: |
      lines = Blast::StringSplitter(content, '\n').split();
      return true;
    body_dependency_symbols:
      - Blast::StringSplitter


  - name: insert_string
    type: bool
    parameters:
      - name: string
        type: std::string
        default_argument: '""'
    body: |
      if (!is_cursor_in_bounds()) return false;

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      std::vector<std::string> &lines = get_lines_ref();

      lines[cursor.get_y()].insert(cursor.get_x(), string);
      return true;


  - name: delete_character
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      std::vector<std::string> &lines = get_lines_ref();

      lines[cursor.get_y()].erase(cursor.get_x(), 1);
      return true;


  - name: join_lines
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;
      if (is_cursor_on_last_line()) return false;

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      std::vector<std::string> &lines = get_lines_ref();

      lines[cursor.get_y()] += lines[cursor.get_y()+1];
      lines.erase(lines.begin() + cursor.get_y()+1);

      return true;


  - name: split_lines
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      lines.insert(lines.begin() + cursor.get_y() + 1, lines[cursor.get_y()].substr(cursor.get_x()));
      std::string &current_line = lines[cursor.get_y()];
      current_line.erase(cursor.get_x());
      return true;


  - name: delete_line
    type: bool
    body: |
      if (cursor.get_y() < 0 || cursor.get_y() >= lines.size()) return false;

      lines.erase(lines.begin()+cursor.get_y());
      return true;


  - name: insert_lines
    type: bool
    parameters:
      - name: lines_to_insert
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      int range_safe_y = std::min(std::max(0, cursor.get_y()), (int)lines.size());
      lines.insert(lines.begin() + range_safe_y, lines_to_insert.begin(), lines_to_insert.end());
      return true;
    body_dependency_symbols:
      - std::max


  - name: cursor_set_width
    type: bool
    parameters:
      - name: width
        type: float
        default_argument: 0.0f
    body: |
      cursor.set_width(width);
      return true;


  - name: cursor_set_height
    type: bool
    parameters:
      - name: height
        type: float
        default_argument: 0.0f
    body: |
      cursor.set_height(height);
      return true;


  - name: cursor_move_up
    type: bool
    body: |
      cursor.move_up();
      return true;


  - name: cursor_move_down
    type: bool
    body: |
      cursor.move_down();
      return true;


  - name: cursor_move_left
    type: bool
    body: |
      cursor.move_left();
      return true;


  - name: cursor_move_right
    type: bool
    body: |
      cursor.move_right();
      return true;


  - name: cursor_move_to_start_of_line
    type: bool
    body: |
      cursor.set_x(0);
      return true;


  - name: cursor_move_to
    type: bool
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      cursor.move_to(x, y);
      return true;


  - name: cursor_set_x
    type: bool
    parameters:
      - name: x
        type: int
        default_argument: 0
    body: |
      cursor.set_x(x);
      return true;


  - name: cursor_set_y
    type: bool
    parameters:
      - name: y
        type: int
        default_argument: 0
    body: |
      cursor.set_y(y);
      return true;


  - name: cursor_get_x
    type: int
    body: |
      return cursor.get_x();


  - name: cursor_get_y
    type: int
    body: |
      return cursor.get_y();


  - name: is_cursor_in_bounds
    private: true
    type: bool
    body: |
      if (cursor.get_y() >= lines.size()) return false;
      if (cursor.get_y() < 0) return false;
      if (cursor.get_x() >= lines[cursor.get_y()].size()) return false;
      return true;


  - name: is_cursor_on_last_line
    private: true
    type: bool
    body: |
      if (lines.empty()) return false;
      return cursor.get_y() == (lines.size() - 1);


dependencies:


  - symbol: std::vector<std::string>&
    headers: [ vector, string ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Cursor
    headers: [ Hexagon/AdvancedCodeEditor/Cursor.hpp ]
  - symbol: std::max
    header: [ algorithm ]

