properties:


  - name: lines
    type: std::vector<std::string>
    init_with: '{}'
    getter: true
    getter_ref: true

  - name: cursor
    type: Hexagon::AdvancedCodeEditor::Cursor
    init_with: '{}'
    getter_ref: true

  - name: dirty_grid
    type: Hexagon::DirtyGrid
    init_with: '{}'

  - name: SPLIT_LINE_DELIMITER_CHAR
    type: char
    init_with: "'\\n'"

  - name: content_is_modified
    type: bool
    init_with: false
    getter: true


methods:


  - name: get_select_lines
    type: std::map<int, std::string>
    parameters:
      - name: line_indices
        type: std::vector<int>
        default_argument: '{}'
    body: |
      std::map<int, std::string> result_lines;
      for (auto &line_index : line_indices)
      {
         if (line_index < 0 || line_index >= lines.size())
         {
            // do not include null lines in the result
            //result_lines[line_index] = "";
         }
         else
         {
            result_lines[line_index] = lines[line_index];
         }
      }
      return result_lines;


  - name: mark_content_is_modified
    private: true
    body: |
      content_is_modified = true;
      return;


  - name: unmark_content_is_modified
    body: |
      content_is_modified = false;
      return;


  - name: get_num_lines
    type: int
    body: |
      return lines.size();


  - name: set_content
    type: bool
    parameters:
      - name: content
        type: std::string
        default_argument: '""'
    body: |
      dirty_grid.mark_all_as_dirty(&lines);
      lines = Blast::StringSplitter(content, SPLIT_LINE_DELIMITER_CHAR).split();
      dirty_grid.mark_all_as_dirty(&lines);
      mark_content_is_modified();
      return true;
    body_dependency_symbols:
      - Blast::StringSplitter


  - name: insert_string
    type: bool
    parameters:
      - name: string
        type: std::string
        default_argument: '""'
    body: |
      if (cursor.get_y() >= lines.size()) return false;
      if (cursor.get_y() < 0) return false;
      if (cursor.get_x() > lines[cursor.get_y()].size()) return false;

      // Prevent insertion of newline '\n' characters
      std::vector<char> non_permitted_chars = { '\n', '\r' }; 
      for (auto &non_permitted_char : non_permitted_chars)
      {
         if (string.find(non_permitted_char) != std::string::npos)
         {
            std::stringstream error_message;
            error_message << "Hexagon::AdvancedCodeEditor::AdvancedCodeEditor::insert_string() error: "
                          << "Inserted string can not contain newline characters. You will need to first split lines "
                          << "and insert them via insert_lines() if you wish to insert multiple lines.";
            throw std::runtime_error(error_message.str());
         }
      }

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      std::vector<std::string> &lines = get_lines_ref();

      lines[cursor.get_y()].insert(cursor.get_x(), string);

      dirty_grid.mark_row_as_dirty(cursor.get_y(), cursor.get_x(), lines[cursor.get_y()].length() - cursor.get_x());
      mark_content_is_modified();

      return true;
    body_dependency_symbols:
      - std::stringstream


  - name: delete_character
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      std::vector<std::string> &lines = get_lines_ref();

      lines[cursor.get_y()].erase(cursor.get_x(), 1);

      dirty_grid.mark_row_as_dirty(cursor.get_y(), cursor.get_x(), lines[cursor.get_y()].length() + 2 - cursor.get_x());
      mark_content_is_modified();

      return true;


  - name: delete_to_end_of_line
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      std::vector<std::string> &lines = get_lines_ref();

      lines[cursor.get_y()].erase(cursor.get_x());

      dirty_grid.mark_row_as_dirty(cursor.get_y(), cursor.get_x()+1, lines[cursor.get_y()].length()+1 - cursor.get_x());
      mark_content_is_modified();

      return true;


  - name: join_lines
    type: bool
    body: |
      if (!is_cursor_in_vertical_bounds()) return false;
      if (is_cursor_on_last_line()) return false;

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      std::vector<std::string> &lines = get_lines_ref();

      // from a start position equal to the length of current line, with the length of line below
      dirty_grid.mark_row_as_dirty(cursor.get_y(), lines[cursor.get_y()].length(), lines[cursor.get_y()+1].length());

      // all of the lines below the current line, before change
      for (int row=(cursor.get_y()+1); row<lines.size(); row++)
      {
         dirty_grid.mark_row_as_dirty(row, 0, lines[row].length());
      }

      lines[cursor.get_y()] += lines[cursor.get_y()+1];
      lines.erase(lines.begin() + cursor.get_y()+1);

      // all of the lines below the current line, after change
      for (int row=(cursor.get_y()+1); row<lines.size(); row++)
      {
         dirty_grid.mark_row_as_dirty(row, 0, lines[row].length());
      }

      mark_content_is_modified();

      return true;


  - name: split_lines
    type: bool
    body: |
      if (!is_cursor_in_vertical_bounds()) return false;

      int current_line_length = lines[cursor.get_y()].length();

      int virtual_cursor_x = cursor.get_x();
      if (virtual_cursor_x > current_line_length) virtual_cursor_x = current_line_length;
      if (virtual_cursor_x < 0) virtual_cursor_x = 0;

      // mark dirty: cells from the curent x, y, to the end of the line
      dirty_grid.mark_row_as_dirty(cursor.get_y(), virtual_cursor_x, current_line_length - virtual_cursor_x);

      //// mark dirty: all of the lines below the current line, before change
      for (int row=(cursor.get_y()+1); row<lines.size(); row++)
      {
         dirty_grid.mark_row_as_dirty(row, 0, lines[row].length());
      }

      // insert the actual new line into lines, initializing the content with a substring from the original line
      lines.insert(lines.begin() + cursor.get_y() + 1, lines[cursor.get_y()].substr(virtual_cursor_x));

      // erase characters from the original line, up to the point where cursor was placed
      std::string &current_line = lines[cursor.get_y()];
      current_line.erase(virtual_cursor_x);

      // mark dirty: all of the lines below the current line, after change
      for (int row=(cursor.get_y()+1); row<lines.size(); row++)
      {
         dirty_grid.mark_row_as_dirty(row, 0, lines[row].length());
      }

      mark_content_is_modified();

      return true;


  - name: replace_line
    type: bool
    parameters:
      - name: content
        type: std::string
        default_argument: '"[unset-content]"'
    body: |
      if (cursor.get_y() < 0 || cursor.get_y() >= lines.size()) return false;

      std::vector<char> non_permitted_chars = { '\n', '\r' };
      for (auto &non_permitted_char : non_permitted_chars)
      {
         if (content.find(non_permitted_char) != std::string::npos)
         {
            std::stringstream error_message;
            error_message << "Hexagon::AdvancedCodeEditor::AdvancedCodeEditor::replace_line() error: "
                          << "Inserted lines can not contain newline characters. The following lines were "
                          << "passed to replace_line():" << std::endl
                          << "=========BEGIN=========" << std::endl;
            for (auto &line : content)
            {
               error_message << line << std::endl;
            }
            error_message << "==========END=========" << std::endl;
            throw std::runtime_error(error_message.str());
         }
      }

      int longest_line_length = std::max(content.size(), lines[cursor.get_y()].size());

      lines[cursor.get_y()] = content;

      dirty_grid.mark_row_as_dirty(cursor.get_y(), 0, longest_line_length);

      mark_content_is_modified();

      return true;
    body_dependency_symbols:
      - std::max


  - name: delete_line
    type: bool
    body: |
      if (cursor.get_y() < 0 || cursor.get_y() >= lines.size()) return false;

      // from the current line down, from 0 to the longer of itself and the length of the line below it
      for (int row=cursor.get_y(); row<(lines.size() - 1); row++)
      {
         int longest_length = std::max(lines[row].length(), lines[row + 1].length());
         dirty_grid.mark_row_as_dirty(row, 0, longest_length);
      }

      // append the last line
      if (!lines.empty())
      {
         dirty_grid.mark_row_as_dirty(lines.size()-1, 0, lines[lines.size()-1].length());
      }

      lines.erase(lines.begin()+cursor.get_y());
      mark_content_is_modified();

      return true;
    body_dependency_symbols:
      - std::max


  - name: insert_lines
    type: bool
    parameters:
      - name: lines_to_insert
        type: std::vector<std::string>
        default_argument: '{}'
    body: |
      // Scan each line and prevent insertion of newline ('\n', '\r') characters
      for (auto &line_to_insert : lines_to_insert)
      {
         std::vector<char> non_permitted_chars = { '\n', '\r' };
         for (auto &non_permitted_char : non_permitted_chars)
         {
            if (line_to_insert.find(non_permitted_char) != std::string::npos)
            {
               std::stringstream error_message;
               error_message << "Hexagon::AdvancedCodeEditor::AdvancedCodeEditor::insert_lines() error: "
                             << "Inserted lines can not contain newline characters. The following lines were "
                             << "passed to insert_lines():" << std::endl
                             << "=========BEGIN=========" << std::endl;
               for (auto &line : lines_to_insert)
               {
                  error_message << line << std::endl;
               }
               error_message << "==========END=========" << std::endl;
               throw std::runtime_error(error_message.str());
            }
         }
      }

      int range_safe_y = std::min(std::max(0, cursor.get_y()), (int)lines.size());

      // the current_lines starting from y point of insertion
      for (int row=range_safe_y; row<lines.size(); row++)
      {
         dirty_grid.mark_row_as_dirty(row, 0, lines[row].length());
      }

      lines.insert(lines.begin() + range_safe_y, lines_to_insert.begin(), lines_to_insert.end());

      // the result lines starting from y point of insertion
      for (int row=range_safe_y; row<lines.size(); row++)
      {
         dirty_grid.mark_row_as_dirty(row, 0, lines[row].length());
      }

      mark_content_is_modified();

      return true;
    body_dependency_symbols:
      - std::max


  - name: cursor_set_width
    type: bool
    parameters:
      - name: width
        type: float
        default_argument: 0.0f
    body: |
      cursor.set_width(width);
      return true;


  - name: cursor_set_height
    type: bool
    parameters:
      - name: height
        type: float
        default_argument: 0.0f
    body: |
      cursor.set_height(height);
      return true;


  - name: cursor_move_up
    type: bool
    body: |
      if (is_cursor_at_or_past_top_edge()) return false;
      cursor.move_up();
      return true;


  - name: cursor_move_down
    type: bool
    body: |
      if (is_cursor_at_or_past_bottom_edge()) return false;
      cursor.move_down();
      return true;


  - name: cursor_move_left
    type: bool
    body: |
      if (is_cursor_at_or_past_left_edge()) return false;
      cursor.move_left();
      return true;


  - name: cursor_move_right
    type: bool
    body: |
      cursor.move_right();
      return true;


  - name: cursor_move_to_start_of_line
    type: bool
    body: |
      cursor.set_x(0);
      return true;


  - name: cursor_move_to_start_of_file
    type: bool
    body: |
      cursor.set_x(0);
      cursor.set_y(0);
      return true;


  - name: cursor_move_to_end_of_line
    type: bool
    body: |
      // if not on a valid line
      if (cursor.get_y() < 0 || cursor.get_y() >= lines.size())
      {
         cursor.set_x(0);
      }
      else
      {
         std::string &current_line = lines[cursor.get_y()];
         cursor.set_x(std::max(0, (int)(current_line.size()-1)));
      }

      return true;
    body_dependency_symbols:
      - std::max


  - name: cursor_move_to_first_non_whitespace_character
    type: bool
    body: |
       cursor.set_x(0);
       if (cursor.get_y() < 0) return false;
       if (cursor.get_y() >= get_lines_ref().size()) return false;

       std::string &current_line = lines[cursor.get_y()];
       std::size_t first_non_whitespace_position = current_line.find_first_not_of(" \t\n\r");
       if (first_non_whitespace_position == std::string::npos)
       {
          cursor_move_to_end_of_line();
       }
       else
       {
          cursor.set_x(first_non_whitespace_position);
       }
       return true;
    body_dependency_symbols:
      - std::max


  - name: cursor_jump_to_next_word
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      // This regex from vimdoc.sourceforge.net/htmldoc/motion.html#word
      std::string vim_equivelent_word_jump_regex = "([0-9a-zA-Z_]+)|([^0-9a-zA-Z_ \\s]+)";
      std::string &current_line = lines[cursor.get_y()];

      RegexMatcher regex_matcher(current_line, vim_equivelent_word_jump_regex);
      std::vector<std::pair<int, int>> match_positions = regex_matcher.get_match_info();

      for (auto &match_position : match_positions)
      {
         if (match_position.first > cursor.get_x())
         {
            cursor.set_x(match_position.first);
            return true;
         }
      }

      return false;
    body_dependency_symbols:
      - RegexMatcher


  - name: cursor_jump_to_next_word_or_last_char
    type: bool
    body: |
      bool jump_successful = cursor_jump_to_next_word();
      if (!jump_successful)
      {
         if (!is_cursor_in_bounds()) return false;
         std::string &current_line = lines[cursor.get_y()];
         
         int new_pos = current_line.size()-1;
         if (new_pos == cursor.get_x())
         {
            // do nothing
            return false;
         }
         else
         {
            cursor.set_x(new_pos);
            return true;
         }
      }
      return true;
      

  - name: delete_to_next_word
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      // This regex from vimdoc.sourceforge.net/htmldoc/motion.html#word
      std::string vim_equivelent_word_jump_regex = "([0-9a-zA-Z_]+)|([^0-9a-zA-Z_ \\s]+)";
      std::string &current_line = lines[cursor.get_y()];

      RegexMatcher regex_matcher(current_line, vim_equivelent_word_jump_regex);
      std::vector<std::pair<int, int>> match_positions = regex_matcher.get_match_info();

      int jump_position = cursor.get_x();

      for (auto &match_position : match_positions)
      {
         if (match_position.first > cursor.get_x())
         {
            jump_position = match_position.first;
            break;
         }
      }

      if (jump_position == cursor.get_x()) return false; // do nothing

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      //std::vector<std::string> &lines = get_lines_ref();

      current_line.erase(cursor.get_x(), jump_position - cursor.get_x());

      dirty_grid.mark_row_as_dirty(cursor.get_y(), cursor.get_x(), current_line.length()+2 - cursor.get_x());
      mark_content_is_modified();

      return true;
    body_dependency_symbols:
      - RegexMatcher


  - name: delete_to_next_word_or_end_of_line
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      // This regex from vimdoc.sourceforge.net/htmldoc/motion.html#word
      std::string vim_equivelent_word_jump_regex = "([0-9a-zA-Z_]+)|([^0-9a-zA-Z_ \\s]+)";
      std::string &current_line = lines[cursor.get_y()];

      RegexMatcher regex_matcher(current_line, vim_equivelent_word_jump_regex);
      std::vector<std::pair<int, int>> match_positions = regex_matcher.get_match_info();

      int jump_position = cursor.get_x();

      for (auto &match_position : match_positions)
      {
         if (match_position.first > cursor.get_x())
         {
            jump_position = match_position.first;
            break;
         }
      }

      if (jump_position == cursor.get_x()) // assuming cursor was unable to jump to a next word boundary
      {
         // attempt to set jump_position to end of line
         
         int end_of_line_pos = current_line.size();
         if (end_of_line_pos > jump_position) jump_position = end_of_line_pos;
      }

      if (jump_position == cursor.get_x()) return false; // even with a possible jump to end of line, no movement
                                                         // happened, so do nothing and return false.

      Hexagon::AdvancedCodeEditor::Cursor &cursor = get_cursor_ref();
      //std::vector<std::string> &lines = get_lines_ref();

      current_line.erase(cursor.get_x(), jump_position - cursor.get_x());

      dirty_grid.mark_row_as_dirty(cursor.get_y(), cursor.get_x(), current_line.length()+2 - cursor.get_x());
      mark_content_is_modified();

      return true;
    body_dependency_symbols:
      - RegexMatcher


  - name: cursor_jump_to_previous_word
    type: bool
    body: |
      if (!is_cursor_in_bounds()) return false;

      // This regex from vimdoc.sourceforge.net/htmldoc/motion.html#word
      std::string vim_equivelent_word_jump_regex = "([0-9a-zA-Z_]+)|([^0-9a-zA-Z_ \\s]+)";
      std::string &current_line = lines[cursor.get_y()];

      RegexMatcher regex_matcher(current_line, vim_equivelent_word_jump_regex);
      std::vector<std::pair<int, int>> match_positions = regex_matcher.get_match_info();
      std::reverse(std::begin(match_positions), std::end(match_positions));

      for (auto &match_position : match_positions)
      {
         if (match_position.first < cursor.get_x())
         {
            cursor.set_x(match_position.first);
            return true;
         }
      }

      return false;
    body_dependency_symbols:
      - RegexMatcher
      - std::reverse
      - std::begin
      - std::end


  - name: cursor_move_to
    type: bool
    parameters:
      - name: x
        type: int
        default_argument: 0
      - name: y
        type: int
        default_argument: 0
    body: |
      cursor.move_to(x, y);
      return true;


  - name: cursor_set_x
    type: bool
    parameters:
      - name: x
        type: int
        default_argument: 0
    body: |
      cursor.set_x(x);
      return true;


  - name: cursor_set_y
    type: bool
    parameters:
      - name: y
        type: int
        default_argument: 0
    body: |
      cursor.set_y(y);
      return true;


  - name: cursor_get_x
    type: int
    body: |
      return cursor.get_x();


  - name: cursor_get_y
    type: int
    body: |
      return cursor.get_y();


  - name: is_cursor_in_bounds
    xprivate: true
    type: bool
    body: |
      if (cursor.get_y() >= lines.size()) return false;
      if (cursor.get_y() < 0) return false;
      if (cursor.get_x() >= lines[cursor.get_y()].size()) return false;
      return true;


  - name: is_cursor_in_vertical_bounds
    private: true
    type: bool
    body: |
      if (cursor.get_y() >= lines.size()) return false;
      if (cursor.get_y() < 0) return false;
      return true;


  - name: is_cursor_at_or_past_left_edge
    private: true
    type: bool
    body: |
      if (cursor.get_x() <= 0) return true;
      return false;


  - name: is_cursor_at_or_past_top_edge
    private: true
    type: bool
    body: |
      if (cursor.get_y() <= 0) return true;
      return false;


  - name: is_cursor_at_or_past_bottom_edge
    private: true
    type: bool
    body: |
      if (cursor.get_y() >= ((int)lines.size() - 1)) return true;
      return false;


  - name: is_cursor_on_last_line
    private: true
    type: bool
    body: |
      if (lines.empty()) return false;
      return cursor.get_y() == (lines.size() - 1);


  - name: dirty_grid_clear
    type: void
    xprivate: true
    body: |
      dirty_grid.clear();
      return;


  - name: get_dirty_cells
    type: std::vector<std::pair<int, int>>
    xprivate: true
    body: |
      return dirty_grid.build_vector();


  - name: any_dirty_cells
    type: bool
    xprivate: true
    body: |
      return !dirty_grid.dirty_cells_empty();


  - name: dirty_cell_count
    type: int
    private: true
    body: |
      return dirty_grid.dirty_cells_count();


dependencies:


  - symbol: Hexagon::DirtyGrid
    headers: [ Hexagon/DirtyGrid.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Cursor
    headers: [ Hexagon/AdvancedCodeEditor/Cursor.hpp ]
  - symbol: RegexMatcher
    headers: [ Hexagon/RegexMatcher.hpp ]
  - symbol: std::max
    headers: [ algorithm ]
  - symbol: std::reverse
    headers: [ algorithm ]
  - symbol: std::begin
    headers: [ array ]
  - symbol: std::end
    headers: [ array ]


