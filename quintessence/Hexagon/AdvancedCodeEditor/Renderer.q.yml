properties:


  - name: text_mesh
    type: Hexagon::Elements::TextMesh*
    init_with: nullptr
    constructor_arg: true
  - name: surface_render
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    constructor_arg: true
  - name: cursor
    type: Hexagon::AdvancedCodeEditor::Cursor*
    init_with: nullptr
    constructor_arg: true
  - name: width
    type: float
    init_with: 1
    constructor_arg: true
  - name: height
    type: float
    init_with: 1
    constructor_arg: true
  - name: cursor_is_bar
    type: bool
    init_with: false
    constructor_arg: true
  - name: text_mesh_y_offset
    type: float
    init_with: 0.0f
    constructor_arg: true
  - name: first_row_offset
    type: int
    init_with: 0
    constructor_arg: true
  - name: draw_line_numbers
    type: bool
    init_with: false
    setter: true
    constructor_arg: true
  - name: font
    type: ALLEGRO_FONT*
    init_with: nullptr
    setter: true
    constructor_arg: true


functions:


  - name: render
    guards: [ text_mesh ]
    type: void
    body: |
      AllegroFlare::Timer timer;

      timer.reset(); timer.start();
      // draw the window
      Hexagon::AdvancedCodeEditor::WindowRenderer window_renderer(width, height);
      //window_renderer.render();
      //timer.pause(); std::cout << " window render: " << timer.get_elapsed_time_microseconds() << std::endl;

      // draw the surface render
      timer.reset(); timer.start();
      //if (surface_render) al_draw_bitmap(surface_render, 0, text_mesh_y_offset, 0);
      text_mesh->render();
      //timer.pause(); std::cout << " surface_render render time: "
      //                         << timer.get_elapsed_time_microseconds() << std::endl;

      // draw the cursor
      if (draw_line_numbers) render_line_numbers();
      render_cursor();

      return;
    body_dependency_symbols:
      - std::cout
      - al_draw_bitmap
      - AllegroFlare::Timer
      - Hexagon::AdvancedCodeEditor::WindowRenderer


  - name: render_line_numbers
    type: bool
    guards: [ text_mesh, font ]
    body: |
       int cell_width = text_mesh->get_cell_width();
       ALLEGRO_COLOR font_color = al_color_name("white");
       ALLEGRO_COLOR cursor_color = AllegroFlare::color::color(al_color_name("yellow"), 0.3);
       int first_line_number = first_row_offset;
       int _cursor_y = cursor->get_y();
       float cell_height = text_mesh->get_cell_height();
       bool line_exists_in_git_modified_line_numbers = false;
       int num_rows_to_draw_line_numbers = text_mesh->get_num_rows();

       for (int line_number=first_line_number; line_number<=num_rows_to_draw_line_numbers; line_number++)
       {
          if (line_number < 0) continue;

          ALLEGRO_COLOR default_line_number_green_color = AllegroFlare::color::color(font_color, 0.2);
          float frame_right_x = width - cell_width * 0.5;
          bool cursor_is_on_this_line = _cursor_y == (line_number - first_line_number);
          std::stringstream ss;
          ss << (line_number+1);
          ALLEGRO_COLOR text_color = default_line_number_green_color;
          std::string string_to_display = ss.str();
          float y = (line_number-first_line_number)*cell_height;

          if (line_exists_in_git_modified_line_numbers) text_color = al_color_name("orange");
          if (cursor_is_on_this_line)
          {
             text_color = AllegroFlare::color::mix(text_color, cursor_color, 0.5);
             ALLEGRO_COLOR hilight_bar_color = AllegroFlare::color::mix(ALLEGRO_COLOR{0, 0, 0, 0}, text_color, 0.25);
             al_draw_filled_rectangle(0, y, frame_right_x, y+cell_height, hilight_bar_color);
             string_to_display = std::string(">") + string_to_display;
          }

          al_draw_text(font,
                       text_color,
                       frame_right_x,
                       y,
                       ALLEGRO_ALIGN_RIGHT,
                       string_to_display.c_str());
       }
       return true;
    body_dependency_symbols:
      - AllegroFlare::color::color
      - ALLEGRO_COLOR


  - name: render_cursor
    type: void
    guards: [ text_mesh, cursor, al_is_primitives_addon_initialized() ]
    body: |
      float cursor_x = cursor->get_x() * text_mesh->get_cell_width();
      float cursor_y = (cursor->get_y() - first_row_offset) * text_mesh->get_cell_height() + text_mesh_y_offset;
      ALLEGRO_COLOR cursor_color = ALLEGRO_COLOR{0.0f, 1.0f, 1.0f, 1.0f};

      if (cursor_is_bar)
      {
         // draw the cursor
         al_draw_line(
            cursor_x,
            cursor_y,
            cursor_x,
            cursor_y+cursor->get_height(),
            cursor_color,
            2.0f
            );
      }
      else
      {
         // draw the cursor
         al_draw_rectangle(
            cursor_x,
            cursor_y,
            cursor_x+cursor->get_width(),
            cursor_y+cursor->get_height(),
            cursor_color,
            2.0f
            );
      }
      return;


dependencies:


  - symbol: Hexagon::Elements::TextMesh*
    headers: [ Hexagon/Elements/TextMesh.hpp ]
  - symbol: ALLEGRO_COLOR
    headers: [ allegro5/allegro_color.h ]
  - symbol: ALLEGRO_FONT*
    headers: [ allegro5/allegro_font.h ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_bitmap
    headers: [ allegro5/allegro.h ]
  - symbol: Hexagon::Elements::FontedTextGrid*
    headers: [ Hexagon/Elements/FontedTextGrid.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::WindowRenderer
    headers: [ Hexagon/AdvancedCodeEditor/WindowRenderer.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Cursor*
    headers: [ Hexagon/AdvancedCodeEditor/Cursor.hpp ]
  - symbol: AllegroFlare::Timer
    headers: [ AllegroFlare/Timer.hpp ]
  - symbol: AllegroFlare::color::color
    headers: [ AllegroFlare/Color.hpp ]

