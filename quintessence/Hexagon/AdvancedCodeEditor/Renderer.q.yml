properties:


  - name: text_mesh
    type: Hexagon::Elements::TextMesh*
    init_with: nullptr
    constructor_arg: true
  - name: surface_render
    type: ALLEGRO_BITMAP*
    init_with: nullptr
    constructor_arg: true
  - name: cursor
    type: Hexagon::AdvancedCodeEditor::Cursor*
    init_with: nullptr
    constructor_arg: true
  - name: width
    type: float
    init_with: 1
    constructor_arg: true
  - name: height
    type: float
    init_with: 1
    constructor_arg: true
  - name: cursor_is_bar
    type: bool
    init_with: false
    constructor_arg: true
  - name: text_mesh_y_offset
    type: float
    init_with: 0.0f
    constructor_arg: true


functions:


  - name: render
    guards: [ text_mesh ]
    type: void
    body: |
      AllegroFlare::Timer timer;

      timer.reset(); timer.start();
      // draw the window
      Hexagon::AdvancedCodeEditor::WindowRenderer window_renderer(width, height);
      window_renderer.render();
      //timer.pause(); std::cout << " window render: " << timer.get_elapsed_time_microseconds() << std::endl;

      // draw the surface render
      timer.reset(); timer.start();
      //if (surface_render) al_draw_bitmap(surface_render, 0, text_mesh_y_offset, 0);
      text_mesh->render();
      //timer.pause(); std::cout << " surface_render render time: "
      //                         << timer.get_elapsed_time_microseconds() << std::endl;

      // draw the cursor
      render_cursor();

      return;
    body_dependency_symbols:
      - std::cout
      - al_draw_bitmap
      - AllegroFlare::Timer
      - Hexagon::AdvancedCodeEditor::WindowRenderer


  - name: render_cursor
    type: void
    guards: [ text_mesh, cursor, al_is_primitives_addon_initialized() ]
    body: |
      float cursor_x = cursor->get_x() * text_mesh->get_cell_width();
      float cursor_y = cursor->get_y() * text_mesh->get_cell_height() + text_mesh_y_offset;
      ALLEGRO_COLOR cursor_color = ALLEGRO_COLOR{0.0f, 1.0f, 1.0f, 1.0f};

      if (cursor_is_bar)
      {
         // draw the cursor
         al_draw_line(
            cursor_x,
            cursor_y,
            cursor_x,
            cursor_y+cursor->get_height(),
            cursor_color,
            2.0f
            );
      }
      else
      {
         // draw the cursor
         al_draw_rectangle(
            cursor_x,
            cursor_y,
            cursor_x+cursor->get_width(),
            cursor_y+cursor->get_height(),
            cursor_color,
            2.0f
            );
      }
      return;


dependencies:


  - symbol: Hexagon::Elements::TextMesh*
    headers: [ Hexagon/Elements/TextMesh.hpp ]
  - symbol: ALLEGRO_BITMAP*
    headers: [ allegro5/allegro.h ]
  - symbol: al_draw_bitmap
    headers: [ allegro5/allegro.h ]
  - symbol: Hexagon::Elements::FontedTextGrid*
    headers: [ Hexagon/Elements/FontedTextGrid.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::WindowRenderer
    headers: [ Hexagon/AdvancedCodeEditor/WindowRenderer.hpp ]
  - symbol: Hexagon::AdvancedCodeEditor::Cursor*
    headers: [ Hexagon/AdvancedCodeEditor/Cursor.hpp ]
  - symbol: AllegroFlare::Timer
    headers: [ AllegroFlare/Timer.hpp ]

