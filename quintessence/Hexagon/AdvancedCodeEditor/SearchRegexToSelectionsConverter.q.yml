properties:


  - name: search_regex_string
    type: std::string
    init_with: '""'
    constructor_arg: true

  - name: lines
    type: std::vector<std::string>
    init_with: '{}'   
    constructor_arg: true


functions:


  - name: convert
    type: std::vector<CodeRange>
    body: |
      std::vector<CodeRange> result;

      Blast::RegexMatcher regex_matcher;
      regex_matcher.set_regex_expression(search_regex_string); 

      for (int line_num=0; line_num<lines.size(); line_num++)
      {
         regex_matcher.set_source_string(lines[line_num]);
         //std::string& line = lines[line_num];

         //Blast::RegexMatcher regex_matcher(line, search_regex_string); 
         std::vector<std::pair<int, int>> matches = regex_matcher.get_match_info();
         for (std::pair<int, int> &match : matches)
         {
            int position = match.first;
            int length = match.second;
            result.push_back(CodeRange{position, line_num, position+length, line_num});
         }
      }         

      return result;
    body_dependency_symbols:
      - std::vector<CodeRange>
      - Blast::RegexMatcher
      - std::cout


dependencies:


  - symbol: std::vector<CodeRange>
    headers: [ vector, Hexagon/CodeRange.hpp ]
  - symbol: Blast::RegexMatcher
    headers: [ Blast/RegexMatcher.hpp ]
  - symbol: CodeRange
    headers: [ Hexagon/CodeRange.hpp ]


