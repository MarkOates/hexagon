properties:


  - name: NO_MATCH_FOUND
    type: std::pair<int, int>
    init_with: '{ -1, -1 }'
    static: true
    constexpr: true


methods:


  - name: is_valid_symbol_char
    type: bool
    parameters:
      - name: c
        type: char
        default_argument: 0
    body: |
      return (isalnum(c) || c == '_' || c == ':');


  - name: is_valid_match
    type: bool
    parameters:
      - name: match_result
        type: std::pair<int, int>
        default_argument: NO_MATCH_FOUND
    body: |
      return (match_result != NO_MATCH_FOUND);


  - name: find_symbol_range
    type: std::pair<int, int>
    parameters:
      - name: line_of_code
        type: std::string
        default_argument: '"[unset-line_of_code]"'
      - name: cursor_position
        type: int
        default_argument: -1
    body: |
      if (cursor_position < 0) NO_MATCH_FOUND;
      if (cursor_position >= line_of_code.size()) return NO_MATCH_FOUND;

      int start_position = cursor_position;
      int end_position = cursor_position;
      bool last_char_was_colon = false;

      // Check if the character under the cursor is a valid symbol character
      if (is_valid_symbol_char(line_of_code[cursor_position]))
      {
         // Find the start position of the symbol
         bool last_char_was_colon = false;
         while (start_position > 0 && is_valid_symbol_char(line_of_code[start_position - 1]))
         {
            char char_to_evaluate = line_of_code[start_position - 1];
         
            if (last_char_was_colon)
            {
               bool this_char_is_colon = (char_to_evaluate == ':');
               if (this_char_is_colon)
               {
                  // double colon matched
               }
               else
               {
                  // double colon match failed
               }
            }

            last_char_was_colon = (char_to_evaluate == ':');
            start_position--;
         }

         // Find the end position of the symbol
         last_char_was_colon = false;
         while (end_position < line_of_code.length() - 1 && is_valid_symbol_char(line_of_code[end_position + 1]))
         {
            end_position++;
         }
         // One additional end_position++
         end_position++;
      }

      return std::make_pair(start_position, end_position);


