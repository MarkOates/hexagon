properties:


  - name: code_ranges
    type: std::vector<CodeRange>
    init_with: '{}'
    constructor_arg: true
    getter: true


functions:


  - name: clear
    body: |
      code_ranges.clear();
      return;


  - name: find_next_from
    type: CodePoint
    parameters:
      - name: position_x
        type: int
        default_argument: 0
      - name: position_y
        type: int
        default_argument: 0
    body: |
      CodePoint anchor_code_point(position_x, position_y);
      
      // get ANY code point that is bigger than from_code_point to be the first "most_viable_code_point"
      CodePoint most_viable_code_point(position_x, position_y);
      for (auto &code_range : code_ranges)
      {
         CodePoint code_point = code_range.infer_cursor_start();
         if (most_viable_code_point < code_point)
         {
            most_viable_code_point = code_point;
            break;
         }
      }

      for (auto &code_range : code_ranges)
      {
         CodePoint code_point = code_range.infer_cursor_start();
         if (anchor_code_point < code_point && code_point < most_viable_code_point)
         {
            most_viable_code_point = code_point;
         }
      }

      return most_viable_code_point;

   
  - name: find_previous_from
    type: CodePoint 
    parameters:
      - name: position_x
        type: int
        default_argument: 0
      - name: position_y
        type: int
        default_argument: 0
    body: |
      CodePoint result(position_x, position_y);
      // TODO
      return result;

   
dependencies:


  - symbol: std::vector<CodeRange>
    headers: [ vector, Hexagon/CodeRange.hpp ]
  - symbol: CodePoint
    headers: [ Hexagon/CodePoint.hpp ]

