properties:


  - name: code_ranges
    type: std::vector<CodeRange>
    init_with: '{}'
    constructor_arg: true
    getter: true


functions:


  - name: is_empty
    type: bool
    body: |
      return code_ranges.empty();


  - name: clear
    body: |
      code_ranges.clear();
      return;


  - name: clear_select_lines
    type: bool
    parameters:
      - name: line_indices
        type: std::vector<int>
        default_argument: '{}'
    body: |
      // traverse each line_index
      for (auto &line_index : line_indices)
      {
         // erase the code_range if the line_index is within the range
         code_ranges.erase(
            std::remove_if(
               code_ranges.begin(), code_ranges.end(),
               [line_index](CodeRange code_range){
                  if (code_range.infer_cursor_start().get_y() == line_index) return true;
                  if (code_range.infer_cursor_end().get_y() == line_index) return true;
                  if (code_range.in_range(0, line_index)) return true;
                  return false;
               }),
            code_ranges.end());
      }
      return true;
    body_dependency_symbols:
      - std::sort
      - std::unique


  - name: push_down_from
    type: bool
    parameters:
      - name: starting_on_line
        type: int
        default_argument: 0
      - name: num_lines_to_push_down
        type: int
        default_argument: 0
    guards: [ (num_lines_to_push_down >= 0) ]
    body: |
      for (int i=code_ranges.size()-1; i>=0; i--)
      {
         auto &code_range = code_ranges[i];

         CodePoint start = code_range.infer_cursor_start();
         //CodePoint end = code_range.infer_cursor_end();

         if (start.get_y() >= starting_on_line)
         {
            code_range.move(0, num_lines_to_push_down);
         }
      }
      return true;


  - name: pull_up_from
    type: bool
    parameters:
      - name: starting_on_line
        type: int
        default_argument: 0
      - name: num_lines_to_pull_up
        type: int
        default_argument: 0
    guards: [ (num_lines_to_pull_up >= 0), (num_lines_to_pull_up <= starting_on_line) ]
    body: |
      for (int i=0; i<code_ranges.size(); i++)
      {
         auto &code_range = code_ranges[i];

         CodePoint start = code_range.infer_cursor_start();
         //CodePoint end = code_range.infer_cursor_end();

         if (start.get_y() >= starting_on_line)
         {
            code_range.move(0, -num_lines_to_pull_up);
         }
      }
      return true;


  - name: find_next_from
    type: CodePoint
    parameters:
      - name: position_x
        type: int
        default_argument: 0
      - name: position_y
        type: int
        default_argument: 0
    body: |
      CodePoint anchor_code_point(position_x, position_y);
      
      // get ANY code point that is bigger than anchor_code_point to be the first "most_viable_code_point"
      CodePoint most_viable_code_point(position_x, position_y);
      for (auto &code_range : code_ranges)
      {
         CodePoint code_point = code_range.infer_cursor_start();
         if (most_viable_code_point < code_point)
         {
            most_viable_code_point = code_point;
            break;
         }
      }

      for (auto &code_range : code_ranges)
      {
         CodePoint code_point = code_range.infer_cursor_start();
         if (anchor_code_point < code_point && code_point < most_viable_code_point)
         {
            most_viable_code_point = code_point;
         }
      }

      return most_viable_code_point;

   
  - name: find_previous_from
    type: CodePoint 
    parameters:
      - name: position_x
        type: int
        default_argument: 0
      - name: position_y
        type: int
        default_argument: 0
    body: |
      CodePoint anchor_code_point(position_x, position_y);
      
      // get ANY code point that is smaller than anchor_code_point to be the first "most_viable_code_point"
      CodePoint most_viable_code_point(position_x, position_y);
      for (auto &code_range : code_ranges)
      {
         CodePoint code_point = code_range.infer_cursor_start();
         if (code_point < most_viable_code_point)
         {
            most_viable_code_point = code_point;
            break;
         }
      }

      for (auto &code_range : code_ranges)
      {
         CodePoint code_point = code_range.infer_cursor_start();
         if (code_point < anchor_code_point && most_viable_code_point < code_point)
         {
            most_viable_code_point = code_point;
         }
      }

      return most_viable_code_point;

   
dependencies:


  - symbol: std::vector<CodeRange>
    headers: [ vector, Hexagon/CodeRange.hpp ]
  - symbol: CodePoint
    headers: [ Hexagon/CodePoint.hpp ]
  - symbol: CodeRange
    headers: [ Hexagon/CodeRange.hpp ]
  - symbol: std::sort
    headers: [ algorithm ]
  - symbol: std::unique
    headers: [ algorithm ]


