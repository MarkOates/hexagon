functions:


  - name: model_filenames
    type: std::vector<std::string>
    body: |
      std::string project_root_directory = "/Users/markoates/Repos/disclife";
      std::string fragment_folder_name = "app/models";
      std::string fragment_extension = ".rb";

      std::stringstream find_command;
      find_command << "cd "
                   << project_root_directory
                   << " && find "
                   << fragment_folder_name
                   << " -type f -name \"*"
                   << fragment_extension
                   << "\""
                   << " -o"
                   << " -type l -name \"*"
                   << fragment_extension
                   << "\"";

      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         find_command.str(),
         Blast::ShellCommandExecutorWithCallback::simple_cout_callback
      );

      std::string executor_response = shell_command_executor.execute();
      Blast::StringSplitter splitter(executor_response, '\n');
      std::vector<std::string> model_filenames = splitter.split();

      return model_filenames;
    body_dependency_symbols:
      - std::stringstream
      - Blast::ShellCommandExecutorWithCallback
      - Blast::StringSplitter


dependencies:
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: Blast::StringSplitter
    headers: [ Blast/StringSplitter.hpp ]


