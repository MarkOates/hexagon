properties:


  - name: config
    type: Hexagon::System::Config
    init_with: '{"/Users/markoates/Repos/hexagon/bin/programs/data/config/hexagon.boot.cfg"}'
    constructor_arg: true
  - name: display
    type: ALLEGRO_DISPLAY*
    init_with: nullptr
  - name: event_queue
    type: ALLEGRO_EVENT_QUEUE*
    init_with: nullptr
  - name: primary_timer
    type: ALLEGRO_TIMER*
    init_with: nullptr
  - name: motion
    type: Motion
    init_with: ''
  - name: system
    type: System*
    init_with: nullptr
  - name: user_event_source
    type: ALLEGRO_EVENT_SOURCE
    init_with: ''
  - name: shutdown_program
    type: bool
    init_with: false


functions:


  - name: initialize_allegro_config_display_event_queue_and_timer
    type: void
    body: |
       if (!al_init()) std::cerr << "al_init() failed" << std::endl;
       if (!al_init_font_addon()) std::cerr << "al_init_font_addon() failed" << std::endl;
       if (!al_init_ttf_addon()) std::cerr << "al_init_ttf_addon() failed" << std::endl;
       if (!al_install_keyboard()) std::cerr << "al_install_keyboard() failed" << std::endl;

       config.initialize();

       al_set_new_display_option(ALLEGRO_SAMPLE_BUFFERS, 1, ALLEGRO_SUGGEST);
       al_set_new_display_option(ALLEGRO_SAMPLES, 8, ALLEGRO_SUGGEST);
       al_set_new_display_option(ALLEGRO_DEPTH_SIZE, 32, ALLEGRO_SUGGEST);
       al_set_new_display_flags(ALLEGRO_RESIZABLE);
       //al_set_new_display_flags(ALLEGRO_FULLSCREEN_WINDOW);

       al_set_new_bitmap_flags(ALLEGRO_MIN_LINEAR | ALLEGRO_MAG_LINEAR);
       display = al_create_display(
          config.get_initial_display_width(),
          config.get_initial_display_height());
       if (!display) std::cerr << "al_create_display() failed" << std::endl;
       al_set_window_title(display, "[ProjectName] - Hexagon");

       int display_width = al_get_display_width(display);
       int display_height = al_get_display_height(display);

       event_queue = al_create_event_queue();
       al_register_event_source(event_queue, al_get_keyboard_event_source());
       al_register_event_source(event_queue, al_get_display_event_source(display));

       primary_timer = al_create_timer(1.0/60.0);
       al_register_event_source(event_queue, al_get_timer_event_source(primary_timer));
       al_start_timer(primary_timer);

       al_init_user_event_source(&user_event_source);
       al_register_event_source(event_queue, &user_event_source);


  - name: initialize
    type: void
    body: |
       initialize_allegro_config_display_event_queue_and_timer();
       verify_presence_of_temp_files_and_assign_to_global_constants();

       system = new System(display, config, motion);
       system->initialize();


  - name: shutdown
    type: void
    body: |
       al_destroy_event_queue(event_queue);
       al_destroy_display(display);
       //delete system;
       //al_uninstall_system();


  - name: emit_user_event
    type: void
    parameters:
      - name: user_event
        type: ALLEGRO_EVENT
        default_argument: '{}'
    body: |
      al_emit_user_event(&user_event_source, &user_event, NULL);
      return;


  - name: run_program
    type: void
    body: |
       initialize();
       run_event_loop();
       shutdown();


  - name: run_event_loop
    type: void
    guards: [ system ]
    body: |
       while(!shutdown_program)
       {
          ALLEGRO_EVENT this_event;
          al_wait_for_event(event_queue, &this_event);
          global::profiler.clear();

          system->process_event(this_event);

          bool refresh = true;

          switch(this_event.type)
          {
          case ALLEGRO_EVENT_DISPLAY_CLOSE:
             shutdown_program = true;
             break;
          case ALLEGRO_EVENT_DISPLAY_RESIZE:
             al_acknowledge_resize(display);
             system->acknowledge_display_resize(display);
             //note that each rezie will cause the display to reload, and will be a bit laggy
             //refresh = false;
             break;
          case ALLEGRO_EVENT_DISPLAY_SWITCH_OUT:
             system->acknowledge_display_switch_out(display);
             break;
          case ALLEGRO_EVENT_DISPLAY_SWITCH_IN:
             system->acknowledge_display_switch_in(display);
             break;
          case ALLEGRO_EVENT_TIMER:
             motion.update(al_get_time());
             //refresh = true;
             if (motion.get_num_active_animations() == 0) continue;
             break;
          }

          if (refresh)
          {
             //clear_notifications();

             //for (auto &stage : system.stages)
             //{
             //   StageInterface::type_t type = stage->get_type();
             //   if (type == CodeEditor::Stage::ONE_LINE_INPUT_BOX || type == CodeEditor::Stage::CODE_EDITOR)
             //   {
             //      bool this_stage_content_is_modified = static_cast<CodeEditor::Stage *>(stage)->get_content_is_modified();
             //      if (this_stage_content_is_modified) add_notification(NOTIFICATION_FILE_IS_UNSAVED);
             //   }
             //}

             //if (!is_last_compiled_error_messages_empty())
             //{
             //   std::vector<std::string> error_message_lines = Blast::StringSplitter(get_last_compiled_error_messages(), '\n').split();
             //   for (auto &error_message_line : error_message_lines)
             //   {
             //      add_notification(error_message_line);
             //   }
             //}

             //system.hud.set_notifications2({ "[ - ]" });
             //system.hud.set_notifications(notifications);

             //al_clear_to_color(al_color_name("black"));
             al_clear_to_color(config.get_backfill_color());

             Hexagon::System::Renderer renderer(system, display);
             renderer.render();

             al_flip_display();

             bool drop_backed_up_primary_timer_events = true;
             if (drop_backed_up_primary_timer_events)
             {
                ALLEGRO_EVENT next_event;
                while (al_peek_next_event(event_queue, &next_event)
                     && next_event.type == ALLEGRO_EVENT_TIMER
                     && next_event.timer.source == primary_timer)
                  al_drop_next_event(event_queue);
             }
          }
       }
       return;
    body_dependency_symbols:
      - Hexagon::System::Config
      - all


  - name: verify_presence_of_temp_files_and_assign_to_global_constants
    type: void
    body: |
       std::string regex_temp_filename = config.get_regex_temp_filename();
       if (!php::file_exists(regex_temp_filename))
       {
          std::stringstream error_message;
          error_message << "Error: there is no \"" << regex_temp_filename << "\" located in the directory tree.  "
                        << "It has to be present for hexagon to work.";
          throw std::runtime_error(error_message.str());
       }

       std::string clipboard_temp_filename = config.get_clipboard_temp_filename();
       if (!php::file_exists(clipboard_temp_filename))
       {
          std::stringstream error_message;
          error_message << "Error: there is no \"" << clipboard_temp_filename << "\" located in the directory tree. "
                        << "It has to be present for hexagon to work.";
          throw std::runtime_error(error_message.str());
       }

       std::string file_navigator_selection_filename = config.get_file_navigator_selection_filename();
       if (!php::file_exists(file_navigator_selection_filename))
       {
          std::stringstream error_message;
          error_message << "Error: there is no \"" << file_navigator_selection_filename
                        << "\" located in the directory tree.  It has to be present for hexagon to work.";
          throw std::runtime_error(error_message.str());
       }

       std::string make_command_filename = config.get_make_command_filename();
       if (!php::file_exists(make_command_filename))
       {
          std::stringstream error_message;
          error_message << "Error: there is no \"" << make_command_filename
                        << "\" located in the directory tree.  It has to be present for hexagon to work.";
          throw std::runtime_error(error_message.str());
       }

       // assign confirmed values to globals

       REGEX_TEMP_FILENAME = regex_temp_filename;
       CLIPBOARD_TEMP_FILENAME = clipboard_temp_filename;
       FILE_NAVIGATOR_SELECTION_FILENAME = file_navigator_selection_filename;
       MAKE_COMMAND_FILENAME = make_command_filename;

       return;


  - name: draw_hexagon_logo_and_wait_for_keypress
    type: void
    parameters:
      - name: display_width
        type: int
        default_argument: 1
      - name: display_height
        type: int
        default_argument: 1
    body: |
       float logo_radius = 60;

       std::string logo_font_filename = "Expansiva_bold.otf";
       ALLEGRO_FONT *expansiva_font = al_load_font(resource_path({"data", "fonts"}, logo_font_filename).c_str(), 23, 0);
       if (!expansiva_font) throw std::runtime_error("could not load 'Expansiva bold.ttf'");

       Hexagon::Logo logo(
         display_width/2,
         display_height/2 - logo_radius * 1.4,
         logo_radius,
         expansiva_font,
         al_color_html("#bc2d48"),
         2.5);
       logo.render();

       al_flip_display();

       // wait for keypress
       {
         ALLEGRO_EVENT_QUEUE *wait_for_keypress_event_queue;
         ALLEGRO_EVENT event;

         al_install_keyboard();
         wait_for_keypress_event_queue = al_create_event_queue();
         al_register_event_source(wait_for_keypress_event_queue, al_get_keyboard_event_source());

         do
           al_wait_for_event(wait_for_keypress_event_queue, &event);
         while (event.type != ALLEGRO_EVENT_KEY_DOWN);

         al_destroy_event_queue(wait_for_keypress_event_queue);
       }

       return;


dependencies:


  - symbol: Hexagon::System::Config
    headers: [ Hexagon/System/System.hpp ]
  - symbol: ALLEGRO_DISPLAY*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT_QUEUE*
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_TIMER*
    headers: [ allegro5/allegro.h ]
  - symbol: Motion
    headers: [ allegro_flare/motion.h ]
  - symbol: System*
    headers: [ Hexagon/System/System.hpp ]
  - symbol: ALLEGRO_EVENT_SOURCE
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: all
    headers:
      - iostream
      - sstream
      - algorithm
      - allegro5/allegro.h
      - allegro5/allegro_ttf.h
      - allegro5/allegro_font.h
      - allegro5/allegro_color.h
      - allegro5/allegro_primitives.h
      - allegro_flare/placement2d.h
      - allegro_flare/placement3d.h
      - allegro_flare/useful_php.h
      - allegro_flare/render_cache.h
      - Blast/StringSplitter.hpp
      - AllegroFlare/KeyboardCommandMapper.hpp
      - Blast/CommandLineFlaggedArgumentsParser.hpp
      - lib/camera.h
      - AllegroFlare/Config.hpp
      - Hexagon/System/Action/DestroyAllCodeEditorStages.hpp
      - Hexagon/System/Action/AttemptToCreateTwoPaneSplitFromLastComponentNavigatorSelection.hpp
      - Hexagon/System/Action/CreateThreeSplitFromComponent.hpp
      - Hexagon/Logo.hpp
      - Hexagon/RegexMatcher.hpp
      - Hexagon/shared_globals.hpp
      - Hexagon/util.hpp
      - Hexagon/ClipboardData.hpp
      - Hexagon/ActionData.hpp
      - Hexagon/Action.hpp
      - Hexagon/ActionQueueRecording.hpp
      - Hexagon/CodePoint.hpp
      - Hexagon/CodeRange.hpp
      - Hexagon/RailsMinitestTestResult.hpp
      - Hexagon/RailsTestOutputParser.hpp
      - Hexagon/RailsMinitestTestRunner.hpp
      - Hexagon/CppCompiler/CompileRunner.hpp
      - Hexagon/FullScreenOverlay/Stage.hpp
      - Hexagon/CodeRangeExtractor.hpp
      - Hexagon/CodeMessagePoint.hpp
      - Hexagon/CodeMessagePointsOverlay.hpp
      - Hexagon/StageInterface.hpp
      - Hexagon/KeyboardInputsModal/Stage.hpp
      - Hexagon/EventControllerInterface.hpp
      - Hexagon/CodeEditor/EventController.hpp
      - Hexagon/CodeEditor/CodeEditor.hpp
      - Hexagon/FileSystemNode.hpp
      - Hexagon/FileNavigator/Stage.hpp
      - Hexagon/ComponentNavigator/Stage.hpp
      - Hexagon/RerunOutputWatcher/Stage.hpp
      - Hexagon/LayoutPlacements.hpp
      - NcursesArt/ProjectComponentBasenameExtractor.hpp
      - NcursesArt/ProjectFilenameGenerator.hpp
      - Hexagon/System/Renderer.hpp
      - Hexagon/System/System.hpp
