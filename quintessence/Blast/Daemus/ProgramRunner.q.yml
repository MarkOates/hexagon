properties:


  - name: daemus_build_file_directory
    type: std::string
    init_with: '"/Users/markoates/Repos/hexagon/bin/programs/data/tmp"'
    getter: true
  - name: daemus_build_filename
    type: std::string
    init_with: '"daemus_build.txt"'
    getter: true


functions:


  - name: run
    type: void
    body: |
      al_init();
      Hexagon::System::Config hexagon_config;
      hexagon_config.initialize();

      std::string project_directory = hexagon_config.get_default_navigator_directory();

      //cd_to_project_directory_and_run_with_rerun(project_directory);
      watch_for_buildfile(project_directory);
      return;


  - name: run_in_holding_pattern
    type: void
    body: |
      al_init();
      ALLEGRO_EVENT_QUEUE *event_queue = al_create_event_queue();

      // have event source initialized here

      al_destroy_event_queue(event_queue);
      return;


  - name: run_once
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      std::string actual_command_to_execute_in_project_directory = "make focus";

      std::stringstream result_command;
      result_command << "cd "
                     << project_directory
                     << " && "
                     << actual_command_to_execute_in_project_directory;

      std::string output = execute_command(result_command.str());
    body_dependency_symbols:
      - std::stringstream


  - name: cd_to_project_directory_and_run_with_rerun
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      std::string actual_command_to_execute_in_project_directory = "make focus";

      std::string build_command = "rerun" \
         " " \
         "-c" \
         " " \
         "--background" \
         " " \
         "--ignore \"{**/bin/programs/data/tmp/*,**/documentation/*\"}" \
         " " \
         "-p \"**/*.{rb,js,tsx,coffee,css,scss,sass,erb,html,haml,ru,yml,slim,md,feature,c,h,cpp,hpp,txt,cfg}\"" \
         " " \
         "\"(cd ";

      build_command += project_directory + " && " + actual_command_to_execute_in_project_directory + ")\"";

      std::string build_command_wrapped = "(cd " + project_directory + " && " + build_command + ")";

      std::string output = execute_command(build_command);
      return;
    body_dependency_symbols:
      - Hexagon::System::Config
      - Hexagon::System::Config*


  - name: watch_for_buildfile
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      std::string actual_command_to_execute_in_project_directory = "make focus";

      std::cout << "watching for buildfile (\"" << get_daemus_build_filename() << "\")" << std::endl;
      std::cout << "... in directory (\"" << get_daemus_build_file_directory() << "\")" << std::endl;

      std::string build_command = "rerun" \
        " " \
        "-c" \
        " " \
        "--background" \
        " " \
        "--dir \"" + get_daemus_build_file_directory() + "\"" \
        " " \
        "-p \"" + get_daemus_build_filename() + "\"" \
        " " \
        "\"(cd ";

      build_command += project_directory + " && " + actual_command_to_execute_in_project_directory + ")\"";
      std::string output = execute_command(build_command);
      return;
    body_dependency_symbols:
      - std::cout
      - Hexagon::System::Config
      - Hexagon::System::Config*


  - name: run_with_rerun
    type: void
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
    body: |
      std::string actual_command_to_execute_in_project_directory = "make focus";

      std::string build_command = "rerun" \
        " " \
        "-c" \
        " " \
        "--background" \
        " " \
        "--ignore \"**/bin/programs/data/tmp/*\"" \
        " " \
        "-p \"**/*.{rb,js,tsx,coffee,css,scss,sass,erb,html,haml,ru,yml,slim,md,feature,c,h,cpp,hpp,txt,cfg}\"" \
        " " \
        "\"(cd ";

      build_command += project_directory + " && " + actual_command_to_execute_in_project_directory + ")\"";
      std::string output = execute_command(build_command);
      return;
    body_dependency_symbols:
      - Hexagon::System::Config
      - Hexagon::System::Config*


  - name: execute_command
    type: std::string
    private: true
    parameters:
      - name: command
        type: std::string
        default_argument: "\"\""
    body: |
      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         command,
         Blast::ShellCommandExecutorWithCallback::simple_cout_callback
         //Blast::ShellCommandExecutorWithCallback::simple_silent_callback
      );
      return shell_command_executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback


dependencies:


  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: Hexagon::System::Config
    headers: [ Hexagon/System/Config.hpp ]
  - symbol: Hexagon::System::Config*
    headers: [ Hexagon/System/Config.hpp ]

