properties:


  - name: quintessence_build_executable
    type: std::string
    init_with: '"/Users/markoates/Repos/blast/bin/programs/quintessence_from_yaml"'
    constructor_arg: true


functions:


  - name: run_full_rebuild
    type: void
    body: |
      std::string full_rebuild_command = "make clean && make programs && make && make clean && make programs && make";
      execute_command(full_rebuild_command);


  - name: run_simple_echo_command
    body: execute_command("printf \"hello\"");


  - name: run_simple_sleep_command
    body: execute_command("echo \"sleeping\"; sleep 0.5; echo \"done\"");


  - name: run_build_quintessence_file
    parameters:
      - name: project_directory
        type: std::string
        default_argument: '""'
      - name: quintessence_filename
        type: std::string
        default_argument: '""'
    body: |
      if (!Blast::DirectoryExistenceChecker(project_directory).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the expected project directory \"" << project_directory << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }
      if (!Blast::FileExistenceChecker(quintessence_build_executable).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the expected executable \"" << quintessence_build_executable << "\" "
                       << "is not present";
         throw std::runtime_error(error_message.str());
      }
      std::string full_path_to_quintessence_file = project_directory + "/" + quintessence_filename;
      if (!Blast::FileExistenceChecker(full_path_to_quintessence_file).exists())
      {
         std::stringstream error_message;
         error_message << "Daemus::run_build_quintessence_file: error: "
                       << "the quintessence file \"" << quintessence_filename << "\" "
                       << "does not exist";
         throw std::runtime_error(error_message.str());
      }

      std::stringstream command;
      command << "("
                 << "cd " << project_directory
                 << " && "
                 << quintessence_build_executable << " -f " << quintessence_filename
              << ")";
      execute_command(command.str(), false);

      return;
    body_dependency_symbols:
      - Blast::DirectoryExistenceChecker
      - Blast::FileExistenceChecker
      - std::stringstream


  - name: execute_command
    type: std::string
    parameters:
      - name: command
        type: std::string
        default_argument: '""'
      - name: output_to_stdout
        type: bool
        default_argument: true
    body: |
      Blast::ShellCommandExecutorWithCallback shell_command_executor(
         command,
         output_to_stdout ? Blast::ShellCommandExecutorWithCallback::simple_cout_callback
                          : Blast::ShellCommandExecutorWithCallback::simple_silent_callback
      );
      return shell_command_executor.execute();
    body_dependency_symbols:
      - Blast::ShellCommandExecutorWithCallback


  - name: output_pid
    type: void
    body: |
      std::cout << "pid: " << getpid() << std::endl;
      return;
    body_dependency_symbols:
      - std::cout
      - std::endl
      - getpid


dependencies:
  - symbol: getpid
    headers: [ unistd.h ]
  - symbol: Blast::ShellCommandExecutorWithCallback
    headers: [ Blast/ShellCommandExecutorWithCallback.hpp ]
  - symbol: Blast::DirectoryExistenceChecker
    headers: [ Blast/DirectoryExistenceChecker.hpp ]
  - symbol: Blast::FileExistenceChecker
    headers: [ Blast/FileExistenceChecker.hpp ]
