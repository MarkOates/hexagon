- name: guard_throw_with_error_message
  variables: [ CONDITION, CLASS_NAME, FUNCTION_NAME, MESSAGE ]
  template: |
    if (CONDITION)
    {
       std::string_stream error_message; 
       error_message << "CLASS_NAME" << "::" << "FUNCTION_NAME" << ": error: " << "MESSAGE";
       throw std::runtime_error(error_message.str());
    }


- name: guard_throw
  variables: [ CONDITION, CLASS_NAME, FUNCTION_NAME ]
  template: |
    if (CONDITION)
    {
       std::string_stream error_message; 
       error_message << "CLASS_NAME" << "::" << "FUNCTION_NAME" << ": error: condition \"" << "CONDITION" << "\" not met.";
       throw std::runtime_error(error_message.str());
    }


- name: range_loop
  variables: [ TYPE, COLLECTION ]
  template: |
    for (auto &TYPE : COLLECTION)
    {
       #
    }


- name: elements
  variables: [ ELEMENT_LIST_DEFINITION ]
  template: |
    std::vector<std::string> elements = ELEMENT_LIST_DEFINITION; // element list definition like { "Foo", "Bar", "FooBar" };
    return elements;


- name: elements_filtered
  variables: [ CONDITION, ELEMENT_LIST_DEFINITION ]
  template: |
    std::vector<std::string> result_elements = {};
    std::vector<std::string> elements = ELEMENT_LIST_DEFINITION;
    for (auto &element : elements)
    {
       if (CONDITION) result_elements.push_back(element);
    }
    return result_elements;


- name: test_fixture_class_with_allegro
  variables: [ COMPONENT_TEST_CLASS_WITH_FIXTURE_NAME ]
  template: |
    class COMPONENT_TEST_CLASS_WITH_FIXTURE_NAME : public ::testing::Test
    {
    protected:
       COMPONENT_TEST_CLASS_WITH_FIXTURE_NAME() {}

       virtual void SetUp() override
       {
          ASSERT_EQ(false, al_is_system_installed());
          ASSERT_EQ(true, al_init());

          #
       }

       virtual void TearDown() override
       {
          al_uninstall_system();
       }
    };


- name: fixture_test_case
  variables: [ COMPONENT_TEST_CLASS_WITH_FIXTURE_NAME, FUNCTION_NAME, COMPONENT_NAME, TEST_DESCRIPTION_SNAKE_CASE, COMPONENT_INSTANCE_NAME ]
  template: |
    TEST_F(COMPONENT_TEST_CLASS_WITH_FIXTURE_NAME, FUNCTION_NAME__TEST_DESCRIPTION_SNAKE_CASE)
    {
       COMPONENT_NAME COMPONENT_INSTANCE_NAME;
       COMPONENT_INSTANCE_NAME.FUNCTION_NAME();
       SUCCEED();
    }


